---
title: "In-Class Exercise 2: Thematic and Analytical Mapping"
format: html
execute: 
  message: false
  warning: false
editor: visual
---

# Import

## Libraries

```{r}
pacman::p_load(sf, tidyverse, funModeling)
```

## Geospatial Data

Nigeria Level-2 Administrative Boundaries from Humanitarian Data Exchange or GeoBoundaries

```{r}
geoNGA <- st_read(dsn = "data/geospatial/geoNGA", 
                layer = "geoBoundaries-NGA-ADM2") %>%
                st_transform(crs = 26392)
```

```{r}
nga <- st_read(dsn = "data/geospatial/NGA", 
               layer = "nga_admbnda_adm2_osgof_20190417") %>%
                st_transform(crs = 26392)
```

## Aspatial Data

```{r}
wp_nga <- read_csv("data/aspatial/WPDX.csv") %>%
  filter(`#clean_country_name` == "Nigeria")
```

```{r}
saveRDS(wp_nga, file = "data/aspatial/wpNGA.rds")
```

# Data Preprocessing

## Converting Aspatial Data into Geospatial

```{r}
wp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)
glimpse(wp_nga)
```

```{r}
wp_sf <- st_sf(wp_nga, crs=4326)
wp_sf
```

## Projection transformation

```{r}
wp_sf <- wp_sf %>%
  st_transform(crs = 26392)
```

# Water Point Analysis

## Calculate proportion of Functional and Non-Functional Water Points at LGA Level

Check the column that contains if water point is functional or not. By using unique(), we can extract the unique values of each column.

```{r}
unique(wp_sf$`#status_clean`)
```

Get the number of functional water points per LGA

```{r}
functional <- wp_sf %>% filter(`#status_clean` == "Functional") 
WP_Functional <- lengths(st_intersects(geoNGA, functional))
```

Get the number of non-functional water points per LGA

```{r}
non_functional <- wp_sf %>% filter(`#status_clean` == "Non-Functional")
WP_Non_Functional <- lengths(st_intersects(geoNGA, non_functional))
```

Get the total number of water points per LGA

```{r}
WP_Total <- lengths(st_intersects(geoNGA, wp_sf))
```

### Combining aspatial and spatial data into simple feature tibble

Create a copy of the geoNGA data frame with WP_Functional, WP_Non_Functional, and WP_Total

```{r}
nga_combined <- tibble(geoNGA, WP_Functional, WP_Non_Functional, WP_Total)
```

Create columns:

-   WP_Functional_Proportion: Proportion of functional water points (number of functional water points / total number of water points)

-   WP_Non_Functional_Proportion: Proportion of non-functional water points (number of non-functional water points / total number of water points)

```{r}
nga_combined <- nga_combined %>%
  mutate(`WP_Functional_Proportion` = `WP_Functional`/`WP_Total`,
         `WP_Non_Functional_Proportion` = `WP_Non_Functional`/`WP_Total`)
```

Replace NaN values (caused by 0 / 0) in the new columns with 0

```{r}
nga_combined$`WP_Functional_Proportion`[is.na(nga_combined$`WP_Functional_Proportion`)] = 0

nga_combined$`WP_Non_Functional_Proportion`[is.na(nga_combined$`WP_Non_Functional_Proportion`)] = 0
```

Display the first 5 rows of the new tibble

```{r}
head(nga_combined, n=5)
```

## Visualise distribution of water points with analytical plot

**Plot distribution of water points by LGA**

```{r}
ggplot(data=nga_combined, 
       aes(x= as.numeric(`WP_Total`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Distribution of Total Water Points",
       x = "Number of Water Points",
       y = "Number of LGAs")
```

From the histogram, we can see that most LGAs have around 100-200 water points.

**Scatter plot between proportion of functional water points vs. number of total water points**

```{r}
ggplot(data=nga_combined, 
       aes(y = `WP_Total`, 
           x= as.numeric(`WP_Functional_Proportion`)))+
  geom_point(color="violet") +
  labs(x = "Proportion Functional",
       y = "Total Water Points")
```
