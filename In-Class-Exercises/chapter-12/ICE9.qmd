---
title: "In-Class Exercise 9: Geospatial Predictive Modelling"
format: html
author: "Jennifer Poernomo"
date: "13 March 2023"
date-modified: "`r Sys.Date()`"
execute: 
  message: false
  warning: false
editor: visual
---

# Import packages

```{r}
pacman::p_load(sf, spdep, GWmodel, SpatialML, tidyverse, tmap, ggpubr, olsrr, devtools, rsample)
```

# Import Data

## Aspatial

```{r}
mdata <- read_rds("data/aspatial/mdata.rds")
```

# Data Preprocessing

## Train-test Split

```{r}
set.seed(1234)
# resale_split <- initial_split(mdata,
#                               prop=6.5/10)
# train_data <- training(resale_split)
# test_data <- testing(resale_split)
```

```{r}
# write_rds(train_data, "data/model/train_data.rds")
# write_rds(test_data, "data/model/test_data.rds")
```

```{r}
train_data <- read_rds("data/model/train_data.rds")
test_data <- read_rds("data/model/test_data.rds")
```

# Model Training

## Ordinary Least Squares Method

Without geospatial weights

```{r}
# price_mlr <- lm(resale_price ~ floor_area_sqm +
#                   storey_order + remaining_lease_mths +
#                   PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
#                   PROX_MRT + PROX_PARK + PROX_MALL +
#                   PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
#                   WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
#                   WITHIN_1KM_PRISCH,
#                 data=train_data)
# summary(price_mlr)
```

`{# {r} # write_rds(price_mlr, "data/model/price_mlr.rds")`

```{r}
price_mlr <- read_rds("data/model/price_mlr.rds")
```

## GWR Predictive Method using SpatialML

To deal with point data, we need to use sp's spatial point data frame for the GWR to understand it.

```{r}
train_data_sp <- as_Spatial(train_data)
train_data_sp
```

**Random Forest**

Extract coordinate data as a vector table

```{r}
coords <- st_coordinates(mdata)
coords_train <- st_coordinates(train_data)
coords_test <- st_coordinates(test_data)
```

```{r}
write_rds(coords_train, "data/model/coords_train.rds")
write_rds(coords_test, "data/model/coords_test.rds")
```

Drop geometry

```{r}
train_data <- st_drop_geometry(train_data)
```

Calibrate random forest (without spatial weights)

```{r}
set.seed(1234)
rf <- ranger(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL +
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data=train_data)
```

```{r}
print(rf)
```

It has a higher R2 value than the OLS.

**GWR Random Forest (Adaptive)**

::: callout-warning
## Sorry, not enough computer memory to run this :(
:::

```{r}
set.seed(1234)
# gwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm +
#                   storey_order + remaining_lease_mths +
#                   PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
#                   PROX_MRT + PROX_PARK + PROX_MALL +
#                   PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
#                   WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
#                   WITHIN_1KM_PRISCH,
#                   dframe=train_data,
#                   bw=55, # defined as distance
#                   kernel="adaptive",
#                   coords=coords_train)
```

```{r}
# write_rds(gwRF_adaptive, "data/model/gwRF_adaptive.rds")
```

```{r}
# gwRF_adaptive <- read_rds("data/model/gwRF_adaptive.rds")
```

```{r}
# vi_df <- as.data.frame(gwRF_adaptive$Global.Model$variable.importance)
```

# Model Evaluation

**Preparing test data**

```{r}
test_data <- cbind(test_data, coords_test) %>% 
  st_drop_geometry()
```

**Predict the data**

```{r}
# gwRF_pred <- predict.grf(gwRF_adaptive,
#                          test_data,
#                          x.var.name="X",
#                          y.var.name="Y",
#                          local.w=1,
#                          global.w=0)
```

```{r}
# gwRF_pred_df <- as.data.frame(gwRF_pred)
```

**Model Evaluation**

Get the RMSE between prediction values and ground truth

```{r}
# sqrt(mean((test_predict$resale_price - test_predict$predict_grf)^2))
```
