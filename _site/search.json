[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "After uninstalling and re-installing R and RStudio 3 times, I finally got this website running.\nSometimes, when things go wrong, closing and reopening RStudio does the trick. If not, restart your computer.\nBleeding edge is not necessarily good. In fact, it can be an anti-pattern because the latest versions of technology might not be compatible. After a week of struggling with broken installation, I finally downgraded to R 4.2.1 and finally it’s fine."
  },
  {
    "objectID": "Hands-On-Exercises/chapter-02/HOE1.html",
    "href": "Hands-On-Exercises/chapter-02/HOE1.html",
    "title": "Hands-On Exercise 2: Geospatial Data Wrangling",
    "section": "",
    "text": "pacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-02/HOE1.html#importing-the-datasets",
    "href": "Hands-On-Exercises/chapter-02/HOE1.html#importing-the-datasets",
    "title": "Hands-On Exercise 2: Geospatial Data Wrangling",
    "section": "Importing the Datasets",
    "text": "Importing the Datasets\nMaster Plan 2014 Subzone Boundaries (Web) from data.gov.sg . Web version is used because it’s optimized for web display, with a smaller file size.\n\nmpsz = st_read(dsn = \"data/geospatial/master-plan-2014-subzone-boundary-web-shp\", \n               layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Jenpoer\\IS415-GAA\\Hands-On-Exercises\\chapter-02\\data\\geospatial\\master-plan-2014-subzone-boundary-web-shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nCycling Path from LTADataMall\n\ncyclingpath = st_read(dsn = \"data/geospatial/CyclingPathGazette\", \n                      layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\Jenpoer\\IS415-GAA\\Hands-On-Exercises\\chapter-02\\data\\geospatial\\CyclingPathGazette' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nPre-Schools Location from Dataportal.asia (originally from data.gov.sg)\n\npreschool = st_read(\"data/geospatial/preschools-location.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Jenpoer\\IS415-GAA\\Hands-On-Exercises\\chapter-02\\data\\geospatial\\preschools-location.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-02/HOE1.html#checking-the-contents-of-a-simple-feature-data-frame",
    "href": "Hands-On-Exercises/chapter-02/HOE1.html#checking-the-contents-of-a-simple-feature-data-frame",
    "title": "Hands-On Exercise 2: Geospatial Data Wrangling",
    "section": "Checking the contents of a simple feature data frame",
    "text": "Checking the contents of a simple feature data frame\nChecking the information about the geometry, such as type, geographic extent of features, and coordinate system of the data.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nFind out about the attribute information in the data frame.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nReveal complete information of a feature object, but retrieve the first few rows only.\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-On-Exercises/chapter-02/HOE1.html#plotting-the-geospatial-data",
    "href": "Hands-On-Exercises/chapter-02/HOE1.html#plotting-the-geospatial-data",
    "title": "Hands-On Exercise 2: Geospatial Data Wrangling",
    "section": "Plotting the Geospatial Data",
    "text": "Plotting the Geospatial Data\nPlot all the features of the data frame in small multiples. max.plot is used to show all the features, since it limits to the first 9 by default.\n\nplot(mpsz, max.plot=15)\n\n\n\n\nPlot only the geometry\n\nplot(st_geometry(mpsz))\n\n\n\n\nPlot the sf object using a specific attribute\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-02/HOE1.html#projection-transformation",
    "href": "Hands-On-Exercises/chapter-02/HOE1.html#projection-transformation",
    "title": "Hands-On Exercise 2: Geospatial Data Wrangling",
    "section": "Projection Transformation",
    "text": "Projection Transformation\nProject a feature to another coordinate system.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nEven though the projection system is SVY21, when we read the end of print, the EPSG is 9001. This is wrong because EPSG of SVY21 should be 3414.\nSVY21 is coordinate system for Singapore.\n\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\nHowever, different case for Preschool. We cannot just replace the EPSG.\n\nst_geometry(preschool)\n\nGeometry set for 1925 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nIt uses WGS84, which we need to actually project mathematically to SVY21.\n\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-02/HOE1.html#import-data",
    "href": "Hands-On-Exercises/chapter-02/HOE1.html#import-data",
    "title": "Hands-On Exercise 2: Geospatial Data Wrangling",
    "section": "Import data",
    "text": "Import data\n\nlistings <- read_csv('data/aspatial/listings.csv')\nlist(listings)\n\n[[1]]\n# A tibble: 4,161 × 18\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   145\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    85\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    85\n 5 275344 15 mins… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    49\n 6 289234 Booking…  367042 Belinda East R… Tampin…    1.34    104. Privat…   184\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    79\n 8 324945 Cozy Bl… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    49\n 9 330089 Cozy Bl… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    55\n10 330095 10 mins… 1439258 Kay     Centra… Bukit …    1.29    104. Privat…    55\n# … with 4,151 more rows, 8 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>,\n#   number_of_reviews_ltm <dbl>, license <chr>, and abbreviated variable names\n#   ¹​host_name, ²​neighbourhood_group, ³​neighbourhood, ⁴​latitude, ⁵​longitude,\n#   ⁶​room_type\n\n\nListings is a tibble\n\nis_tibble(listings)\n\n[1] TRUE\n\n\nCreate a simple feature data frame from aspatial data\n\nlistings_sf <- st_as_sf(listings, \n                        coords = c(\"longitude\", \"latitude\"), \n                        crs=4326) %>%\n  st_transform(crs = 3414)\n\n\n\n\n\n\n\n%>% is like a pipe, defined by package magrittr, used to pass the left hand side of the operator to the first argument of the right hand side of the operator\n\n\n\n\n\n\n\nglimpse(listings_sf)\n\nRows: 4,161\nColumns: 17\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275344, 289…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 145, 85, 85, 49, 184, 79, 49, 55, 5…\n$ minimum_nights                 <dbl> 92, 92, 92, 92, 60, 92, 92, 60, 60, 60,…\n$ number_of_reviews              <dbl> 18, 20, 24, 47, 14, 12, 133, 17, 12, 3,…\n$ last_review                    <date> 2014-12-26, 2020-01-17, 2019-10-13, 20…\n$ reviews_per_month              <dbl> 0.18, 0.15, 0.18, 0.34, 0.11, 0.10, 1.0…\n$ calculated_host_listings_count <dbl> 1, 6, 6, 6, 44, 6, 7, 44, 44, 44, 6, 7,…\n$ availability_365               <dbl> 365, 340, 265, 365, 296, 285, 365, 181,…\n$ number_of_reviews_ltm          <dbl> 0, 0, 0, 0, 1, 0, 0, 3, 2, 0, 1, 0, 0, …\n$ license                        <chr> NA, NA, NA, NA, \"S0399\", NA, NA, \"S0399…\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-02/HOE1.html#buffering",
    "href": "Hands-On-Exercises/chapter-02/HOE1.html#buffering",
    "title": "Hands-On Exercise 2: Geospatial Data Wrangling",
    "section": "Buffering",
    "text": "Buffering\nBuffering is reclassification based on distance: classification of within/without a given proximity.\n\nbuffer_cycling <- st_buffer(cyclingpath, \n                            dist=5, nQuadSegs = 30) # 5 meter buffers along cycling paths\n\nCalculate area of buffers\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nShow sum of total land involved\n\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-02/HOE1.html#point-in-polygon-count",
    "href": "Hands-On-Exercises/chapter-02/HOE1.html#point-in-polygon-count",
    "title": "Hands-On Exercise 2: Geospatial Data Wrangling",
    "section": "Point-in-polygon Count",
    "text": "Point-in-polygon Count\nGoal: Identify pre-schools located in each Planning Subzone using st_intersects.\nlength is used to calculate number of pre-schools that fall inside each zone.\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, listings_sf))\n\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   2.000   9.709   8.000 253.000 \n\n\nList the subzone with the most number of preschools\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 30342.65 ymin: 32035.6 xmax: 31453.96 ymax: 33233.11\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      126          6  LAVENDER    KLSZ06      N    KALLANG         KL\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR A7A07F328A38B6EF 2014-12-05 30874.41 32569.53\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1    3609.15   757907.6 MULTIPOLYGON (((31389.56 32...          253\n\n\nDisplay count of preschools in subzone number\n\naggregate(`PreSch Count` ~ SUBZONE_NO, mpsz3414, FUN=sum)\n\n   SUBZONE_NO PreSch Count\n1           1          426\n2           2          372\n3           3          522\n4           4          340\n5           5          314\n6           6          337\n7           7          124\n8           8          101\n9           9          146\n10         10          154\n11         11           91\n12         12           55\n13         13           57\n14         14           35\n15         15           16\n16         16           39\n17         17            7\n\n\nCount density by planning subzone\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\nhead(mpsz3414)\n\nSimple feature collection with 6 features and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 24468.89 ymin: 28369.47 xmax: 32362.39 ymax: 30542.74\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n6        6          7 ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6         BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...            8\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...           26\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...           48\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...            2\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...            1\n6 29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...            7\n             Area     PreSch Density\n1 1630379.3 [m^2]   4.906834 [1/m^2]\n2  559816.2 [m^2]  46.443811 [1/m^2]\n3  160807.5 [m^2] 298.493545 [1/m^2]\n4  595428.9 [m^2]   3.358923 [1/m^2]\n5  387429.4 [m^2]   2.581115 [1/m^2]\n6 1030378.8 [m^2]   6.793618 [1/m^2]"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-03/HOE2.html",
    "href": "Hands-On-Exercises/chapter-03/HOE2.html",
    "title": "Hands-On Exercise 3: Choropleth Mapping",
    "section": "",
    "text": "Sorry, I couldn’t finish this earlier because I had trouble with my R installation. I had to download an older version."
  },
  {
    "objectID": "Hands-On-Exercises/chapter-03/HOE2.html#using-qtm",
    "href": "Hands-On-Exercises/chapter-03/HOE2.html#using-qtm",
    "title": "Hands-On Exercise 3: Choropleth Mapping",
    "section": "Using qtm()",
    "text": "Using qtm()\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-03/HOE2.html#using-tmap-attributes",
    "href": "Hands-On-Exercises/chapter-03/HOE2.html#using-tmap-attributes",
    "title": "Hands-On Exercise 3: Choropleth Mapping",
    "section": "Using tmap attributes",
    "text": "Using tmap attributes\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\nAnatomy of tmap\n\nBase: tm_shape()\nLayers: tm_fill(), tm_polygons()\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\nUsing tm_polygons()\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\nUsing tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\nGive borders\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\nData classification methods\nQuantile data classification with 5 classes (built-in)\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nCustom category breaks\nCheck the summary statistics\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.7113  0.7926  0.8561  0.8786 19.0000      92 \n\n\nWe set break point at 0.60, 0.70, 0.80, 0.90. Additionally, we set minimum to 0 and maximum to 100.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-03/HOE2.html#color-scheme",
    "href": "Hands-On-Exercises/chapter-03/HOE2.html#color-scheme",
    "title": "Hands-On Exercise 3: Choropleth Mapping",
    "section": "Color Scheme",
    "text": "Color Scheme\nUsing ColourBrewer palette\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-03/HOE2.html#map-layout",
    "href": "Hands-On-Exercises/chapter-03/HOE2.html#map-layout",
    "title": "Hands-On Exercise 3: Choropleth Mapping",
    "section": "Map Layout",
    "text": "Map Layout\nWhole cohesive map - title, scale bar, compass, margins, aspect ratios, legends, etc.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nMap style\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\nCartographic furniture\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-03/HOE2.html#small-multiples-facets",
    "href": "Hands-On-Exercises/chapter-03/HOE2.html#small-multiples-facets",
    "title": "Hands-On Exercise 3: Choropleth Mapping",
    "section": "Small Multiples / Facets",
    "text": "Small Multiples / Facets\nReset to default style\n\ntmap_style(\"white\")\n\n\n1. Assign multiple values to one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n2. Define group-by variable in tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n3. Multiple stand-alone maps with tmap_arrange()\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-03/HOE2.html#mapping-spatial-object-meeting-a-selection-criterion",
    "href": "Hands-On-Exercises/chapter-03/HOE2.html#mapping-spatial-object-meeting-a-selection-criterion",
    "title": "Hands-On Exercise 3: Choropleth Mapping",
    "section": "Mapping Spatial Object Meeting a Selection Criterion",
    "text": "Mapping Spatial Object Meeting a Selection Criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-04/HOE3.html",
    "href": "Hands-On-Exercises/chapter-04/HOE3.html",
    "title": "Hands-On Exercise 4 & 5: Spatial Point Patterns Analysis",
    "section": "",
    "text": "pacman::p_load(maptools, sf, raster, spatstat, tmap)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-04/HOE3.html#spatial-data",
    "href": "Hands-On-Exercises/chapter-04/HOE3.html#spatial-data",
    "title": "Hands-On Exercise 4 & 5: Spatial Point Patterns Analysis",
    "section": "Spatial Data",
    "text": "Spatial Data\n\nchildcare_sf <- st_read(\"data/geospatial/childcare.geojson\") %>%\n  st_transform(crs = 3414)\n\nReading layer `childcare' from data source \n  `C:\\Jenpoer\\IS415-GAA\\Hands-On-Exercises\\chapter-04\\data\\geospatial\\childcare.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf <- st_read(dsn = \"data/geospatial/CostalOutline\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\Jenpoer\\IS415-GAA\\Hands-On-Exercises\\chapter-04\\data\\geospatial\\CostalOutline' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf <- st_read(dsn = \"../chapter-02/data/geospatial/master-plan-2014-subzone-boundary-web-shp\",\n                   layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Jenpoer\\IS415-GAA\\Hands-On-Exercises\\chapter-02\\data\\geospatial\\master-plan-2014-subzone-boundary-web-shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-04/HOE3.html#retrieve-referencing-system-information-of-geospatial-data",
    "href": "Hands-On-Exercises/chapter-04/HOE3.html#retrieve-referencing-system-information-of-geospatial-data",
    "title": "Hands-On Exercise 4 & 5: Spatial Point Patterns Analysis",
    "section": "Retrieve referencing system information of geospatial data",
    "text": "Retrieve referencing system information of geospatial data\nChildcare: EPSG 3414, Projection CRS SVY21\n\nst_geometry(childcare_sf)\n\nGeometry set for 1545 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25667.6 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\n\nst_crs(childcare_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nSG: EPSG 9001, Projection CRS SVY21\n\nst_geometry(sg_sf)\n\nGeometry set for 60 features \nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nMPSZ: EPSG 9001, Projection CRS SVY21\n\nst_geometry(mpsz_sf)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-04/HOE3.html#assign-correct-crs-information",
    "href": "Hands-On-Exercises/chapter-04/HOE3.html#assign-correct-crs-information",
    "title": "Hands-On Exercise 4 & 5: Spatial Point Patterns Analysis",
    "section": "Assign correct crs information",
    "text": "Assign correct crs information\nSG & MPSZ\nWe only need to change the crs because it is already the correct projection.\n\nmpsz_sf <- st_set_crs(mpsz_sf, 3414)\nsg_sf <- st_set_crs(sg_sf, 3414)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-04/HOE3.html#conversion-from-sfs-simple-feature-data-frame-to-sps-spatial-class",
    "href": "Hands-On-Exercises/chapter-04/HOE3.html#conversion-from-sfs-simple-feature-data-frame-to-sps-spatial-class",
    "title": "Hands-On Exercise 4 & 5: Spatial Point Patterns Analysis",
    "section": "Conversion from sf’s simple feature data frame to sp’s Spatial* class",
    "text": "Conversion from sf’s simple feature data frame to sp’s Spatial* class\n\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n\n\nsummary(childcare)\n\nObject of class SpatialPointsDataFrame\nCoordinates:\n               min      max\ncoords.x1 11203.01 45404.24\ncoords.x2 25667.60 49300.88\ncoords.x3     0.00     0.00\nIs projected: TRUE \nproj4string :\n[+proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1\n+x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0\n+units=m +no_defs]\nNumber of points: 1545\nData attributes:\n     Name           Description       \n Length:1545        Length:1545       \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n\n\n\nsummary(mpsz)\n\nObject of class SpatialPolygonsDataFrame\nCoordinates:\n        min      max\nx  2667.538 56396.44\ny 15748.721 50256.33\nIs projected: TRUE \nproj4string :\n[+proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1\n+x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0\n+units=m +no_defs]\nData attributes:\n    OBJECTID       SUBZONE_NO      SUBZONE_N          SUBZONE_C        \n Min.   :  1.0   Min.   : 1.000   Length:323         Length:323        \n 1st Qu.: 81.5   1st Qu.: 2.000   Class :character   Class :character  \n Median :162.0   Median : 4.000   Mode  :character   Mode  :character  \n Mean   :162.0   Mean   : 4.625                                        \n 3rd Qu.:242.5   3rd Qu.: 6.500                                        \n Max.   :323.0   Max.   :17.000                                        \n    CA_IND           PLN_AREA_N         PLN_AREA_C          REGION_N        \n Length:323         Length:323         Length:323         Length:323        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n   REGION_C           INC_CRC            FMEL_UPD_D             X_ADDR     \n Length:323         Length:323         Min.   :2014-12-05   Min.   : 5093  \n Class :character   Class :character   1st Qu.:2014-12-05   1st Qu.:21864  \n Mode  :character   Mode  :character   Median :2014-12-05   Median :28465  \n                                       Mean   :2014-12-05   Mean   :27257  \n                                       3rd Qu.:2014-12-05   3rd Qu.:31674  \n                                       Max.   :2014-12-05   Max.   :50425  \n     Y_ADDR        SHAPE_Leng        SHAPE_Area      \n Min.   :19579   Min.   :  871.5   Min.   :   39438  \n 1st Qu.:31776   1st Qu.: 3709.6   1st Qu.:  628261  \n Median :35113   Median : 5211.9   Median : 1229894  \n Mean   :36106   Mean   : 6524.4   Mean   : 2420882  \n 3rd Qu.:39869   3rd Qu.: 6942.6   3rd Qu.: 2106483  \n Max.   :49553   Max.   :68083.9   Max.   :69748299  \n\n\n\nsummary(sg)\n\nObject of class SpatialPolygonsDataFrame\nCoordinates:\n        min      max\nx  2663.926 56047.79\ny 16357.981 50244.03\nIs projected: TRUE \nproj4string :\n[+proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1\n+x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0\n+units=m +no_defs]\nData attributes:\n    GDO_GID          MSLINK          MAPID    COSTAL_NAM       \n Min.   : 1.00   Min.   : 1.00   Min.   :0   Length:60         \n 1st Qu.:15.75   1st Qu.:17.75   1st Qu.:0   Class :character  \n Median :30.50   Median :33.50   Median :0   Mode  :character  \n Mean   :30.50   Mean   :33.77   Mean   :0                     \n 3rd Qu.:45.25   3rd Qu.:49.25   3rd Qu.:0                     \n Max.   :60.00   Max.   :67.00   Max.   :0"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-04/HOE3.html#conversion-from-spatial-class-to-generic-sp-format-spatial",
    "href": "Hands-On-Exercises/chapter-04/HOE3.html#conversion-from-spatial-class-to-generic-sp-format-spatial",
    "title": "Hands-On Exercise 4 & 5: Spatial Point Patterns Analysis",
    "section": "Conversion from Spatial* class to generic sp format (Spatial)",
    "text": "Conversion from Spatial* class to generic sp format (Spatial)\n\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-04/HOE3.html#conversion-from-generic-sp-format-to-spatstats-ppp",
    "href": "Hands-On-Exercises/chapter-04/HOE3.html#conversion-from-generic-sp-format-to-spatstats-ppp",
    "title": "Hands-On Exercise 4 & 5: Spatial Point Patterns Analysis",
    "section": "Conversion from generic sp format to spatstat’s ppp",
    "text": "Conversion from generic sp format to spatstat’s ppp\n\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\n\n\n\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\n\n\n\n\n\nDuplicated points may be problematic in spatial point patterns analysis. This is because the statistical methodology used for spatial point patterns analysis assumes that points cannot be coincident."
  },
  {
    "objectID": "Hands-On-Exercises/chapter-04/HOE3.html#handling-duplicated-points",
    "href": "Hands-On-Exercises/chapter-04/HOE3.html#handling-duplicated-points",
    "title": "Hands-On Exercise 4 & 5: Spatial Point Patterns Analysis",
    "section": "Handling duplicated points",
    "text": "Handling duplicated points\nCheck for duplication\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nCount the number of coincident points\n\nsum(multiplicity(childcare_ppp) > 1)\n\n[1] 128\n\n\nView locations of duplicate point events\n\ntmap_mode('view')\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\nWe can see duplicate points because they are more opaque (multiple points overlapping exactly on the same spot).\n\ntmap_mode('plot')\n\nThere are three approaches to this problem.\n\nDelete the duplicates: But some useful point events will be lost.\nJittering: Add a small perturbation to the duplicate points so that they do not occupy the exact same space.\nMarks: make each point “unique” and then attach the duplicates of the points to the patterns as marks (attributes of the points). Then, we need analytical techniques that take into account these marks.\n\nThis code implements jittering.\n\nchildcare_ppp_jit <- rjitter(childcare_ppp,\n                             retru=TRUE,\n                             nsim=1,\n                             drop=TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-04/HOE3.html#creating-spatstats-owin-object",
    "href": "Hands-On-Exercises/chapter-04/HOE3.html#creating-spatstats-owin-object",
    "title": "Hands-On Exercise 4 & 5: Spatial Point Patterns Analysis",
    "section": "Creating spatstat’s owin object",
    "text": "Creating spatstat’s owin object\nspatstat’s owin object is specially designed to represent a polygonal region.\n\nsg_owin <- as(sg_sp, \"owin\")\n\n\nplot(sg_owin)\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-04/HOE3.html#combining-point-events-object-and-owin-object",
    "href": "Hands-On-Exercises/chapter-04/HOE3.html#combining-point-events-object-and-owin-object",
    "title": "Hands-On Exercise 4 & 5: Spatial Point Patterns Analysis",
    "section": "Combining point events object and owin object",
    "text": "Combining point events object and owin object\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\n\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 2.063463e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-04/HOE3.html#kernel-density-estimation",
    "href": "Hands-On-Exercises/chapter-04/HOE3.html#kernel-density-estimation",
    "title": "Hands-On Exercise 4 & 5: Spatial Point Patterns Analysis",
    "section": "Kernel Density Estimation",
    "text": "Kernel Density Estimation\n\nComputing KDE using automatic bandwidth selection method\n\nkde_childcareSG_bw <- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\")\n\n\nplot(kde_childcareSG_bw)\n\n\n\n\nBandwidth:\n\nbw <- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n298.4095 \n\n\n\n\nRescaling KDE values\n\nchildcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, \"km\")\n\n\nkde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\n\n\nDifferent automatic bandwidth methods\n\nbw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\n\n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.224898 1.450966 \n\n\n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\n\n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.2984095 \n\n\nbw.diggle vs bw.ppl\n\nkde_childcareSG.ppl <- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")\n\n\n\n\n\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\n\n\n\n\n\nFixed and Adaptive KDE\nFixed Bandwidth\n\nkde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n\n\n\n\nAdaptive Bandwidth\n\nkde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n\n\n\n\n\n\nConverting KDE output into grid object\n\ngridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\nConverting into raster\n\nkde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\n\nAssigning projection systems\n\nprojection(kde_childcareSG_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:3414 \nsource     : memory\nnames      : v \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\n\n\nPlot in tmap\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\nComparing spatial point patterns using KDE\nExtracting study areas\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\nPlotting target planning areas\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\nConverting into generic sp format\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\nCreating owin object\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\nCombining childcare points and the study area\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\nComputing KDE\n\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\n\n\n\n\nFixed bandwidth KDE\n\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-04/HOE3.html#nearest-neighbors-analysis",
    "href": "Hands-On-Exercises/chapter-04/HOE3.html#nearest-neighbors-analysis",
    "title": "Hands-On Exercise 4 & 5: Spatial Point Patterns Analysis",
    "section": "Nearest Neighbors Analysis",
    "text": "Nearest Neighbors Analysis\nClark and Evans Test\n\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  childcareSG_ppp\nR = 0.54756, p-value = 0.01\nalternative hypothesis: clustered (R < 1)\n\n\nChoa Chu Kang\n\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 999 simulations of CSR with fixed n\n\ndata:  childcare_ck_ppp\nR = 0.95476, p-value = 0.132\nalternative hypothesis: two-sided\n\n\nTampines\n\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 999 simulations of CSR with fixed n\n\ndata:  childcare_tm_ppp\nR = 0.799, p-value = 0.002\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-04/HOE3.html#g-function",
    "href": "Hands-On-Exercises/chapter-04/HOE3.html#g-function",
    "title": "Hands-On Exercise 4 & 5: Spatial Point Patterns Analysis",
    "section": "G-Function",
    "text": "G-Function\n\nChoa Chu Kang\nComputing G-function estimation\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\nPerforming Complete Spatial Randomness Test\nHypothesis test\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed\nH1 = The distribution of childcare services at Choa Chu Kang are not randomly distributed\nHo rejected if p-value smaller than alpha = 0.001\n\nG_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\n\nTampines\nComputing G-function estimation\n\nG_tm = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n\n\n\n\nSpatial Randomness test\n\nG_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_tm.csr)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-04/HOE3.html#f-function",
    "href": "Hands-On-Exercises/chapter-04/HOE3.html#f-function",
    "title": "Hands-On Exercise 4 & 5: Spatial Point Patterns Analysis",
    "section": "F-Function",
    "text": "F-Function\n\nChoa Chu Kang\nComputing F-function estimation\n\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\nPerforming complete Spatial Randomness Test\n\nF_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(F_CK.csr)\n\n\n\n\n\n\nTampines\nComputing F-function estimation\n\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\nPerforming complete Spatial Randomness Test\n\nF_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(F_tm.csr)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-04/HOE3.html#k-function",
    "href": "Hands-On-Exercises/chapter-04/HOE3.html#k-function",
    "title": "Hands-On Exercise 4 & 5: Spatial Point Patterns Analysis",
    "section": "K-Function",
    "text": "K-Function\n\nChoa Chu Kang\nComputing K-function estimate\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\nPerforming complete Spatial Randomness Test\n\nK_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n\nTampines\nComputing K-function estimation\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\nPerforming complete Spatial Randomness Test\n\nK_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-04/HOE3.html#l-function",
    "href": "Hands-On-Exercises/chapter-04/HOE3.html#l-function",
    "title": "Hands-On Exercise 4 & 5: Spatial Point Patterns Analysis",
    "section": "L-Function",
    "text": "L-Function\n\nChoa Chu Kang\nComputing L Function estimation\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\nPerforming complete Spatial Randomness Test\n\nL_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n\nTampines\nComputing L-function estimate\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\nPerforming complete Spatial Randomness Test\n\nL_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-08/HOE6.html",
    "href": "Hands-On-Exercises/chapter-08/HOE6.html",
    "title": "Hands-On Exercise 8: Spatial Weights and Applications",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n\n\n\n\n\n\n\nspdep is an older package, so we need to convert data types, unlike the newer sfdep which does it automatically."
  },
  {
    "objectID": "Hands-On-Exercises/chapter-08/HOE6.html#geospatial",
    "href": "Hands-On-Exercises/chapter-08/HOE6.html#geospatial",
    "title": "Hands-On Exercise 8: Spatial Weights and Applications",
    "section": "Geospatial",
    "text": "Geospatial\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\Jenpoer\\IS415-GAA\\Hands-On-Exercises\\chapter-08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-08/HOE6.html#aspatial",
    "href": "Hands-On-Exercises/chapter-08/HOE6.html#aspatial",
    "title": "Hands-On Exercise 8: Spatial Weights and Applications",
    "section": "Aspatial",
    "text": "Aspatial\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\nis_tibble(hunan2012)\n\n[1] TRUE"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-08/HOE6.html#combining-data-frame-with-left-join",
    "href": "Hands-On-Exercises/chapter-08/HOE6.html#combining-data-frame-with-left-join",
    "title": "Hands-On Exercise 8: Spatial Weights and Applications",
    "section": "Combining data frame with left join",
    "text": "Combining data frame with left join\n\n\n\n\n\n\nIf you want to retain geometry, the left one must be the geospatial data\n\n\n\n\n\n\n\nhunan <- left_join(hunan,hunan2012)%>%\n  select(1:4, 7, 15)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-08/HOE6.html#queen",
    "href": "Hands-On-Exercises/chapter-08/HOE6.html#queen",
    "title": "Hands-On Exercise 8: Spatial Weights and Applications",
    "section": "Queen",
    "text": "Queen\n\nwm_q <- poly2nb(hunan, queen = TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nList all neighboring polygons for first polygon in the object\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nReveal county names of the five neighbouring polygons\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nRetrieve GDPPC of five neighbouring counties\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nDisplay complete weight matrix\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-08/HOE6.html#rook",
    "href": "Hands-On-Exercises/chapter-08/HOE6.html#rook",
    "title": "Hands-On Exercise 8: Spatial Weights and Applications",
    "section": "Rook",
    "text": "Rook\n\nwm_r <- poly2nb(hunan, queen = FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-08/HOE6.html#visualising-contiguity-weights",
    "href": "Hands-On-Exercises/chapter-08/HOE6.html#visualising-contiguity-weights",
    "title": "Hands-On Exercise 8: Spatial Weights and Applications",
    "section": "Visualising contiguity weights",
    "text": "Visualising contiguity weights\nGet longitude and latitude of each polygon by mapping st_centroid over the geometry column\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\ncoords <- cbind(longitude, latitude)\n\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\nQueenRook\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main=\"Queen Contiguity\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\", main=\"Rook Contiguity\")"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-08/HOE6.html#determine-the-cut-off-distance",
    "href": "Hands-On-Exercises/chapter-08/HOE6.html#determine-the-cut-off-distance",
    "title": "Hands-On Exercise 8: Spatial Weights and Applications",
    "section": "Determine the cut-off distance",
    "text": "Determine the cut-off distance\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nWe see that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour."
  },
  {
    "objectID": "Hands-On-Exercises/chapter-08/HOE6.html#fixed-distance-weight-matrix",
    "href": "Hands-On-Exercises/chapter-08/HOE6.html#fixed-distance-weight-matrix",
    "title": "Hands-On Exercise 8: Spatial Weights and Applications",
    "section": "Fixed distance weight matrix",
    "text": "Fixed distance weight matrix\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nOn average, each point has 3.681818 links (so, 3-4 links)\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp <- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\nRed lines: links of first nearest neighbours, black lines: links of neighbours within the cut-off distance of 62 km\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08, main=\"1st nearest neighbours\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main=\"Distance link\")"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-08/HOE6.html#adaptive-distance-weight-matrix",
    "href": "Hands-On-Exercises/chapter-08/HOE6.html#adaptive-distance-weight-matrix",
    "title": "Hands-On Exercise 8: Spatial Weights and Applications",
    "section": "Adaptive distance weight matrix",
    "text": "Adaptive distance weight matrix\nSpecify the number of neighbours instead, so the distance becomes adaptive to the number of neighbours.\n\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-08/HOE6.html#spatial-lag-with-row-standardised-weights",
    "href": "Hands-On-Exercises/chapter-08/HOE6.html#spatial-lag-with-row-standardised-weights",
    "title": "Hands-On Exercise 8: Spatial Weights and Applications",
    "section": "Spatial Lag with Row-Standardised Weights",
    "text": "Spatial Lag with Row-Standardised Weights\nCompute average neighbour GDPPC value for each polygon.\n\nGDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\n\nlag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag GDPPC\")\nhunan <- left_join(hunan,lag.res)\n\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_gdppc <- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-08/HOE6.html#spatial-lag-as-a-sum-of-neighbouring-values",
    "href": "Hands-On-Exercises/chapter-08/HOE6.html#spatial-lag-as-a-sum-of-neighbouring-values",
    "title": "Hands-On Exercise 8: Spatial Weights and Applications",
    "section": "Spatial Lag as a sum of neighbouring values",
    "text": "Spatial Lag as a sum of neighbouring values\n\nb_weights <- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\n\nlag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\n\nhunan <- left_join(hunan, lag.res)\n\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-08/HOE6.html#spatial-window-average",
    "href": "Hands-On-Exercises/chapter-08/HOE6.html#spatial-window-average",
    "title": "Hands-On Exercise 8: Spatial Weights and Applications",
    "section": "Spatial window average",
    "text": "Spatial window average\n\nwm_qs <- include.self(wm_q)\n\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\n\nwm_qs <- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\n\nlag_w_avg_gpdpc <- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\n\nlag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res <- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\n\nhunan <- left_join(hunan, lag_wm_qs.res)\n\n\nhunan %>%\n  select(\"County\", \"lag GDPPC\", \"lag_window_avg GDPPC\") %>%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\n\nw_avg_gdppc <- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-08/HOE6.html#spatial-window-sum",
    "href": "Hands-On-Exercises/chapter-08/HOE6.html#spatial-window-sum",
    "title": "Hands-On Exercise 8: Spatial Weights and Applications",
    "section": "Spatial window sum",
    "text": "Spatial window sum\n\nwm_qs <- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\n\nb_weights <- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\n\nb_weights2 <- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\n\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\n\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\n\n\nhunan <- left_join(hunan, w_sum_gdppc.res)\n\n\nhunan %>%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %>%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\n\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-09/HOE7.html",
    "href": "Hands-On-Exercises/chapter-09/HOE7.html",
    "title": "Hands-On Exercise 9 & 10: Global & Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-09/HOE7.html#geospatial",
    "href": "Hands-On-Exercises/chapter-09/HOE7.html#geospatial",
    "title": "Hands-On Exercise 9 & 10: Global & Local Measures of Spatial Autocorrelation",
    "section": "Geospatial",
    "text": "Geospatial\n\nhunan <- st_read(dsn = \"../chapter-08/data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\Jenpoer\\IS415-GAA\\Hands-On-Exercises\\chapter-08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-09/HOE7.html#aspatial",
    "href": "Hands-On-Exercises/chapter-09/HOE7.html#aspatial",
    "title": "Hands-On Exercise 9 & 10: Global & Local Measures of Spatial Autocorrelation",
    "section": "Aspatial",
    "text": "Aspatial\n\nhunan2012 <- read_csv(\"../chapter-08/data/aspatial/Hunan_2012.csv\")"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-09/HOE7.html#join-aspatial-data-with-geospatial",
    "href": "Hands-On-Exercises/chapter-09/HOE7.html#join-aspatial-data-with-geospatial",
    "title": "Hands-On Exercise 9 & 10: Global & Local Measures of Spatial Autocorrelation",
    "section": "Join aspatial data with geospatial",
    "text": "Join aspatial data with geospatial\n\nhunan <- left_join(hunan,hunan2012) %>%\n  select(1:4, 7, 15)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-09/HOE7.html#computing-contiguity-spatial-weights",
    "href": "Hands-On-Exercises/chapter-09/HOE7.html#computing-contiguity-spatial-weights",
    "title": "Hands-On Exercise 9 & 10: Global & Local Measures of Spatial Autocorrelation",
    "section": "Computing Contiguity Spatial Weights",
    "text": "Computing Contiguity Spatial Weights\nCreate Queen contiguity weight matrix (See Week 6 Hands-On Exercise for more details).\n\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-09/HOE7.html#row-standardised-weights-matrix",
    "href": "Hands-On-Exercises/chapter-09/HOE7.html#row-standardised-weights-matrix",
    "title": "Hands-On Exercise 9 & 10: Global & Local Measures of Spatial Autocorrelation",
    "section": "Row-standardised Weights Matrix",
    "text": "Row-standardised Weights Matrix\nUsing the “W” option, each neighboring polygon will be assigned equal weight (1 / #neighbors to each neighboring country, then summing the weighted income values). See Week 6 Hands-On Exercise for more details.\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-09/HOE7.html#morans-i",
    "href": "Hands-On-Exercises/chapter-09/HOE7.html#morans-i",
    "title": "Hands-On Exercise 9 & 10: Global & Local Measures of Spatial Autocorrelation",
    "section": "Moran’s I",
    "text": "Moran’s I\nUsing spdep’s moran.test()\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nPerform Monte Carlo simulation\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nVisualisation\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\nggplot(data=data.frame(bperm$res), mapping=aes(x=bperm.res)) +\n  geom_histogram(bins=20, fill=\"pink\", color=\"black\") +\n  labs(title=\"Histogram of Monte Carlo Moran I Test\",\n       x = \"Simulated Moran's I\",\n       y = \"Frequency\")"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-09/HOE7.html#gearys",
    "href": "Hands-On-Exercises/chapter-09/HOE7.html#gearys",
    "title": "Hands-On Exercise 9 & 10: Global & Local Measures of Spatial Autocorrelation",
    "section": "Geary’s",
    "text": "Geary’s\nUsing spdep’s geary.test()\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nPerforming Monte Carlo simulation\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nVisualisation\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\")"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-09/HOE7.html#morans-i-1",
    "href": "Hands-On-Exercises/chapter-09/HOE7.html#morans-i-1",
    "title": "Hands-On Exercise 9 & 10: Global & Local Measures of Spatial Autocorrelation",
    "section": "Moran’s I",
    "text": "Moran’s I\n\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-09/HOE7.html#gearys-1",
    "href": "Hands-On-Exercises/chapter-09/HOE7.html#gearys-1",
    "title": "Hands-On Exercise 9 & 10: Global & Local Measures of Spatial Autocorrelation",
    "section": "Geary’s",
    "text": "Geary’s\n\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-09/HOE7.html#morans-i-2",
    "href": "Hands-On-Exercises/chapter-09/HOE7.html#morans-i-2",
    "title": "Hands-On Exercise 9 & 10: Global & Local Measures of Spatial Autocorrelation",
    "section": "Moran’s I",
    "text": "Moran’s I\n\nfips <- order(hunan$County)\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\nVisualisation\n\nhunan.localMI <- cbind(hunan,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-09/HOE7.html#lisa-cluster-map",
    "href": "Hands-On-Exercises/chapter-09/HOE7.html#lisa-cluster-map",
    "title": "Hands-On Exercise 9 & 10: Global & Local Measures of Spatial Autocorrelation",
    "section": "LISA Cluster Map",
    "text": "LISA Cluster Map\n\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nMoran scatterplot with standardised variables\n\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% \n  as.vector \n\n\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\nPreparing LISA Cluster Map\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\n\nCenter spatially lagged variable of interest around the mean\n\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\nCenter local Moran’s around the mean\n\nLM_I <- localMI[,1] - mean(localMI[,1])    \n\nSet statistical significance level for the local Moran\n\nsignif <- 0.05       \n\nPlace the Moran into categories:\n\nLow-Low\nLow-High\nHigh-Low\nHigh-High\n\n\nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4\n\nPlace non-significant Moran in category 0\n\nquadrant[localMI[,5]>signif] <- 0\n\nPlot LISA map\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-09/HOE7.html#deriving-spatial-weight-matrix",
    "href": "Hands-On-Exercises/chapter-09/HOE7.html#deriving-spatial-weight-matrix",
    "title": "Hands-On Exercise 9 & 10: Global & Local Measures of Spatial Autocorrelation",
    "section": "Deriving spatial weight matrix",
    "text": "Deriving spatial weight matrix\nSee Week 6 Hands-On Exercise for details\n\nDeriving centroid\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\n\n\n\nDetermine cut-off distance\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\nCompute fixed distance weight matrix\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\nComputing adaptive distance weight matrix\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-09/HOE7.html#computing-gi-statistics",
    "href": "Hands-On-Exercises/chapter-09/HOE7.html#computing-gi-statistics",
    "title": "Hands-On Exercise 9 & 10: Global & Local Measures of Spatial Autocorrelation",
    "section": "Computing Gi Statistics",
    "text": "Computing Gi Statistics\n\nFixed distance\n\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nGreater values represent greater clustering, and the direction (positive or negative) indicates high or low clusters.\nJoin the Gi values to corresponding hunan sf data frame\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nVisualisation\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\nWe can see that there is a greater intensity of clustering around the northeast part of Hunan, indicating a hotspot.\n\n\nAdaptive distance\n\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-13/HOE8.html",
    "href": "Hands-On-Exercises/chapter-13/HOE8.html",
    "title": "Hands-On Exercise 13: Geographically Weighted Regression",
    "section": "",
    "text": "pacman::p_load(olsrr, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)\n\n# library(olsrr)\n# library(ggpubr)\n# library(sf)\n# library(spdep)\n# library(GWmodel)\n# library(tmap)\n# library(tidyverse)\n# library(gtsummary)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-13/HOE8.html#geospatial",
    "href": "Hands-On-Exercises/chapter-13/HOE8.html#geospatial",
    "title": "Hands-On Exercise 13: Geographically Weighted Regression",
    "section": "Geospatial",
    "text": "Geospatial\n\nmpsz_svy21 = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\") %>% st_transform(3414)\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Jenpoer\\IS415-GAA\\Hands-On-Exercises\\chapter-13\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nst_bbox(mpsz_svy21) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-13/HOE8.html#aspatial",
    "href": "Hands-On-Exercises/chapter-13/HOE8.html#aspatial",
    "title": "Hands-On Exercise 13: Geographically Weighted Regression",
    "section": "Aspatial",
    "text": "Aspatial\n\ncondo_resale <- readr::read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n# \n# saveRDS(condo_resale, file=\"data/rds/condo_resale.rds\")\n\n\n# condo_resale <- readRDS(\"data/rds/condo_resale.rds\")\n\n\ndplyr::glimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             <dbl> 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            <dbl> 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             <dbl> 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-13/HOE8.html#convert-aspatial-to-sf",
    "href": "Hands-On-Exercises/chapter-13/HOE8.html#convert-aspatial-to-sf",
    "title": "Hands-On Exercise 13: Geographically Weighted Regression",
    "section": "Convert aspatial to sf",
    "text": "Convert aspatial to sf\n\ncondo_resale.sf <- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLI…¹ AREA_…²   AGE PROX_…³ PROX_…⁴ PROX_…⁵ PROX_…⁶ PROX_…⁷ PROX_…⁸\n     <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1   118635 3000000     309    30    7.94   0.166   2.52     6.62   1.77   0.0584\n2   288420 3880000     290    32    6.61   0.280   1.93     7.51   0.545  0.616 \n3   267833 3325000     248    33    6.90   0.429   0.502    6.46   0.378  0.141 \n4   258380 4250000     127     7    4.04   0.395   1.99     4.91   1.68   0.382 \n5   467169 1400000     145    28   11.8    0.119   1.12     6.41   0.565  0.461 \n6   466472 1320000     139    22   10.3    0.125   0.789    5.09   0.781  0.0994\n# … with 12 more variables: PROX_MRT <dbl>, PROX_PARK <dbl>,\n#   PROX_PRIMARY_SCH <dbl>, PROX_TOP_PRIMARY_SCH <dbl>,\n#   PROX_SHOPPING_MALL <dbl>, PROX_SUPERMARKET <dbl>, PROX_BUS_STOP <dbl>,\n#   NO_Of_UNITS <dbl>, FAMILY_FRIENDLY <dbl>, FREEHOLD <dbl>,\n#   LEASEHOLD_99YR <dbl>, geometry <POINT [m]>, and abbreviated variable names\n#   ¹​SELLING_PRICE, ²​AREA_SQM, ³​PROX_CBD, ⁴​PROX_CHILDCARE, ⁵​PROX_ELDERLYCARE,\n#   ⁶​PROX_URA_GROWTH_AREA, ⁷​PROX_HAWKER_MARKET, ⁸​PROX_KINDERGARTEN"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-13/HOE8.html#simple-linear-regression",
    "href": "Hands-On-Exercises/chapter-13/HOE8.html#simple-linear-regression",
    "title": "Hands-On Exercise 13: Geographically Weighted Regression",
    "section": "Simple Linear Regression",
    "text": "Simple Linear Regression\n\ncondo.slr <- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: < 2.2e-16\n\n\n\nggplot(data=condo_resale.sf,\n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-13/HOE8.html#multiple-linear-regression",
    "href": "Hands-On-Exercises/chapter-13/HOE8.html#multiple-linear-regression",
    "title": "Hands-On Exercise 13: Geographically Weighted Regression",
    "section": "Multiple Linear Regression",
    "text": "Multiple Linear Regression\n\ncorrplot::corrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\n\ncondo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    +\n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN +\n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH +\n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET +\n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  < 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  < 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  < 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  < 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: < 2.2e-16\n\n\nRemove variables that are not statistically significant\n\ncondo.mlr1 <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE +\n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK +\n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP +\n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.591 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\ntbl_regression(condo.mlr1,\n               intercept = TRUE) %>%\n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared,\n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = <0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nCheck for multicolinearity\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nTest for non-linearity\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\nTest for normality assumption\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\n\nols_test_normality(condo.mlr1)\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nTesting for spatial autocorrelation\n\nmlr.output <- as.data.frame(condo.mlr1$residuals)\n\n\ncondo_resale.res.sf <- cbind(condo_resale.sf,\n                        condo.mlr1$residuals) %>%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\n\ncondo_resale.sp <- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\n\ntmap_mode(\"view\")\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +\n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\n\nnb <- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\n\nnb_lw <- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05"
  },
  {
    "objectID": "Hands-On-Exercises/chapter-13/HOE8.html#geographically-weighted-regression",
    "href": "Hands-On-Exercises/chapter-13/HOE8.html#geographically-weighted-regression",
    "title": "Hands-On Exercise 13: Geographically Weighted Regression",
    "section": "Geographically Weighted Regression",
    "text": "Geographically Weighted Regression\n\nFixed Bandwidth\n\nbw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA +\n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH +\n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS +\n                     FAMILY_FRIENDLY + FREEHOLD,\n                   data=condo_resale.sp,\n                   approach=\"CV\",\n                   kernel=\"gaussian\",\n                   adaptive=FALSE,\n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.378294e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3403 CV score: 4.721292e+14 \nFixed bandwidth: 971.3406 CV score: 4.721292e+14 \nFixed bandwidth: 971.3404 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \n\n\n\ngwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA                           + PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH +                                      PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS +\n                         FAMILY_FRIENDLY + FREEHOLD,\n                       data=condo_resale.sp,\n                       bw=bw.fixed,\n                       kernel = 'gaussian',\n                       longlat = FALSE)\n\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-03-24 14:07:57 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.53407e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2023-03-24 14:07:58 \n\n\n\n\nAdaptive Bandwidth\n\nbw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  +\n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    +\n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK +\n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP +\n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                      data=condo_resale.sp,\n                      approach=\"CV\",\n                      kernel=\"gaussian\",\n                      adaptive=TRUE,\n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\n\ngwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE +\n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK +\n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                          data=condo_resale.sp, bw=bw.adaptive,\n                          kernel = 'gaussian',\n                          adaptive=TRUE,\n                          longlat = FALSE)\n\n\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-03-24 14:08:06 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  < 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  < 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  < 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  < 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2023-03-24 14:08:08 \n\n\n\n\nVisualising GWR Output\nThe output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and expalnatory variable coefficients and standard errors.\nThey are all stored in a SpatialPointsDataFrame / SpatialPolygonsDataFrame integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list.\nConvert SDF to sf data frame\n\ncondo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21\n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.94        0   -0.72065800   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                <dbl> 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       <dbl> 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 <dbl> -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               <dbl> 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              <dbl> 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   <dbl> -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              <dbl> -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        <dbl> 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      <dbl> -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  <dbl> -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              <dbl> -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             <dbl> -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      <dbl> 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    <dbl> 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         <dbl> 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           <dbl> 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       <dbl> -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              <dbl> 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    <dbl> 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                <dbl> 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           <dbl> 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            <dbl> 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             <dbl> 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  <dbl> 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             <dbl> 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       <dbl> 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     <dbl> 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE <dbl> 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             <dbl> 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            <dbl> 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     <dbl> 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   <dbl> 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        <dbl> 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          <dbl> 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      <dbl> 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             <dbl> 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            <dbl> 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             <dbl> 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  <dbl> -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             <dbl> -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       <dbl> 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     <dbl> -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV <dbl> -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             <dbl> -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            <dbl> -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     <dbl> 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   <dbl> 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        <dbl> 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          <dbl> 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      <dbl> -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             <dbl> 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                <dbl> 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               <dbl> 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               <dbl> 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                <POINT [m]> POINT (22085.12 29951.54), POINT (25656.…\n\n\n\nsummary(gwr.adaptive$SDF$yhat)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  171347  1102001  1385528  1751842  1982307 13887901 \n\n\nVisualising local R2\n\ntmap_mode(\"view\")\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +\n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\nVisualising coefficient estimates\n\nAREA_SQM_SE <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +\n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +\n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV,\n             asp=1, ncol=2,\n             sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nBy URA Planning Region\n\ntmap_mode(\"plot\")\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) +\n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)"
  },
  {
    "objectID": "In-Class-Exercises/chapter-02/ICE2.html",
    "href": "In-Class-Exercises/chapter-02/ICE2.html",
    "title": "In-Class Exercise 2: Thematic and Analytical Mapping",
    "section": "",
    "text": "pacman::p_load(sf, tidyverse, funModeling)\n\n\n\n\nNigeria Level-2 Administrative Boundaries from Humanitarian Data Exchange or GeoBoundaries\n\ngeoNGA <- st_read(dsn = \"data/geospatial/geoNGA\", \n                layer = \"geoBoundaries-NGA-ADM2\") %>%\n                st_transform(crs = 26392)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `C:\\Jenpoer\\IS415-GAA\\In-Class-Exercises\\chapter-02\\data\\geospatial\\geoNGA' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\nnga <- st_read(dsn = \"data/geospatial/NGA\", \n               layer = \"nga_admbnda_adm2_osgof_20190417\") %>%\n                st_transform(crs = 26392)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\Jenpoer\\IS415-GAA\\In-Class-Exercises\\chapter-02\\data\\geospatial\\NGA' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\nwp_nga <- read_csv(\"data/aspatial/WPDX.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\")"
  },
  {
    "objectID": "In-Class-Exercises/chapter-02/ICE2.html#converting-aspatial-data-into-geospatial",
    "href": "In-Class-Exercises/chapter-02/ICE2.html#converting-aspatial-data-into-geospatial",
    "title": "In-Class Exercise 2: Thematic and Analytical Mapping",
    "section": "Converting Aspatial Data into Geospatial",
    "text": "Converting Aspatial Data into Geospatial\nConvert wkt field into sfc field (i.e. simple feature object) by using st_as_sfc() - to give structure.\n\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\nglimpse(wp_nga)\n\nRows: 95,008\nColumns: 71\n$ row_id                        <dbl> 429068, 222071, 160612, 160669, 160642, …\n$ `#source`                     <chr> \"GRID3\", \"Federal Ministry of Water Reso…\n$ `#lat_deg`                    <dbl> 7.980000, 6.964532, 6.486940, 6.727570, …\n$ `#lon_deg`                    <dbl> 5.120000, 3.597668, 7.929720, 7.648670, …\n$ `#report_date`                <chr> \"08/29/2018 12:00:00 AM\", \"08/16/2015 12…\n$ `#status_id`                  <chr> \"Unknown\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"…\n$ `#water_source_clean`         <chr> NA, \"Borehole\", \"Borehole\", \"Borehole\", …\n$ `#water_source_category`      <chr> NA, \"Well\", \"Well\", \"Well\", \"Well\", \"Wel…\n$ `#water_tech_clean`           <chr> \"Tapstand\", \"Mechanized Pump\", \"Hand Pum…\n$ `#water_tech_category`        <chr> \"Tapstand\", \"Mechanized Pump\", \"Hand Pum…\n$ `#facility_type`              <chr> \"Improved\", \"Improved\", \"Improved\", \"Imp…\n$ `#clean_country_name`         <chr> \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeri…\n$ `#clean_adm1`                 <chr> \"Ekiti\", \"Ogun\", \"Ebonyi\", \"Enugu\", \"Enu…\n$ `#clean_adm2`                 <chr> \"Moba\", \"Obafemi-Owode\", \"Ohaukwu\", \"Isi…\n$ `#clean_adm3`                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#clean_adm4`                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#install_year`               <dbl> NA, NA, NA, NA, NA, NA, NA, 2016, 2016, …\n$ `#installer`                  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#rehab_year`                 <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#rehabilitator`              <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#management_clean`           <chr> NA, \"Other\", NA, NA, NA, NA, NA, NA, NA,…\n$ `#status_clean`               <chr> NA, \"Functional\", NA, NA, NA, NA, NA, NA…\n$ `#pay`                        <chr> NA, \"No\", NA, NA, NA, NA, NA, NA, NA, NA…\n$ `#fecal_coliform_presence`    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#fecal_coliform_value`       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#subjective_quality`         <chr> NA, \"Acceptable quality\", NA, NA, NA, NA…\n$ `#activity_id`                <chr> \"1a117ba2-5256-4801-874c-f7611a4499dd\", …\n$ `#scheme_id`                  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#wpdx_id`                    <chr> \"6FV7X4JC+222\", \"6FR5XH7X+R37\", \"6FR9FWP…\n$ `#notes`                      <chr> \"Tap Water\", \"Ajura\", NA, NA, NA, NA, NA…\n$ `#orig_lnk`                   <chr> \"https://nigeria.africageoportal.com/dat…\n$ `#photo_lnk`                  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#country_id`                 <chr> \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\"…\n$ `#data_lnk`                   <chr> \"https://catalog.waterpointdata.org/data…\n$ `#distance_to_primary_road`   <dbl> 767.3742, 13364.9005, 9492.7619, 9319.08…\n$ `#distance_to_secondary_road` <dbl> 921.79187, 48.87743, 4333.34280, 23276.3…\n$ `#distance_to_tertiary_road`  <dbl> 3146.733237, 4167.519068, 693.211204, 30…\n$ `#distance_to_city`           <dbl> 41049.944, 13898.649, 27381.922, 34823.6…\n$ `#distance_to_town`           <dbl> 959.365, 9405.783, 72060.118, 31665.447,…\n$ water_point_history           <chr> \"{\\\"2018-08-29\\\": {\\\"source\\\": \\\"GRID3\\\"…\n$ rehab_priority                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ water_point_population        <dbl> NA, 140, 0, 492, 868, 81, 0, 9969, 933, …\n$ local_population_1km          <dbl> NA, 887, 0, 492, 1919, 81, 0, 13740, 933…\n$ crucialness_score             <dbl> NA, 0.1578354, NA, 1.0000000, 0.4523189,…\n$ pressure_score                <dbl> NA, 0.1400000, NA, 1.6400000, 2.8933333,…\n$ usage_capacity                <dbl> 250, 1000, 300, 300, 300, 300, 300, 1000…\n$ is_urban                      <lgl> TRUE, FALSE, FALSE, FALSE, FALSE, FALSE,…\n$ days_since_report             <dbl> 1483, 2592, 655, 655, 655, 655, 655, 217…\n$ staleness_score               <dbl> 62.65911, 44.17405, 81.34550, 81.34550, …\n$ latest_record                 <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE…\n$ location_id                   <dbl> 358773, 264633, 397972, 397984, 397982, …\n$ cluster_size                  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ `#clean_country_id`           <chr> \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\"…\n$ `#country_name`               <chr> \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeri…\n$ `#water_source`               <chr> \"Tap\", \"Improved Tube well or borehole\",…\n$ `#water_tech`                 <chr> NA, \"Motorised\", NA, NA, NA, NA, NA, \"Su…\n$ `#status`                     <chr> NA, \"Functional (and in use)\", NA, NA, N…\n$ `#adm2`                       <chr> NA, \"Obafemi-Owode\", NA, NA, NA, NA, NA,…\n$ `#adm3`                       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#management`                 <chr> NA, \"Other\", NA, NA, NA, NA, NA, NA, NA,…\n$ `#adm1`                       <chr> NA, \"Ogun\", \"Enugu\", \"Enugu\", \"Enugu\", \"…\n$ `New Georeferenced Column`    <chr> \"POINT (5.12 7.98)\", \"POINT (3.5976683 6…\n$ lat_deg_original              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ lat_lon_deg                   <chr> \"(7.98°, 5.12°)\", \"(6.9645317°, 3.597668…\n$ lon_deg_original              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ public_data_source            <chr> \"https://catalog.waterpointdata.org/data…\n$ converted                     <chr> NA, \"#status_id, #water_source, #pay, #s…\n$ count                         <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ created_timestamp             <chr> \"12/06/2021 09:12:57 PM\", \"06/30/2020 12…\n$ updated_timestamp             <chr> \"12/06/2021 09:12:57 PM\", \"06/30/2020 12…\n$ Geometry                      <POINT> POINT (5.12 7.98), POINT (3.597668 6.9…\n\n\nWe need to use 4326 because we want to put back the projection information first, as it is from aspatial data.\n\nwp_sf <- st_sf(wp_nga, crs=4326)\nwp_sf\n\nSimple feature collection with 95008 features and 70 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2.707441 ymin: 4.301812 xmax: 14.21828 ymax: 13.86568\nGeodetic CRS:  WGS 84\n# A tibble: 95,008 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3             7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2 222071 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n 3 160612 WaterAid          6.49    7.93 12/04/… Yes     Boreho… Well    Hand P…\n 4 160669 WaterAid          6.73    7.65 12/04/… Yes     Boreho… Well    <NA>   \n 5 160642 WaterAid          6.78    7.66 12/04/… Yes     Boreho… Well    Hand P…\n 6 160628 WaterAid          6.96    7.78 12/04/… Yes     Boreho… Well    Hand P…\n 7 160632 WaterAid          7.02    7.84 12/04/… Yes     Boreho… Well    Hand P…\n 8 642747 Living Water …    7.33    8.98 10/03/… Yes     Boreho… Well    Mechan…\n 9 642456 Living Water …    7.17    9.11 10/03/… Yes     Boreho… Well    Hand P…\n10 641347 Living Water …    7.20    9.22 03/28/… Yes     Boreho… Well    Hand P…\n# … with 94,998 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …"
  },
  {
    "objectID": "In-Class-Exercises/chapter-02/ICE2.html#projection-transformation",
    "href": "In-Class-Exercises/chapter-02/ICE2.html#projection-transformation",
    "title": "In-Class Exercise 2: Thematic and Analytical Mapping",
    "section": "Projection transformation",
    "text": "Projection transformation\nTransform from WGS84 to Nigeria’s projected coordinate system.\n\nwp_sf <- wp_sf %>%\n  st_transform(crs = 26392)"
  },
  {
    "objectID": "In-Class-Exercises/chapter-02/ICE2.html#geospatial-data-cleaning",
    "href": "In-Class-Exercises/chapter-02/ICE2.html#geospatial-data-cleaning",
    "title": "In-Class Exercise 2: Thematic and Analytical Mapping",
    "section": "Geospatial Data Cleaning",
    "text": "Geospatial Data Cleaning\n\nSelect necessary columns only\n\nnga <- nga %>% select(c(3:4, 8:9))\n\n\n\nCheck for duplicate names\n\nduplicated_LGA <- nga$ADM2_EN[duplicated(nga$ADM2_EN)==TRUE]\nduplicated_LGA\n\n[1] \"Bassa\"    \"Ifelodun\" \"Irepodun\" \"Nasarawa\" \"Obi\"      \"Surulere\"\n\n\nThere are 6 LGAs with the same name, but in different states.\nSo, we plan to concatenate the state name to the duplicated names. First, we try to get the indices.\n\nduplicated_indices <- which(nga$ADM2_EN %in% duplicated_LGA)\nduplicated_indices\n\n [1]  94  95 304 305 355 356 519 520 546 547 693 694\n\n\nThen, we concatenate the state name to the duplicated names.\n\nfor (ind in duplicated_indices) {\n  nga$ADM2_EN[ind] <- paste(nga$ADM2_EN[ind], nga$ADM1_EN[ind], sep=\", \")\n}\n\nReplace unknown values and rename columns\n\nwp_sf <- wp_sf %>%\n  rename(status_clean = '#status_clean') %>%\n  select(status_clean) %>%\n  mutate(status_clean = replace_na(\n    status_clean, \"unknown\"\n  ))"
  },
  {
    "objectID": "In-Class-Exercises/chapter-02/ICE2.html#calculate-proportion-of-functional-and-non-functional-water-points-at-lga-level",
    "href": "In-Class-Exercises/chapter-02/ICE2.html#calculate-proportion-of-functional-and-non-functional-water-points-at-lga-level",
    "title": "In-Class Exercise 2: Thematic and Analytical Mapping",
    "section": "Calculate proportion of Functional and Non-Functional Water Points at LGA Level",
    "text": "Calculate proportion of Functional and Non-Functional Water Points at LGA Level\nCheck the column that contains if water point is functional or not. By using unique(), we can extract the unique values of each column.\n\nunique(wp_sf$`status_clean`)\n\n[1] \"unknown\"                          \"Functional\"                      \n[3] \"Abandoned/Decommissioned\"         \"Non-Functional\"                  \n[5] \"Functional but not in use\"        \"Functional but needs repair\"     \n[7] \"Abandoned\"                        \"Non functional due to dry season\"\n[9] \"Non-Functional due to dry season\"\n\n\nGet the number of functional water points per LGA\n\nfunctional <- wp_sf %>% filter(`status_clean` %in% \n                                 c(\"Functional\", \n                                   \"Functional but not in use\",\n                                   \"Functional but needs repair\")) \nWP_Functional <- lengths(st_intersects(nga, functional))\n\nGet the number of non-functional water points per LGA\n\nnon_functional <- wp_sf %>% filter(`status_clean` %in% \n                                     c(\"Abandoned/Decommissioned\",\n                                       \"Non-Functional due to dry season\",\n                                       \"Non-Functional\",\n                                       \"Abandoned\",\n                                       \"Non functional due to dry season\"))\nWP_Non_Functional <- lengths(st_intersects(nga, non_functional))\n\nGet the unknown water points\n\nunknown <- wp_sf %>% filter(`status_clean` %in% \n                                     c(\"unknown\"))\nWP_Unknown <- lengths(st_intersects(nga, unknown))\n\nGet the total number of water points per LGA\n\nWP_Total <- lengths(st_intersects(nga, wp_sf))\n\n\nCombining aspatial and spatial data into simple feature tibble\nCreate a copy of the nga data frame with WP_Functional, WP_Non_Functional, WP_Unknown, and WP_Total\n\nnga_combined <- nga %>%\n  mutate(WP_Functional) %>%\n  mutate(WP_Non_Functional) %>%\n  mutate(WP_Unknown) %>%\n  mutate(WP_Total)\n\nSave as RDS\n\nsaveRDS(nga_combined, file = \"data/rds/NGA_wp.rds\")\n\nCreate columns:\n\nWP_Functional_Proportion: Proportion of functional water points (number of functional water points / total number of water points)\nWP_Non_Functional_Proportion: Proportion of non-functional water points (number of non-functional water points / total number of water points)\n\n\nnga_combined <- nga_combined %>%\n  mutate(`WP_Functional_Proportion` = `WP_Functional`/`WP_Total`,\n         `WP_Non_Functional_Proportion` = `WP_Non_Functional`/`WP_Total`)\n\nReplace NaN values (caused by 0 / 0) in the new columns with 0\n\nnga_combined$`WP_Functional_Proportion`[is.na(nga_combined$`WP_Functional_Proportion`)] = 0\n\nnga_combined$`WP_Non_Functional_Proportion`[is.na(nga_combined$`WP_Non_Functional_Proportion`)] = 0\n\nDisplay the first 5 rows of the new tibble\n\nhead(nga_combined, n=5)\n\nSimple feature collection with 5 features and 10 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 481088 ymin: 98142.39 xmax: 1248985 ymax: 1079710\nProjected CRS: Minna / Nigeria Mid Belt\n    ADM2_EN ADM2_PCODE                   ADM1_EN ADM1_PCODE\n1 Aba North   NG001001                      Abia      NG001\n2 Aba South   NG001002                      Abia      NG001\n3    Abadam   NG008001                     Borno      NG008\n4     Abaji   NG015001 Federal Capital Territory      NG015\n5      Abak   NG003001                 Akwa Ibom      NG003\n                        geometry WP_Functional WP_Non_Functional WP_Unknown\n1 MULTIPOLYGON (((548795.5 11...             7                 9          1\n2 MULTIPOLYGON (((547286.1 11...            29                35          7\n3 MULTIPOLYGON (((1248985 104...             0                 0          0\n4 MULTIPOLYGON (((510864.9 57...            23                34          0\n5 MULTIPOLYGON (((594269 1209...            23                25          0\n  WP_Total WP_Functional_Proportion WP_Non_Functional_Proportion\n1       17                0.4117647                    0.5294118\n2       71                0.4084507                    0.4929577\n3        0                0.0000000                    0.0000000\n4       57                0.4035088                    0.5964912\n5       48                0.4791667                    0.5208333"
  },
  {
    "objectID": "In-Class-Exercises/chapter-02/ICE2.html#visualise-distribution-of-water-points-with-analytical-plot",
    "href": "In-Class-Exercises/chapter-02/ICE2.html#visualise-distribution-of-water-points-with-analytical-plot",
    "title": "In-Class Exercise 2: Thematic and Analytical Mapping",
    "section": "Visualise distribution of water points with analytical plot",
    "text": "Visualise distribution of water points with analytical plot\nPlot the frequency table by status_clean\n\nfreq(wp_sf, input = \"status_clean\")\n\n\n\n\n                      status_clean frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                          unknown     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00\n\n\nPlot distribution of water points by LGA\n\nggplot(data=nga_combined, \n       aes(x=`WP_Total`))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(`WP_Total`, na.rm=T)),\n                 color=\"red\",\n                 linetype=\"dashed\",\n                 linewidth=0.8) +\n  ggtitle(\"Distribution of total water points by LGA\") +\n  xlab(\"No. of water points\") +\n  ylab(\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle = 0))\n\n\n\n\nFrom the histogram, we can see that most LGAs have around 100-200 water points.\nScatter plot between proportion of functional water points vs. number of total water points\n\nggplot(data=nga_combined, \n       aes(y = `WP_Total`, \n           x= as.numeric(`WP_Functional_Proportion`)))+\n  geom_point(color=\"violet\") +\n  labs(x = \"Proportion Functional\",\n       y = \"Total Water Points\")"
  },
  {
    "objectID": "In-Class-Exercises/chapter-03/ICE3.html",
    "href": "In-Class-Exercises/chapter-03/ICE3.html",
    "title": "In-Class Exercise 3: Thematic and Analytical Mapping",
    "section": "",
    "text": "pacman::p_load(sf, tidyverse, tmap)"
  },
  {
    "objectID": "In-Class-Exercises/chapter-03/ICE3.html#small-multiples",
    "href": "In-Class-Exercises/chapter-03/ICE3.html#small-multiples",
    "title": "In-Class Exercise 3: Thematic and Analytical Mapping",
    "section": "Small multiples",
    "text": "Small multiples\n\ntmap_arrange(p2, p1, nrow=1)"
  },
  {
    "objectID": "In-Class-Exercises/chapter-03/ICE3.html#plotting-map-of-rate",
    "href": "In-Class-Exercises/chapter-03/ICE3.html#plotting-map-of-rate",
    "title": "In-Class Exercise 3: Thematic and Analytical Mapping",
    "section": "Plotting map of rate",
    "text": "Plotting map of rate\n\np3 <- tm_shape(NGA_wp) +\n  tm_fill(\"WP_Functional_Proportion\",\n          n = 10, # 10 classes\n          title = \"Functional WP Proportion\",\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate Map of Functional Water Points\",\n            legend.outside = TRUE)\np3"
  },
  {
    "objectID": "In-Class-Exercises/chapter-03/ICE3.html#data-preparations",
    "href": "In-Class-Exercises/chapter-03/ICE3.html#data-preparations",
    "title": "In-Class Exercise 3: Thematic and Analytical Mapping",
    "section": "Data Preparations",
    "text": "Data Preparations\nDrop NA values\n\nNGA_wp <- NGA_wp %>% drop_na()\n\nCreate customised classification and extract values\n\npercent <- c(0, .01, .1, .5, .9, .99)\nvar <- NGA_wp[\"WP_Functional_Proportion\"] %>%\n  st_set_geometry(NULL) # need to drop the geometric field\nquantile(var[,1], percent)\n\n       0%        1%       10%       50%       90%       99% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000"
  },
  {
    "objectID": "In-Class-Exercises/chapter-03/ICE3.html#utility-functions",
    "href": "In-Class-Exercises/chapter-03/ICE3.html#utility-functions",
    "title": "In-Class Exercise 3: Thematic and Analytical Mapping",
    "section": "Utility Functions",
    "text": "Utility Functions\nCreate get.var function to generalise the customised classification steps\n\nArguments:\n\nvname: variable name that you want to plot (as character, in quotes)\ndf: name of sf data frame\n\nReturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var <- function(vname, df) {\n  v <- df[vname] %>%\n    st_set_geometry(NULL)\n  v <- unname(v[,1])\n  return(v)\n}\n\nCreate percentmap function to plot the percentile map\n\npercentmap <- function(vname, df, legtitle=NA, mtitle=\"Percentile Map\") {\n  percent <- c(0, .01, .1, .5, .9, .99)\n  var <- get.var(vname, df)\n  bperc <- quantile(var, percent)\n  tm_shape(df) +\n    tm_polygons() +\n    tm_shape(df) +\n    tm_fill(vname,\n            title=legtitle,\n            breaks=bperc,\n            palette=\"Blues\",\n            labels=c(\"< 1%\", \"1-10%\", \"10-50%\", \"50-90%\", \"90-99%\", \"> 99%\")) +\n    tm_borders() +\n    tm_layout(main.title = mtitle,\n              legend.outside = TRUE,\n              legend.position = c(\"right\", \"bottom\"),\n              title.position = c(\"right\", \"bottom\"))\n  \n}"
  },
  {
    "objectID": "In-Class-Exercises/chapter-03/ICE3.html#plot",
    "href": "In-Class-Exercises/chapter-03/ICE3.html#plot",
    "title": "In-Class Exercise 3: Thematic and Analytical Mapping",
    "section": "Plot",
    "text": "Plot\n\npercentmap(\"WP_Functional_Proportion\", NGA_wp, legtitle = \"Functional Proportion\")"
  },
  {
    "objectID": "In-Class-Exercises/chapter-04/ICE4.html",
    "href": "In-Class-Exercises/chapter-04/ICE4.html",
    "title": "In-Class Exercise 4: Spatial Points Patterns Analysis",
    "section": "",
    "text": "pacman::p_load(maptools, sf, raster, spatstat, tmap)"
  },
  {
    "objectID": "In-Class-Exercises/chapter-04/ICE4.html#spatial-data",
    "href": "In-Class-Exercises/chapter-04/ICE4.html#spatial-data",
    "title": "In-Class Exercise 4: Spatial Points Patterns Analysis",
    "section": "Spatial data",
    "text": "Spatial data\n\nchildcare_sf <- st_read(\"../../Hands-On-Exercises/chapter-04/data/geospatial/childcare.geojson\") %>%\n  st_transform(crs = 3414)\n\nReading layer `childcare' from data source \n  `C:\\Jenpoer\\IS415-GAA\\Hands-On-Exercises\\chapter-04\\data\\geospatial\\childcare.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf <- st_read(dsn = \"../../Hands-On-Exercises/chapter-04/data/geospatial/CostalOutline\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\Jenpoer\\IS415-GAA\\Hands-On-Exercises\\chapter-04\\data\\geospatial\\CostalOutline' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf <- st_read(dsn = \"../../Hands-On-Exercises/chapter-02/data/geospatial/master-plan-2014-subzone-boundary-web-shp\",\n                   layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Jenpoer\\IS415-GAA\\Hands-On-Exercises\\chapter-02\\data\\geospatial\\master-plan-2014-subzone-boundary-web-shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nSpatial*\n\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n\nsp object: Only retains the geometry\n\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n\nppp format\n\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\n\n\n\nCreate owin object\n\nsg_owin <- as(sg_sp, \"owin\")\n\nCombine with owin\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "In-Class-Exercises/chapter-05/data/stores.html",
    "href": "In-Class-Exercises/chapter-05/data/stores.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     \n\n\n        0 0     false"
  },
  {
    "objectID": "In-Class-Exercises/chapter-05/data/study_area.html",
    "href": "In-Class-Exercises/chapter-05/data/study_area.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-Class-Exercises/chapter-05/ICE5.html",
    "href": "In-Class-Exercises/chapter-05/ICE5.html",
    "title": "In-Class Exercise 5: Local Co-location Quotient",
    "section": "",
    "text": "Import Packages\n\npacman::p_load(sf, tidyverse, tmap, sfdep)\n\n\n\nImport Dataset\nTaiwan has two projection systems: one is Taiwan’s local version and one is related to China’s projection system.\n\nstudy_area <- st_read(dsn = \"data\", layer = \"study_area\") %>%\n  st_transform(crs = 3829)\n\nReading layer `study_area' from data source \n  `C:\\Jenpoer\\IS415-GAA\\In-Class-Exercises\\chapter-05\\data' using driver `ESRI Shapefile'\nSimple feature collection with 7 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 121.4836 ymin: 25.00776 xmax: 121.592 ymax: 25.09288\nGeodetic CRS:  TWD97\n\n\n\nstores <- st_read(dsn = \"data\", layer = \"stores\") %>%\n  st_transform(crs = 3829)\n\nReading layer `stores' from data source \n  `C:\\Jenpoer\\IS415-GAA\\In-Class-Exercises\\chapter-05\\data' using driver `ESRI Shapefile'\nSimple feature collection with 1409 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 121.4902 ymin: 25.01257 xmax: 121.5874 ymax: 25.08557\nGeodetic CRS:  TWD97\n\n\n\n\nVisualise the layers\n\ntmap_mode(\"view\")\ntm_shape(study_area) +\n  tm_polygons() +\n  tm_shape(stores) +\n  tm_dots(col=\"Name\",\n          size = 0.01,\n          border.col = \"black\",\n          border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(12, 16))\n\n\n\n\n\n\n\n\nLocal Colocation Quotients (LCLQ)\nFind 6 nearest neighbors + 1 (itself) - so that you can have an uneven split\n\nnb <- include_self(st_knn(st_geometry(stores), 6))\n\nCalculate weight matrix\n\nwt <- st_kernel_weights(nb, stores, \"gaussian\", adaptive=TRUE)\n\nExtract categories\n\nfamily_mart <- stores %>% filter(Name == \"Family Mart\")\nA <- family_mart$Name\n\n\nseven_eleven <- stores %>% filter(Name == \"7-Eleven\")\nB <- seven_eleven$Name\n\nDerive local co-location quotient\n\nA: Target\nB: Neighbour that we want to find out is co-located or not\n\n49 is the number of simulations. It will come up with the p-value immediately.\n\nLCLQ <- local_colocation(A, B, nb, wt, 49)\n\nCombine the stores and the LCLQ table\n\nLCLQ_stores <- cbind(stores, LCLQ)\n\nVisualise which data points have signs of co-location\n\ntmap_mode(\"view\")\ntm_shape(study_area) +\n  tm_polygons() +\n  tm_shape(LCLQ_stores) +\n  tm_dots(col=\"X7.Eleven\",\n          size = 0.01,\n          border.col = \"black\",\n          border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(12, 16))"
  },
  {
    "objectID": "In-Class-Exercises/chapter-06/ICE6.html",
    "href": "In-Class-Exercises/chapter-06/ICE6.html",
    "title": "In-Class Exercise 6: Spatial Weights and Applications",
    "section": "",
    "text": "pacman::p_load(sf, sfdep, tmap, tidyverse)"
  },
  {
    "objectID": "In-Class-Exercises/chapter-06/ICE6.html#geospatial",
    "href": "In-Class-Exercises/chapter-06/ICE6.html#geospatial",
    "title": "In-Class Exercise 6: Spatial Weights and Applications",
    "section": "Geospatial",
    "text": "Geospatial\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\Jenpoer\\IS415-GAA\\In-Class-Exercises\\chapter-06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-Class-Exercises/chapter-06/ICE6.html#aspatial",
    "href": "In-Class-Exercises/chapter-06/ICE6.html#aspatial",
    "title": "In-Class Exercise 6: Spatial Weights and Applications",
    "section": "Aspatial",
    "text": "Aspatial\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")"
  },
  {
    "objectID": "In-Class-Exercises/chapter-06/ICE6.html#combining-data-frame-with-left-join",
    "href": "In-Class-Exercises/chapter-06/ICE6.html#combining-data-frame-with-left-join",
    "title": "In-Class Exercise 6: Spatial Weights and Applications",
    "section": "Combining data frame with left join",
    "text": "Combining data frame with left join\n\n\n\n\n\n\nIf you want to retain geometry, the left one must be the geospatial data\n\n\n\n\n\n\n\nhunan_GDPPC <- left_join(hunan,hunan2012) %>%\n  select(1:4, 7, 15)\n\n\ntm_shape(hunan_GDPPC)+\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_layout(main.title = \"Distribution of GDP per capita by district, Hunan Province\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.outside = TRUE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = TRUE) +\n  tm_borders(alpha=0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)"
  },
  {
    "objectID": "In-Class-Exercises/chapter-07/ICE7.html",
    "href": "In-Class-Exercises/chapter-07/ICE7.html",
    "title": "In-Class Exercise 7: Global & Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "pacman::p_load(sf, sfdep, tmap, tidyverse, plotly)"
  },
  {
    "objectID": "In-Class-Exercises/chapter-07/ICE7.html#geospatial",
    "href": "In-Class-Exercises/chapter-07/ICE7.html#geospatial",
    "title": "In-Class Exercise 7: Global & Local Measures of Spatial Autocorrelation",
    "section": "Geospatial",
    "text": "Geospatial\n\nhunan <- st_read(dsn = \"../chapter-06/data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\Jenpoer\\IS415-GAA\\In-Class-Exercises\\chapter-06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-Class-Exercises/chapter-07/ICE7.html#aspatial",
    "href": "In-Class-Exercises/chapter-07/ICE7.html#aspatial",
    "title": "In-Class Exercise 7: Global & Local Measures of Spatial Autocorrelation",
    "section": "Aspatial",
    "text": "Aspatial\n\nhunan2012 <- read_csv(\"../chapter-06/data/aspatial/Hunan_2012.csv\")"
  },
  {
    "objectID": "In-Class-Exercises/chapter-07/ICE7.html#combining-data-frame-with-left-join",
    "href": "In-Class-Exercises/chapter-07/ICE7.html#combining-data-frame-with-left-join",
    "title": "In-Class Exercise 7: Global & Local Measures of Spatial Autocorrelation",
    "section": "Combining data frame with left join",
    "text": "Combining data frame with left join\n\nhunan_GDPPC <- left_join(hunan,hunan2012) %>%\n  select(1:4, 7, 15)\n\n\ntm_shape(hunan_GDPPC)+\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_layout(main.title = \"Distribution of GDP per capita by district, Hunan Province\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.outside = TRUE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = TRUE) +\n  tm_borders(alpha=0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)"
  },
  {
    "objectID": "In-Class-Exercises/chapter-12/data/geospatial/MPSZ-2019.html",
    "href": "In-Class-Exercises/chapter-12/data/geospatial/MPSZ-2019.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-Class-Exercises/chapter-12/ICE9.html",
    "href": "In-Class-Exercises/chapter-12/ICE9.html",
    "title": "In-Class Exercise 9: Geospatial Predictive Modelling",
    "section": "",
    "text": "pacman::p_load(sf, spdep, GWmodel, SpatialML, tidyverse, tmap, ggpubr, olsrr, devtools, rsample)"
  },
  {
    "objectID": "In-Class-Exercises/chapter-12/ICE9.html#aspatial",
    "href": "In-Class-Exercises/chapter-12/ICE9.html#aspatial",
    "title": "In-Class Exercise 9: Geospatial Predictive Modelling",
    "section": "Aspatial",
    "text": "Aspatial\n\nmdata <- read_rds(\"data/aspatial/mdata.rds\")"
  },
  {
    "objectID": "In-Class-Exercises/chapter-12/ICE9.html#train-test-split",
    "href": "In-Class-Exercises/chapter-12/ICE9.html#train-test-split",
    "title": "In-Class Exercise 9: Geospatial Predictive Modelling",
    "section": "Train-test Split",
    "text": "Train-test Split\n\nset.seed(1234)\n# resale_split <- initial_split(mdata,\n#                               prop=6.5/10)\n# train_data <- training(resale_split)\n# test_data <- testing(resale_split)\n\n\n# write_rds(train_data, \"data/model/train_data.rds\")\n# write_rds(test_data, \"data/model/test_data.rds\")\n\n\ntrain_data <- read_rds(\"data/model/train_data.rds\")\ntest_data <- read_rds(\"data/model/test_data.rds\")"
  },
  {
    "objectID": "In-Class-Exercises/chapter-12/ICE9.html#ordinary-least-squares-method",
    "href": "In-Class-Exercises/chapter-12/ICE9.html#ordinary-least-squares-method",
    "title": "In-Class Exercise 9: Geospatial Predictive Modelling",
    "section": "Ordinary Least Squares Method",
    "text": "Ordinary Least Squares Method\nWithout geospatial weights\n\n# price_mlr <- lm(resale_price ~ floor_area_sqm +\n#                   storey_order + remaining_lease_mths +\n#                   PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n#                   PROX_MRT + PROX_PARK + PROX_MALL +\n#                   PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n#                   WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n#                   WITHIN_1KM_PRISCH,\n#                 data=train_data)\n# summary(price_mlr)\n\n{# {r} # write_rds(price_mlr, \"data/model/price_mlr.rds\")\n\nprice_mlr <- read_rds(\"data/model/price_mlr.rds\")"
  },
  {
    "objectID": "In-Class-Exercises/chapter-12/ICE9.html#gwr-predictive-method-using-spatialml",
    "href": "In-Class-Exercises/chapter-12/ICE9.html#gwr-predictive-method-using-spatialml",
    "title": "In-Class Exercise 9: Geospatial Predictive Modelling",
    "section": "GWR Predictive Method using SpatialML",
    "text": "GWR Predictive Method using SpatialML\nTo deal with point data, we need to use sp’s spatial point data frame for the GWR to understand it.\n\ntrain_data_sp <- as_Spatial(train_data)\ntrain_data_sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 10335 \nextent      : 11597.31, 42623.63, 28217.39, 48741.06  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : resale_price, floor_area_sqm, storey_order, remaining_lease_mths,          PROX_CBD,     PROX_ELDERLYCARE,        PROX_HAWKER,           PROX_MRT,          PROX_PARK,   PROX_GOOD_PRISCH,        PROX_MALL,            PROX_CHAS,     PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, ... \nmin values  :       218000,             74,            1,                  555, 0.999393538715878, 1.98943787433087e-08, 0.0333358643817954, 0.0220407324774434, 0.0441643212802781, 0.0652540365486641,                0, 6.20621206270077e-09, 1.21715176356525e-07,                        0,                     0, ... \nmax values  :      1186888,            133,           17,                 1164,  19.6500691667807,     3.30163731686804,   2.86763031236184,   2.13060636038504,   2.41313695915468,   10.6223726149914, 2.27100643784442,    0.808332738794272,     1.57131703651196,                        7,                    20, ... \n\n\nRandom Forest\nExtract coordinate data as a vector table\n\ncoords <- st_coordinates(mdata)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n\n\nwrite_rds(coords_train, \"data/model/coords_train.rds\")\nwrite_rds(coords_test, \"data/model/coords_test.rds\")\n\nDrop geometry\n\ntrain_data <- st_drop_geometry(train_data)\n\nCalibrate random forest (without spatial weights)\n\nset.seed(1234)\nrf <- ranger(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL +\n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data=train_data)\n\n\nprint(rf)\n\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      10335 \nNumber of independent variables:  14 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       728602496 \nR squared (OOB):                  0.9495728 \n\n\nIt has a higher R2 value than the OLS.\nGWR Random Forest (Adaptive)\n\n\n\n\n\n\nSorry, not enough computer memory to run this :(\n\n\n\n\n\n\n\nset.seed(1234)\n# gwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm +\n#                   storey_order + remaining_lease_mths +\n#                   PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n#                   PROX_MRT + PROX_PARK + PROX_MALL +\n#                   PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n#                   WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n#                   WITHIN_1KM_PRISCH,\n#                   dframe=train_data,\n#                   bw=55, # defined as distance\n#                   kernel=\"adaptive\",\n#                   coords=coords_train)\n\n\n# write_rds(gwRF_adaptive, \"data/model/gwRF_adaptive.rds\")\n\n\n# gwRF_adaptive <- read_rds(\"data/model/gwRF_adaptive.rds\")\n\n\n# vi_df <- as.data.frame(gwRF_adaptive$Global.Model$variable.importance)"
  },
  {
    "objectID": "In-Class-Exercises/chapter-16/data/geospatial/ELDERCARE.html",
    "href": "In-Class-Exercises/chapter-16/data/geospatial/ELDERCARE.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>  ELDERCARE  ENG dataset\n\nELDERCARE\n\n                 0 0     false"
  },
  {
    "objectID": "In-Class-Exercises/chapter-16/data/geospatial/hexagons.html",
    "href": "In-Class-Exercises/chapter-16/data/geospatial/hexagons.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n                 0 0     false"
  },
  {
    "objectID": "In-Class-Exercises/chapter-16/ICE10.html",
    "href": "In-Class-Exercises/chapter-16/ICE10.html",
    "title": "In-Class Exercise 10: Modelling Geographical Accessibility",
    "section": "",
    "text": "pacman::p_load(tmap, SpatialAcc, sf, \n               ggstatsplot, reshape2,\n               tidyverse)"
  },
  {
    "objectID": "In-Class-Exercises/chapter-16/ICE10.html#geospatial",
    "href": "In-Class-Exercises/chapter-16/ICE10.html#geospatial",
    "title": "In-Class Exercise 10: Modelling Geographical Accessibility",
    "section": "Geospatial",
    "text": "Geospatial\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_NO_SEA_PL\")\n\nReading layer `MP14_SUBZONE_NO_SEA_PL' from data source \n  `C:\\Jenpoer\\IS415-GAA\\In-Class-Exercises\\chapter-16\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nhexagons <- st_read(dsn = \"data/geospatial\", layer = \"hexagons\") \n\nReading layer `hexagons' from data source \n  `C:\\Jenpoer\\IS415-GAA\\In-Class-Exercises\\chapter-16\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3125 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 21506.33 xmax: 50010.26 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\n\n\n\neldercare <- st_read(dsn = \"data/geospatial\", layer = \"ELDERCARE\")\n\nReading layer `ELDERCARE' from data source \n  `C:\\Jenpoer\\IS415-GAA\\In-Class-Exercises\\chapter-16\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 120 features and 19 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21 / Singapore TM"
  },
  {
    "objectID": "In-Class-Exercises/chapter-16/ICE10.html#aspatial",
    "href": "In-Class-Exercises/chapter-16/ICE10.html#aspatial",
    "title": "In-Class Exercise 10: Modelling Geographical Accessibility",
    "section": "Aspatial",
    "text": "Aspatial\n\nODMatrix <- read_csv(\"data/aspatial/OD_Matrix.csv\", skip = 0)"
  },
  {
    "objectID": "In-Class-Exercises/chapter-16/ICE10.html#update-crs",
    "href": "In-Class-Exercises/chapter-16/ICE10.html#update-crs",
    "title": "In-Class Exercise 10: Modelling Geographical Accessibility",
    "section": "Update CRS",
    "text": "Update CRS\n\nmpsz <- st_transform(mpsz, 3414)\neldercare <- st_transform(eldercare, 3414)\nhexagons <- st_transform(hexagons, 3414)"
  },
  {
    "objectID": "In-Class-Exercises/chapter-16/ICE10.html#select-relevant-columns",
    "href": "In-Class-Exercises/chapter-16/ICE10.html#select-relevant-columns",
    "title": "In-Class Exercise 10: Modelling Geographical Accessibility",
    "section": "Select relevant columns",
    "text": "Select relevant columns\nWe select only the relevant columns for the analysis. In addition, we create dummy columns for capacity (eldercare) and demand (hexagons). In reality, we actually have to look through the data (e.g. visit the eldercare websites) to know their actual demand.\n\neldercare <- eldercare %>%\n  select(fid, ADDRESSPOS) %>%\n  rename(destination_id = fid,\n         postal_code = ADDRESSPOS) %>%\n  mutate(capacity = 100) \n\n\nhexagons <- hexagons %>%\n  select(fid) %>%\n  rename(origin_id = fid) %>%\n  mutate(demand = 100)"
  },
  {
    "objectID": "In-Class-Exercises/chapter-16/ICE10.html#tidying-aspatial-data",
    "href": "In-Class-Exercises/chapter-16/ICE10.html#tidying-aspatial-data",
    "title": "In-Class Exercise 10: Modelling Geographical Accessibility",
    "section": "Tidying aspatial data",
    "text": "Tidying aspatial data\nWe have the ODMatrix from aspatial data. All we need to do is to convert it into a matrix format.\n\ndistmat <- ODMatrix %>%\n  select(origin_id, destination_id, total_cost) %>%\n  pivot_wider(names_from=\"destination_id\", values_from=\"total_cost\")%>%\n  select(c(-c('origin_id')))\n\nConvert into kilometres\n\ndistmat_km <- as.matrix(distmat/1000)\n\n\nWhat if you don’t have the OD matrix?\nWe can calculate a continuous distance matrix with Euclidean distance.\n1) Extract the coordinates\n\neldercare_coord <- st_coordinates(eldercare)\nhexagons_coord <- st_coordinates(hexagons)\n\n2) Calculate Euclidean matrix\n\nEucMatrix <- SpatialAcc::distance(hexagons_coord, \n                                  eldercare_coord, type=\"euclidean\")"
  },
  {
    "objectID": "In-Class-Exercises/chapter-16/ICE10.html#hansens-method",
    "href": "In-Class-Exercises/chapter-16/ICE10.html#hansens-method",
    "title": "In-Class Exercise 10: Modelling Geographical Accessibility",
    "section": "Hansen’s Method",
    "text": "Hansen’s Method\n\nacc_Hansen <- data.frame(ac(hexagons$demand,\n                            eldercare$capacity,\n                            distmat_km, \n                            #d0 = 50,\n                            power = 2, \n                            family = \"Hansen\"))\n\n\ncolnames(acc_Hansen) <- \"accHansen\"\n\nacc_Hansen <- as_tibble(acc_Hansen)\n\nhexagon_Hansen <- bind_cols(hexagons, acc_Hansen)\n\n\nhead(hexagon_Hansen)\n\nSimple feature collection with 6 features and 3 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 22756.33 xmax: 3244.888 ymax: 27756.33\nProjected CRS: SVY21 / Singapore TM\n  origin_id demand    accHansen                       geometry\n1         1    100 1.648313e-14 POLYGON ((2667.538 27506.33...\n2         2    100 1.096143e-16 POLYGON ((2667.538 25006.33...\n3         3    100 3.865857e-17 POLYGON ((2667.538 24506.33...\n4         4    100 1.482856e-17 POLYGON ((2667.538 24006.33...\n5         5    100 1.051348e-17 POLYGON ((2667.538 23506.33...\n6         6    100 5.076391e-18 POLYGON ((2667.538 23006.33...\n\n\nVisualisation\n\nmapex <- st_bbox(hexagons)\n\n\ntmap_mode(\"plot\")\ntm_shape(hexagon_Hansen,\n         bbox = mapex) + \n  tm_fill(col = \"accHansen\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: Hansen method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = F,\n            legend.height = 0.45, \n            legend.width = 0.5,\n            legend.format = list(digits = 6),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)\n\n\n\n\nBoxplot summarized by region:\n\nhexagon_Hansen <- st_join(hexagon_Hansen, mpsz, \n                          join = st_intersects)\n\n\nggplot(data=hexagon_Hansen, \n       aes(y = log(accHansen), \n           x= REGION_N)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\", \n             fun.y=\"mean\", \n             colour =\"red\", \n             size=2)"
  },
  {
    "objectID": "In-Class-Exercises/chapter-16/ICE10.html#kd2sfca-method",
    "href": "In-Class-Exercises/chapter-16/ICE10.html#kd2sfca-method",
    "title": "In-Class Exercise 10: Modelling Geographical Accessibility",
    "section": "KD2SFCA Method",
    "text": "KD2SFCA Method\n\nacc_KD2SFCA <- data.frame(ac(hexagons$demand,\n                            eldercare$capacity,\n                            distmat_km, \n                            d0 = 50,\n                            power = 2, \n                            family = \"KD2SFCA\"))\n\ncolnames(acc_KD2SFCA) <- \"accKD2SFCA\"\nacc_KD2SFCA <- as_tibble(acc_KD2SFCA)\nhexagon_KD2SFCA <- bind_cols(hexagons, acc_KD2SFCA)\n\nVisualisation\n\ntmap_mode(\"plot\")\ntm_shape(hexagon_KD2SFCA,\n         bbox = mapex) + \n  tm_fill(col = \"accKD2SFCA\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: KD2SFCA method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 6),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)\n\n\n\n\nBoxplot summarized by region:\n\nhexagon_KD2SFCA <- st_join(hexagon_KD2SFCA, mpsz, \n                          join = st_intersects)\n\n\nggplot(data=hexagon_KD2SFCA, \n       aes(y = accKD2SFCA, \n           x= REGION_N)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\", \n             fun.y=\"mean\", \n             colour =\"red\", \n             size=2)"
  },
  {
    "objectID": "In-Class-Exercises/chapter-16/ICE10.html#sam-accessibility",
    "href": "In-Class-Exercises/chapter-16/ICE10.html#sam-accessibility",
    "title": "In-Class Exercise 10: Modelling Geographical Accessibility",
    "section": "SAM Accessibility",
    "text": "SAM Accessibility\n\nacc_SAM <- data.frame(ac(hexagons$demand,\n                         eldercare$capacity,\n                         distmat_km, \n                         d0 = 50,\n                         power = 2, \n                         family = \"SAM\"))\n\ncolnames(acc_SAM) <- \"accSAM\"\nacc_SAM <- as_tibble(acc_SAM)\nhexagon_SAM <- bind_cols(hexagons, acc_SAM)\n\nVisualisation\n\ntmap_mode(\"plot\")\ntm_shape(hexagon_SAM,\n         bbox = mapex) + \n  tm_fill(col = \"accSAM\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: SAM method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 3),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)\n\n\n\n\nBox plot summarized by region:\n\nhexagon_SAM <- st_join(hexagon_SAM, mpsz, \n                       join = st_intersects)\n\n\nggplot(data=hexagon_SAM, \n       aes(y = accSAM, \n           x= REGION_N)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\", \n             fun.y=\"mean\", \n             colour =\"red\", \n             size=2)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "Jennifer Poernomo’s compilation of In Class Exercises, Hands On Exercises, and Take Home Exercises for 2023 IS415 Geospatial Analytics and Applications."
  },
  {
    "objectID": "Take-Home-Exercises/exe-01/THE1.html",
    "href": "Take-Home-Exercises/exe-01/THE1.html",
    "title": "Take Home Exercise 1: Spatial Point Patterns Analysis on Nigerian Water Points",
    "section": "",
    "text": "Water is an important resource to mankind. However, despite its abundance on the planet, there are many who do not have access to clean water. In fact, according to UN-Water (2021), 2.3 billion people live in water-stressed countries.\nThis project aims to use data collected by Water Point Data Exchange (WPdx) to examine water points in Osun State, Nigeria, in hopes of being able to make inferences regarding their accessibility. As such, we are primarily concerned about the functional status of the water points, their distribution across the state, and possible correlations between functional and non-functional water points."
  },
  {
    "objectID": "Take-Home-Exercises/exe-01/THE1.html#packages",
    "href": "Take-Home-Exercises/exe-01/THE1.html#packages",
    "title": "Take Home Exercise 1: Spatial Point Patterns Analysis on Nigerian Water Points",
    "section": "Packages",
    "text": "Packages\nThe R packages used in this project are:\n\nsf: for importing, managing, and processing geospatial data.\ntidyverse: a family of other R packages for performing data science tasks such as importing, wrangling, and visualising data.\ntmap: creating thematic maps\nmaptools: a set of tools for manipulating geographic data\nraster: reads, writes, manipulates, analyses, and model gridded spatial data (raster)\nspatstat: for performing spatial point patterns analysis\nsfdep: for analysing spatial dependencies\n\n\npacman::p_load(sf, tidyverse, tmap, maptools, raster, spatstat, sfdep)"
  },
  {
    "objectID": "Take-Home-Exercises/exe-01/THE1.html#aspatial-data",
    "href": "Take-Home-Exercises/exe-01/THE1.html#aspatial-data",
    "title": "Take Home Exercise 1: Spatial Point Patterns Analysis on Nigerian Water Points",
    "section": "Aspatial Data",
    "text": "Aspatial Data\nThe data we are going to use is from the WPdx Global Data Repositories, which is a collection of water point related data from rural areas. For this project, we are specifically looking at the WPdx+ data set, which is an enhanced version of the WPdx-Basic dataset.\nAs we are focused on the country of Nigeria, we will only be considering the data from Nigeria. We will also filter on the level-1 administrative boundary (state) of Osun.\n\nwp_nga <- read_csv(\"data/aspatial/WPDX.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\", `#clean_adm1` == \"Osun\")"
  },
  {
    "objectID": "Take-Home-Exercises/exe-01/THE1.html#geospatial-data",
    "href": "Take-Home-Exercises/exe-01/THE1.html#geospatial-data",
    "title": "Take Home Exercise 1: Spatial Point Patterns Analysis on Nigerian Water Points",
    "section": "Geospatial Data",
    "text": "Geospatial Data\nThis project will focus on the Osun State, Nigeria. We will get the state boundary GIS data of Nigeria from The Humanitarian Data Exchange portal.\n\nosun <- st_read(dsn = \"data/geospatial/NGA\", \n               layer = \"nga_admbnda_adm2_osgof_20190417\") %>%\n      filter(`ADM1_EN` == \"Osun\") %>%\n      st_transform(crs = 26392)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\Jenpoer\\IS415-GAA\\Take-Home-Exercises\\exe-01\\data\\geospatial\\NGA' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Take-Home-Exercises/exe-01/THE1.html#aspatial-data-1",
    "href": "Take-Home-Exercises/exe-01/THE1.html#aspatial-data-1",
    "title": "Take Home Exercise 1: Spatial Point Patterns Analysis on Nigerian Water Points",
    "section": "Aspatial Data",
    "text": "Aspatial Data\n\nConvert aspatial data to geospatial\nTo do some analysis on the data, we need to convert the aspatial data to geospatial data.\nWe need to convert wkt field into sfc field (i.e. simple feature object) by using st_as_sfc().\n\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\nglimpse(wp_nga)\n\nRows: 5,557\nColumns: 71\n$ row_id                        <dbl> 429123, 70566, 70578, 66401, 422190, 422…\n$ `#source`                     <chr> \"GRID3\", \"Federal Ministry of Water Reso…\n$ `#lat_deg`                    <dbl> 8.020000, 7.317741, 7.759448, 8.031187, …\n$ `#lon_deg`                    <dbl> 5.060000, 4.785507, 4.563998, 4.637400, …\n$ `#report_date`                <chr> \"08/29/2018 12:00:00 AM\", \"05/11/2015 12…\n$ `#status_id`                  <chr> \"Unknown\", \"No\", \"No\", \"No\", \"Unknown\", …\n$ `#water_source_clean`         <chr> NA, \"Protected Shallow Well\", \"Borehole\"…\n$ `#water_source_category`      <chr> NA, \"Well\", \"Well\", \"Well\", NA, NA, \"Wel…\n$ `#water_tech_clean`           <chr> \"Tapstand\", \"Mechanized Pump\", \"Mechaniz…\n$ `#water_tech_category`        <chr> \"Tapstand\", \"Mechanized Pump\", \"Mechaniz…\n$ `#facility_type`              <chr> \"Improved\", \"Improved\", \"Improved\", \"Imp…\n$ `#clean_country_name`         <chr> \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeri…\n$ `#clean_adm1`                 <chr> \"Osun\", \"Osun\", \"Osun\", \"Osun\", \"Osun\", …\n$ `#clean_adm2`                 <chr> \"Ifedayo\", \"Atakumosa East\", \"Osogbo\", \"…\n$ `#clean_adm3`                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#clean_adm4`                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#install_year`               <dbl> NA, NA, NA, 2004, NA, NA, 2006, 2014, 20…\n$ `#installer`                  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#rehab_year`                 <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#rehabilitator`              <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#management_clean`           <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Com…\n$ `#status_clean`               <chr> NA, \"Abandoned/Decommissioned\", \"Abandon…\n$ `#pay`                        <chr> NA, \"No\", \"No\", \"No\", NA, NA, \"No\", \"No\"…\n$ `#fecal_coliform_presence`    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#fecal_coliform_value`       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#subjective_quality`         <chr> NA, \"Acceptable quality\", \"Acceptable qu…\n$ `#activity_id`                <chr> \"6054e946-2573-45bf-ab7c-0ddaa68a61b4\", …\n$ `#scheme_id`                  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#wpdx_id`                    <chr> \"6FW723C6+222\", \"6FV68Q9P+36R\", \"6FV6QH5…\n$ `#notes`                      <chr> \"Rt Hon Kola Oluwawole Water Tap\", \"Temi…\n$ `#orig_lnk`                   <chr> \"https://nigeria.africageoportal.com/dat…\n$ `#photo_lnk`                  <chr> NA, \"https://akvoflow-55.s3.amazonaws.co…\n$ `#country_id`                 <chr> \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\"…\n$ `#data_lnk`                   <chr> \"https://catalog.waterpointdata.org/data…\n$ `#distance_to_primary_road`   <dbl> 4474.22234, 10130.42742, 167.82235, 4133…\n$ `#distance_to_secondary_road` <dbl> 1883.98780, 17466.35720, 838.91849, 1162…\n$ `#distance_to_tertiary_road`  <dbl> 1885.874322, 2376.832183, 1181.107236, 9…\n$ `#distance_to_city`           <dbl> 40100.268, 31549.222, 2449.293, 16704.19…\n$ `#distance_to_town`           <dbl> 8120.871, 24652.907, 9463.295, 5176.899,…\n$ water_point_history           <chr> \"{\\\"2018-08-29\\\": {\\\"source\\\": \\\"GRID3\\\"…\n$ rehab_priority                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ water_point_population        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, 0, 508, …\n$ local_population_1km          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, 70, 647,…\n$ crucialness_score             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, 0.78…\n$ pressure_score                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, 1.69…\n$ usage_capacity                <dbl> 250, 1000, 1000, 1000, 250, 250, 1000, 3…\n$ is_urban                      <lgl> FALSE, FALSE, TRUE, FALSE, FALSE, FALSE,…\n$ days_since_report             <dbl> 1483, 2689, 2689, 2700, 1483, 1483, 2688…\n$ staleness_score               <dbl> 62.65911, 42.84384, 42.84384, 42.69554, …\n$ latest_record                 <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE…\n$ location_id                   <dbl> 358783, 239555, 239556, 230405, 358062, …\n$ cluster_size                  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ `#clean_country_id`           <chr> \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\"…\n$ `#country_name`               <chr> \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeri…\n$ `#water_source`               <chr> \"Tap\", \"Improved Protected dug well\", \"I…\n$ `#water_tech`                 <chr> NA, \"Motorised\", \"Motorised\", \"Motorised…\n$ `#status`                     <chr> NA, \"Non-functional Abandoned\", \"Non-fun…\n$ `#adm2`                       <chr> NA, \"Atakumosa East\", \"Osogbo\", \"Odo-Oti…\n$ `#adm3`                       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#management`                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Com…\n$ `#adm1`                       <chr> NA, \"Osun\", \"Osun\", \"Osun\", NA, NA, \"Osu…\n$ `New Georeferenced Column`    <chr> \"POINT (5.06 8.02)\", \"POINT (4.7855068 7…\n$ lat_deg_original              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ lat_lon_deg                   <chr> \"(8.02°, 5.06°)\", \"(7.3177411°, 4.785506…\n$ lon_deg_original              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ public_data_source            <chr> \"https://catalog.waterpointdata.org/data…\n$ converted                     <chr> NA, \"#status_id, #water_source, #pay, #s…\n$ count                         <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ created_timestamp             <chr> \"12/06/2021 09:12:57 PM\", \"06/30/2020 12…\n$ updated_timestamp             <chr> \"12/06/2021 09:12:57 PM\", \"06/30/2020 12…\n$ Geometry                      <POINT> POINT (5.06 8.02), POINT (4.785507 7.3…\n\n\nWe need to use EPSG 4326 because we want to put back the projection information first, as it is from aspatial data.\n\nwp_sf <- st_sf(wp_nga, crs=4326)\nst_geometry(wp_sf)\n\nGeometry set for 5557 features \nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4.032004 ymin: 7.060309 xmax: 5.06 ymax: 8.061898\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nInspecting the newly created dataframe, we find that it’s using the WGS84 coordinate system. We need to project it to Nigeria’s projected coordinate system.\n\nwp_sf <- wp_sf %>%\n  st_transform(crs = 26392)\n\n\n\nSelecting and cleaning relevant information\nAccording to the documentation in the WPdx repository, the #status_clean column denotes a categorized version of the #status column, which tells us the physical / mechanical condition of the water point (i.e. whether or not it is functional). As such, we will primarily be working with this column. We can rename the column so that it’s more readable.\n\nwp_sf <- wp_sf %>%\n  rename(status_clean = '#status_clean')\n\nNow, let’s visualise the possible categories that this column contains!\n\nunique(wp_sf$`status_clean`)\n\n[1] NA                                 \"Abandoned/Decommissioned\"        \n[3] \"Functional but needs repair\"      \"Functional\"                      \n[5] \"Functional but not in use\"        \"Abandoned\"                       \n[7] \"Non-Functional\"                   \"Non-Functional due to dry season\"\n\n\nThere are NA values present in the column. Ideally, we want to replace these values with a category so that they do not interfere with calculations.\n\nwp_sf <- wp_sf %>% \n  mutate(status_clean = replace_na(\n    status_clean, \"Unknown\"\n  ))\n\nVisualising the possible categories once more, we can see that all the NA values have been replaced to Unknown.\n\nunique(wp_sf$`status_clean`)\n\n[1] \"Unknown\"                          \"Abandoned/Decommissioned\"        \n[3] \"Functional but needs repair\"      \"Functional\"                      \n[5] \"Functional but not in use\"        \"Abandoned\"                       \n[7] \"Non-Functional\"                   \"Non-Functional due to dry season\"\n\n\nTo make it easier to work with the data, let’s only select columns that we need, namely:\n\nclean_country_name: country name the data is derived from (Nigeria), simply retained for reference\nclean_adm1: name of the state we are concerned with (Osun), simply retained for reference\nclean_adm2: names of level-2 administrative boundary (LGA)\nGeometry: the geospatial information that we generated from the aspatial data\nstatus_clean: the statuses of the water points\n\nIn addition, we want to constrain the water points to only those that are within the Osun region defined by the state boundary GIS data.\n\nwp_sf_osun <- wp_sf %>% \n  st_intersection(osun) %>% \n  dplyr::select(c(\"Geometry\", \"status_clean\", \"X.clean_country_name\", \"X.clean_adm1\", \"X.clean_adm2\")) %>%\n  rename(clean_country_name = 'X.clean_country_name',\n         clean_adm1 = 'X.clean_adm1',\n         clean_adm2 = 'X.clean_adm2')\nglimpse(wp_sf_osun)\n\nRows: 5,322\nColumns: 5\n$ Geometry           <POINT [m]> POINT (212810 386707.6), POINT (212202 349210…\n$ status_clean       <chr> \"Functional but needs repair\", \"Functional\", \"Funct…\n$ clean_country_name <chr> \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeri…\n$ clean_adm1         <chr> \"Osun\", \"Osun\", \"Osun\", \"Osun\", \"Osun\", \"Osun\", \"Os…\n$ clean_adm2         <chr> \"Aiyedade\", \"Aiyedade\", \"Aiyedade\", \"Aiyedade\", \"Ai…"
  },
  {
    "objectID": "Take-Home-Exercises/exe-01/THE1.html#geospatial-data-1",
    "href": "Take-Home-Exercises/exe-01/THE1.html#geospatial-data-1",
    "title": "Take Home Exercise 1: Spatial Point Patterns Analysis on Nigerian Water Points",
    "section": "Geospatial Data",
    "text": "Geospatial Data\n\nSelecting relevant information\nTo make our data easier to work with, we will select only the relevant columns of the geospatial data, which are:\n\nADM2_EN: English name of the level-2 administrative boundary (LGA)\nADM2_PCODE: code for the level-2 administrative boundary (LGA)\nADM1_EN: English name of the level-1 administrative boundary (state); in this case, Osun. The information is retained for reference.\nADM1_PCODE: code for the level-1 administrative boundary (state); in this case, NG030. The information is retained for reference.\ngeometry: the geospatial information\n\n\nosun <- osun %>% dplyr::select(c(3:4, 8:9))\n\n\n\nDeriving additional columns\nWe are also concerned with the proportions of functional and non-functional water points to view their distributions. Hence, we will derive additional columns for this information and attach them to the geospatial data.\nAdd a column called func_status\nThe func_status column will categorize the status_clean column into “Functional”, “Non-Functional”, and “Unknown” instead of the 7 different categories.\n\nwp_sf_osun <- wp_sf_osun %>%\n  mutate(`func_status` = case_when(\n    `status_clean` %in% c(\"Functional\", \n                          \"Functional but not in use\",\n                          \"Functional but needs repair\") ~ \n      \"Functional\",\n    `status_clean` %in% c(\"Abandoned/Decommissioned\",\n                               \"Non-Functional due to dry season\",\n                               \"Non-Functional\",\n                               \"Abandoned\",\n                               \"Non functional due to dry season\") ~ \n      \"Non-Functional\",\n    `status_clean` == \"Unknown\" ~ \"Unknown\"))\n\nFrequency of functional water points\n\nfunctional <- wp_sf_osun %>% \n  filter(`func_status` == \"Functional\")\n\nosun$`wp_functional` <- lengths(st_intersects(osun, functional))\n\nFrequency of non-functional water points\n\nnon_functional <- wp_sf_osun %>% \n  filter(`func_status` == \"Non-Functional\")\n\nosun$`wp_non_functional` <- lengths(st_intersects(osun, non_functional))\n\nFrequency of unknown status water points\n\nunknown <- wp_sf_osun %>% \n  filter(`func_status` == \"Unknown\")\n  \nosun$`wp_unknown` <- lengths(st_intersects(osun, unknown))\n\nTotal frequency of water points\n\nosun$`wp_total` <- lengths(st_intersects(osun, wp_sf_osun))\n\nCalculate proportions of functional and non-functional water points\nThe proportions of functional and non-functional water points are calculated by dividing their respective frequencies with the total frequency of water points.\n\nosun <- osun %>%\n  mutate(`prop_functional` = `wp_functional`/`wp_total`,\n         `prop_non_functional` = `wp_non_functional`/`wp_total`)\n\n\n\nConverting sf data frame to spatstat objects\nIn order to do spatial patterns points analysis, we will be using the spatstat package. However, we must first convert our data, which is currently in the form of sf data frames into the appropriate data types. As of this point, there are no direct conversions. Hence, we must do several intermediate steps.\n1) Convert sf data frames to sp’s Spatial* class\n\nosun_spatial <- as_Spatial(osun)\nwp_spatial <- as_Spatial(wp_sf_osun)\n\nfunc_spatial <- as_Spatial(functional)\nnon_func_spatial <- as_Spatial(non_functional)\n\n2) Converting Spatial* class into generic sp format\n\nosun_sp <- as(osun_spatial, \"SpatialPolygons\")\nwp_sp <- as(wp_spatial, \"SpatialPoints\")\n\nfunc_sp <- as(func_spatial, \"SpatialPoints\")\nnon_func_sp <- as(non_func_spatial, \"SpatialPoints\")\n\n3) Converting generic sp format into spatstat’s ppp format\n\nwp_ppp <- as(wp_sp, \"ppp\")\nfunc_ppp <- as(func_sp, \"ppp\")\nnon_func_ppp <- as(non_func_sp, \"ppp\")\n\nLet’s visualise all the water point data in the ppp format.\n\nplot(wp_ppp)\n\n\n\n\nWe can take a look at the summary statistics of the newly created ppp objects.\n\nsummary(wp_ppp)\n\nPlanar point pattern:  5322 points\nAverage intensity 4.352014e-07 points per square unit\n\nCoordinates are given to 2 decimal places\ni.e. rounded to the nearest multiple of 0.01 units\n\nWindow: rectangle = [180388.11, 290750.96] x [340054.1, 450859.7] units\n                    (110400 x 110800 units)\nWindow area = 12228800000 square units\n\n\n\nsummary(func_ppp)\n\nPlanar point pattern:  2529 points\nAverage intensity 2.197764e-07 points per square unit\n\nCoordinates are given to 2 decimal places\ni.e. rounded to the nearest multiple of 0.01 units\n\nWindow: rectangle = [183479.97, 290750.96] x [343587.9, 450859.7] units\n                    (107300 x 107300 units)\nWindow area = 11507100000 square units\n\n\n\nsummary(non_func_ppp)\n\nPlanar point pattern:  2059 points\nAverage intensity 1.719992e-07 points per square unit\n\nCoordinates are given to 2 decimal places\ni.e. rounded to the nearest multiple of 0.01 units\n\nWindow: rectangle = [182502.44, 290616] x [340054.1, 450780.1] units\n                    (108100 x 110700 units)\nWindow area = 1.1971e+10 square units\n\n\n4) Creating owin object\nWe need to confine our analysis to the Osun State boundary using spatstat’s owin object, which is specially designed to represent polygonal regions.\n\nosun_owin <- as(osun_sp, \"owin\")\n\n\nplot(osun_owin)\n\n\n\n\n\nsummary(osun_owin)\n\nWindow: polygonal boundary\n30 separate polygons (no holes)\n            vertices      area relative.area\npolygon 1        204 766084000       0.08870\npolygon 2         81 304399000       0.03520\npolygon 3         97 465688000       0.05390\npolygon 4        124 373051000       0.04320\npolygon 5         60 149473000       0.01730\npolygon 6         84 144820000       0.01680\npolygon 7         50 102243000       0.01180\npolygon 8         72 216002000       0.02500\npolygon 9        112 269897000       0.03130\npolygon 10       125 365142000       0.04230\npolygon 11        83 111191000       0.01290\npolygon 12       126 192557000       0.02230\npolygon 13       219 904397000       0.10500\npolygon 14       174 741131000       0.08580\npolygon 15        81 138742000       0.01610\npolygon 16        65 119452000       0.01380\npolygon 17        90 280205000       0.03240\npolygon 18        69  69814600       0.00808\npolygon 19        69  42727500       0.00495\npolygon 20        49  30458800       0.00353\npolygon 21        62 263505000       0.03050\npolygon 22        93 438930000       0.05080\npolygon 23        87 274127000       0.03170\npolygon 24       105 509979000       0.05910\npolygon 25        98 292058000       0.03380\npolygon 26        64 327765000       0.03800\npolygon 27       133 108945000       0.01260\npolygon 28       122 462169000       0.05350\npolygon 29        94 109715000       0.01270\npolygon 30        95  61239800       0.00709\nenclosing rectangle: [176503.22, 291043.82] x [331434.7, 454520.1] units\n                     (114500 x 123100 units)\nWindow area = 8635910000 square units\nFraction of frame area: 0.613\n\n\n\n\nCombining point events object and owin object\nWe can combine the ppp object of the water points with the owin object of Osun’s boundary.\n\nwp_osun_ppp = wp_ppp[osun_owin]\nwp_osun_func_ppp = func_ppp[osun_owin]\nwp_osun_non_func_ppp = non_func_ppp[osun_owin]\n\n\nsummary(wp_osun_ppp)\n\nPlanar point pattern:  5322 points\nAverage intensity 6.162642e-07 points per square unit\n\nCoordinates are given to 2 decimal places\ni.e. rounded to the nearest multiple of 0.01 units\n\nWindow: polygonal boundary\n30 separate polygons (no holes)\n            vertices      area relative.area\npolygon 1        204 766084000       0.08870\npolygon 2         81 304399000       0.03520\npolygon 3         97 465688000       0.05390\npolygon 4        124 373051000       0.04320\npolygon 5         60 149473000       0.01730\npolygon 6         84 144820000       0.01680\npolygon 7         50 102243000       0.01180\npolygon 8         72 216002000       0.02500\npolygon 9        112 269897000       0.03130\npolygon 10       125 365142000       0.04230\npolygon 11        83 111191000       0.01290\npolygon 12       126 192557000       0.02230\npolygon 13       219 904397000       0.10500\npolygon 14       174 741131000       0.08580\npolygon 15        81 138742000       0.01610\npolygon 16        65 119452000       0.01380\npolygon 17        90 280205000       0.03240\npolygon 18        69  69814600       0.00808\npolygon 19        69  42727500       0.00495\npolygon 20        49  30458800       0.00353\npolygon 21        62 263505000       0.03050\npolygon 22        93 438930000       0.05080\npolygon 23        87 274127000       0.03170\npolygon 24       105 509979000       0.05910\npolygon 25        98 292058000       0.03380\npolygon 26        64 327765000       0.03800\npolygon 27       133 108945000       0.01260\npolygon 28       122 462169000       0.05350\npolygon 29        94 109715000       0.01270\npolygon 30        95  61239800       0.00709\nenclosing rectangle: [176503.22, 291043.82] x [331434.7, 454520.1] units\n                     (114500 x 123100 units)\nWindow area = 8635910000 square units\nFraction of frame area: 0.613\n\n\n\nplot(wp_osun_ppp)"
  },
  {
    "objectID": "Take-Home-Exercises/exe-01/THE1.html#point-map",
    "href": "Take-Home-Exercises/exe-01/THE1.html#point-map",
    "title": "Take Home Exercise 1: Spatial Point Patterns Analysis on Nigerian Water Points",
    "section": "Point Map",
    "text": "Point Map\nFirst, let’s visualise the distribution of all water points in the state of Osun. As water points are considered spatial point events, we can use a point map to illustrate their occurrence.\n\ntmap_mode(\"view\")\ntm_basemap(\"OpenStreetMap\") +\n  tm_view(set.zoom.limits=c(8, 18)) +\n  tm_shape(osun) +\n    tm_borders(lwd=0.5) +\n  tm_shape(wp_sf_osun) +\n    tm_dots(title = \"Status\", col = \"func_status\", alpha = 0.7) +\n  tm_layout(main.title=\"Distribution of All Water Points\")\n\n\n\n\n\n\nWe can see several areas where many points seem to be gathered together. Since we are concerned about the distribution of functional and non-functional water points, let us also visualise their distributions separately side-by-side using a facet map.\n\ntmap_mode(\"plot\")\n\n\nfunc_points <- tm_shape(osun) +\n  tm_fill() +\n  tm_shape(functional) +\n  tm_dots() +\n  tm_layout(main.title=\"Distribution of Functional Water Points\",\n            main.title.size = 1)\n\n\nnon_func_points <- tm_shape(osun) +\n  tm_fill() +\n  tm_shape(non_functional) +\n  tm_dots() +\n  tm_layout(main.title=\"Distribution of Non-Functional Water Points\",\n            main.title.size = 1)\n\n\ntmap_arrange(func_points, non_func_points, nrow = 1)\n\n\n\n\nAlthough we can also pinpoint areas where many points seem to be gathered together, it’s rather hard to pinpoint their density relative to each other."
  },
  {
    "objectID": "Take-Home-Exercises/exe-01/THE1.html#choropleth-map-of-rate-per-lga",
    "href": "Take-Home-Exercises/exe-01/THE1.html#choropleth-map-of-rate-per-lga",
    "title": "Take Home Exercise 1: Spatial Point Patterns Analysis on Nigerian Water Points",
    "section": "Choropleth Map of Rate per LGA",
    "text": "Choropleth Map of Rate per LGA\nSince we have calculated proportions of the functional and non-functional water points per LGA, we can use a choropleth map to visualise their distribution by LGA as well.\n\nfunc_rate_lga <- tm_shape(osun) +\n  tm_fill(\"prop_functional\",\n          n = 10,\n          title=\"Proportion\",\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water points\",\n            legend.outside = FALSE,\n            main.title.size = 1)\n\n\nnon_func_rate_lga <- tm_shape(osun) +\n  tm_fill(\"prop_non_functional\",\n          n = 10,\n          title=\"Proportion\",\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of non-functional water points\",\n            legend.outside = FALSE,\n            main.title.size = 1)\n\n\ntmap_arrange(func_rate_lga, non_func_rate_lga, nrow=1)\n\n\n\n\nThis allows us to see which LGAs have the highest proportion of functional water points and which LGAs have the highest proportion of non-functional water points. However, with these choropleth maps, we are constrained to viewing the data by LGAs."
  },
  {
    "objectID": "Take-Home-Exercises/exe-01/THE1.html#kernel-density-estimation",
    "href": "Take-Home-Exercises/exe-01/THE1.html#kernel-density-estimation",
    "title": "Take Home Exercise 1: Spatial Point Patterns Analysis on Nigerian Water Points",
    "section": "Kernel Density Estimation",
    "text": "Kernel Density Estimation\nIf we want to better visualise areas of high density without being constrained to viewing them in terms of LGAs, we can use kernel density estimation.\n\nAutomatic bandwidth selection\nFirst of all, we will rescale the data to kilometers.\n\nwp_osun_ppp.km <- rescale(wp_osun_ppp, 1000, \"km\")\nwp_osun_func_ppp.km <- rescale(wp_osun_func_ppp, 1000, \"km\")\nwp_osun_non_func_ppp.km <- rescale(wp_osun_non_func_ppp, 1000, \"km\")\n\nThen, we can automatically calculate bandwidth using spatstat’s bw.diggle and bw.ppl functions, which will perform the cross-validation to select an appropriate bandwidth for the kernel density estimation.\n\nkde_wp_osun_bw.diggle <- density(wp_osun_ppp.km,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\")\n\nkde_wp_osun_bw.ppl <- density(wp_osun_ppp.km,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                            kernel=\"gaussian\")\n\nThe bandwidth selected by the bw.diggle function is:\n\nbw.diggle(wp_osun_ppp.km)\n\n    sigma \n0.2223774 \n\n\nThe bandwidth selected by the bw.ppl function is:\n\nbw.ppl(wp_osun_ppp.km)\n\n    sigma \n0.4905715 \n\n\n\npar(mfrow=c(1,2))\nplot(kde_wp_osun_bw.diggle, main=\"diggle\")\nplot(kde_wp_osun_bw.ppl, main=\"ppl\")\n\n\n\n\nThe bw.ppl function tends to select a larger bandwidth than the bw.diggle function. According to Baddeley et. (2016), the bw.ppl algorithm tends to produce more appropriate values when the pattern consists of predominantly tight clusters. However, bw.diggle works better to detect a single tight cluster in the midst of random noise.\nSince the purpose of this project is to visualise where all the clusters of water points are in the state of Osun, the bw.ppl algorithm seems to be more appropriate. As can be seen from the plots as well, it seems to give us a clearer picture on the areas of high point density. Hence, from this point on, we will be using bw.ppl.\n\nkde_wp_osun_func_bw <- density(wp_osun_func_ppp.km,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                            kernel=\"gaussian\")\n\nkde_wp_osun_non_func_bw <- density(wp_osun_non_func_ppp.km,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                            kernel=\"gaussian\")\n\nSelected bandwidth for functional water points:\n\nbw.ppl(wp_osun_func_ppp.km)\n\n    sigma \n0.9192953 \n\n\nSelected bandwidth for non-functional water points:\n\nbw.ppl(wp_osun_non_func_ppp.km)\n\n    sigma \n0.9737385 \n\n\n\npar(mfrow=c(1,2))\nplot(kde_wp_osun_func_bw, main=\"Functional\")\nplot(kde_wp_osun_non_func_bw, main=\"Non-Functional\")\n\n\n\n\n\n\nMapping\nTo use the tmap package to plot the results of our kernel density estimation, we need to convert the data to the appropriate format.\n1) Convert the KDE output into grid object\n\ngrid_kde_wp_osun_bw <- as.SpatialGridDataFrame.im(kde_wp_osun_bw.ppl)\n\ngrid_kde_wp_osun_func_bw <- as.SpatialGridDataFrame.im(kde_wp_osun_func_bw)\n\ngrid_kde_wp_osun_non_func_bw <- as.SpatialGridDataFrame.im(kde_wp_osun_non_func_bw)\n\n2) Convert grid objects into raster\n\nraster_kde_wp_osun_bw <- raster(grid_kde_wp_osun_bw)\n\nraster_kde_wp_osun_func_bw <- raster(grid_kde_wp_osun_func_bw)\n\nraster_kde_wp_osun_non_func_bw <- raster(grid_kde_wp_osun_non_func_bw)\n\nWe have to re-assign the correct projection systems onto the raster objects. We use EPSG 26392 for the Nigerian projection system and units km because we rescaled the data when computing the KDE.\n\ncrs(raster_kde_wp_osun_bw) <- CRS(\"+init=EPSG:26392 +units=km\") \n\ncrs(raster_kde_wp_osun_func_bw) <- CRS(\"+init=EPSG:26392 +units=km\")\n\ncrs(raster_kde_wp_osun_non_func_bw) <- CRS(\"+init=EPSG:26392 +units=km\")\n\nNow, we can finally start mapping our raster objects!\nLet’s visualise the KDE plot of all the water points on an interactive openstreetmap.\n\ntmap_mode(\"view\")\ntm_basemap(\"OpenStreetMap\") +\n  tm_view(set.zoom.limits=c(8, 18)) +\n  tm_shape(raster_kde_wp_osun_bw) +\n  tm_raster(\"v\", palette = \"YlGnBu\", title=\"\", alpha=0.7)\n\n\n\n\n\nNow, we can visualise the kernel density maps of functional and non-functional water points side by side.\n\ntmap_mode(\"plot\")\n\n\nmap_kde_func <- tm_shape(raster_kde_wp_osun_func_bw) + \n  tm_raster(\"v\", palette = \"YlGnBu\", title=\"\") +\n  tm_layout(\n    legend.position = c(\"right\", \"bottom\"), \n    main.title = \"Functional\",\n    frame = FALSE\n  )\n\n\nmap_kde_non_func <- tm_shape(raster_kde_wp_osun_non_func_bw) + \n  tm_raster(\"v\", palette = \"YlOrRd\", title=\"\") +\n  tm_layout(\n    legend.position = c(\"right\", \"bottom\"), \n    main.title = \"Non-Functional\",\n    frame = FALSE\n  )\n\n\ntmap_arrange(map_kde_func, map_kde_non_func, nrow = 1)\n\n\n\n\n\n\nAnalysis\nFrom the plots, we can see that the functional water points seem to be clustered around northern Osun (in LGAs such as Ejigbo, Ede North, Osogbo), whereas the non-functional water points seem to be clustered around southern / central Osun (in LGAs such as Ife Central, Ife East, Ilesha West, Ilesha East).\nAs a whole, the water points themselves seem to be unevenly distributed, with northern Osun having more water points as a whole and southern Osun being more sparse.\nReference for LGAs:\n\nlga_kde_func <- map_kde_func +\n  tm_shape(osun) +\n  tm_borders() +\n  tm_text(\"ADM2_EN\", size = 0.6) \n\nlga_kde_non_func <- map_kde_non_func + \n  tm_shape(osun) +\n  tm_borders() +\n  tm_text(\"ADM2_EN\", size = 0.6) \n\ntmap_arrange(lga_kde_func, lga_kde_non_func, nrow = 1)\n\n\n\n\nComparison to point map\n\ntmap_arrange(map_kde_func, map_kde_non_func, func_points, non_func_points,\n             nrow = 2, ncol = 2)\n\n\n\n\nCompared to the point map, we can see that the KDE maps have the advantage of clearly pinpointing areas of high point density. We do not have to manually discern with our own eyes which areas seem to have a lot of points gathered together, because the KDE maps color-codes them in a gradient. Therefore, we can make comparisons between the distribution of the points more easily by looking at the intensity of the colors, instead of making guesses based on the number of points we can see.\nHowever, the KDE maps do not show the rest of the exact distribution of the point events, as it is merely an approximation. Hence, it is heavily reliant on a good choice of bandwidth to give meaningful insights; a bandwidth that is too high might obscure the actual structure in how the points are dispersed, while a bandwidth that is too low might lead to high variance where the presence or absence of a single point will drastically change the estimate."
  },
  {
    "objectID": "Take-Home-Exercises/exe-01/THE1.html#selecting-areas-to-study",
    "href": "Take-Home-Exercises/exe-01/THE1.html#selecting-areas-to-study",
    "title": "Take Home Exercise 1: Spatial Point Patterns Analysis on Nigerian Water Points",
    "section": "Selecting areas to study",
    "text": "Selecting areas to study\nAs we have observed through the first-order spatial point patterns analysis, the functional water points seem to be clustered around the top part of the state, whereas the non-functional water points seem to be clustered around the central part of the state. As such, we will be choosing 4 LGAs in which we will conduct our second-order spatial point patterns analysis:\n\nEjigbo (Functional)\nEde North (Functional)\nIfe Central (Non-functional)\nIfe East (Non-functional)\n\n\nejigbo = osun[osun$`ADM2_EN` == \"Ejigbo\",] \nede_north = osun[osun$`ADM2_EN` == \"Ede North\",]\nife_central = osun[osun$`ADM2_EN` == \"Ife Central\",] \nife_east = osun[osun$`ADM2_EN` == \"Ife East\",] \n\nLet’s visualise these areas.\n\npar(mfrow=c(2,2))\nplot(ejigbo$geometry, main = \"Ejigbo\")\nplot(ede_north$geometry, main = \"Ede North\")\nplot(ife_central$geometry, main = \"Ife Central\")\nplot(ife_east$geometry, main = \"Ife East\")\n\n\n\n\nLike before, we need to convert them into owin objects.\n\nejigbo_owin <- ejigbo %>% \n  as('Spatial') %>% \n  as('SpatialPolygons') %>% \n  as('owin')\n\nede_north_owin <- ede_north %>% \n  as('Spatial') %>% \n  as('SpatialPolygons') %>% \n  as('owin')\n\nife_central_owin <- ife_central %>% \n  as('Spatial') %>% \n  as('SpatialPolygons') %>% \n  as('owin')\n\nife_east_owin <- ife_east %>% \n  as('Spatial') %>% \n  as('SpatialPolygons') %>% \n  as('owin')\n\nNext, we need to combine the water point data with the owin objects.\n\nwp_ejigbo_ppp <- func_ppp[ejigbo_owin]\nwp_ede_north_ppp <- func_ppp[ede_north_owin]\nwp_ife_central_ppp <- non_func_ppp[ife_central_owin]\nwp_ife_east_ppp <- non_func_ppp[ife_east_owin]\n\nLet’s visualise the combined data!\n\nEjigboEde NorthIfe CentralIfe East\n\n\n\nplot(wp_ejigbo_ppp, main = \"Ejigbo\")\n\n\n\n\n\n\n\nplot(wp_ede_north_ppp, main = \"Ede North\")\n\n\n\n\n\n\n\nplot(wp_ife_central_ppp, main = \"Ife Central\")\n\n\n\n\n\n\n\nplot(wp_ife_east_ppp, main = \"Ife East\")"
  },
  {
    "objectID": "Take-Home-Exercises/exe-01/THE1.html#g-function-complete-spatial-randomness-test",
    "href": "Take-Home-Exercises/exe-01/THE1.html#g-function-complete-spatial-randomness-test",
    "title": "Take Home Exercise 1: Spatial Point Patterns Analysis on Nigerian Water Points",
    "section": "G-Function Complete Spatial Randomness Test",
    "text": "G-Function Complete Spatial Randomness Test\nThe G-Function measures the distribution of the distances from an arbitrary event to its nearest event. We will be using the spatstat package for this analysis: specifically, the Gest() function to compute G-Function estimation and perform Monte Carlo simulation tests using the envelope() function.\nFor each Monte Carlo test, we choose to do 39 simulations in accordance to how the envelope() function calculates its significance, where alpha = 2 * nrank / (1 + nsim) by its default pointwise method. Since our alpha is set to 0.05 and nrank is 1 by default, we take nsim = 39.\n\nFunctional Water Points\nEjigbo\nCompute the G-Function estimate\n\nG_ejigbo <- Gest(wp_ejigbo_ppp, correction = \"border\")\nplot(G_ejigbo, main = \"Ejigbo G-Function\")\n\n\n\n\nPerform Complete Spatial Randomness Test\n\nG_ejigbo.csr <- envelope(wp_ejigbo_ppp, Gest, nsim=39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(G_ejigbo.csr, main=\"CSR Ejigbo G-Function\")\n\n\n\n\nWe can observe from the plot that the computed G-function values lie above the envelope, indicating some clustering. Therefore, we can reject the null hypothesis that functional water points in Ejigbo are randomly distributed at 95% confidence interval.\nEde North\nCompute the G-Function estimate\n\nG_ede_north <- Gest(wp_ede_north_ppp, correction = \"border\")\nplot(G_ede_north, main = \"Ede North G-Function\")\n\n\n\n\nPerform Complete Spatial Randomness Test\n\nG_ede_north.csr <- envelope(wp_ede_north_ppp, Gest, nsim=39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(G_ejigbo.csr, main=\"CSR Ede North G-Function\")\n\n\n\n\nWe can observe from the plot that the computed G-function values lie above the envelope, indicating some clustering. Therefore, we can reject the null hypothesis that functional water points in Ede North are randomly distributed at 95% confidence interval.\n\n\nNon-Functional Water Points\nIfe Central\nCompute the G-Function estimate\n\nG_ife_central <- Gest(wp_ife_central_ppp, correction = \"border\")\nplot(G_ife_central, main = \"Ife Central G-Function\")\n\n\n\n\nPerform Complete Spatial Randomness Test\n\nG_ife_central.csr <- envelope(wp_ife_central_ppp, Gest, nsim=39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(G_ife_central.csr, main=\"CSR Ife Central G-Function\")\n\n\n\n\nWe can observe from the plot that the computed G-function values lie above the envelope, indicating some clustering. Therefore, we can reject the null hypothesis that non-functional water points in Ife Central are randomly distributed at 95% confidence interval.\nIfe East\nCompute the G-Function estimate\n\nG_ife_central <- Gest(wp_ife_east_ppp, correction = \"border\")\nplot(G_ife_central, main = \"Ife East G-Function\")\n\n\n\n\nPerform Complete Spatial Randomness Test\n\nG_ife_central.csr <- envelope(wp_ife_east_ppp, Gest, nsim=39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(G_ife_central.csr, main=\"CSR Ife East G-Function\")\n\n\n\n\nWe can observe from the plot that the computed G-function values lie above the envelope, indicating some clustering, except for the r=900 (approximate)-1000 interval. Therefore, for r values below 900, we can reject the null hypothesis that non-functional water points in Ife East are randomly distributed at 95% confidence interval."
  },
  {
    "objectID": "Take-Home-Exercises/exe-01/THE1.html#extracting-categories",
    "href": "Take-Home-Exercises/exe-01/THE1.html#extracting-categories",
    "title": "Take Home Exercise 1: Spatial Point Patterns Analysis on Nigerian Water Points",
    "section": "Extracting categories",
    "text": "Extracting categories\nWe can select a subset of our data containing only Functional and Non-Functional water points. This is because we cannot be certain about the status of Unknown water points, so we do not want them to count towards the computation of the LCLQ.\n\nwp_sf_osun_known <- wp_sf_osun %>%\n  filter(`func_status` %in% c(\"Functional\", \"Non-Functional\"))\n\nThen, we will extract the functional and non-functional points into vectors.\n\nfunctional_list <- wp_sf_osun_known %>%\n  filter(`func_status` == \"Functional\") %>%\n  dplyr::pull(`func_status`)\n\nnon_functional_list <- wp_sf_osun_known %>%\n  filter(`func_status` == \"Non-Functional\") %>%\n  dplyr::pull(`func_status`)"
  },
  {
    "objectID": "Take-Home-Exercises/exe-01/THE1.html#calculate-local-co-location-quotient-lclq",
    "href": "Take-Home-Exercises/exe-01/THE1.html#calculate-local-co-location-quotient-lclq",
    "title": "Take Home Exercise 1: Spatial Point Patterns Analysis on Nigerian Water Points",
    "section": "Calculate Local Co-Location Quotient (LCLQ)",
    "text": "Calculate Local Co-Location Quotient (LCLQ)\nTo calculate the LCLQ, we need to do several steps.\n1) Calculate the k-nearest neighbor\nWe choose 6 nearest neighbors, but include the point of interest itself (hence ending up with the odd number of 7).\n\nnb <- include_self(st_knn(st_geometry(wp_sf_osun_known), 6))\n\n2) Calculate weight matrix\nAccording to the documentation for sfdep’s local_colocation, Wang et. al (2017) emphasises on the use of Gaussian adaptive kernel. Hence, that is what we will be using to compute the weight matrix.\n\nwt <- st_kernel_weights(nb, wp_sf_osun_known, \"gaussian\", adaptive=TRUE)\n\n3) Derive co-location quotient\nUsing the sfdep function local_colocation(), we calculate the LCLQ for the functional water points.\n\nLCLQ <- local_colocation(functional_list,\n                         non_functional_list,\n                         nb,\n                         wt,\n                         49)\n\nAfter deriving the LCLQ, we combine them into the original dataframe consisting of water point data using the cbind() function of base R.\n\nLCLQ_osun <- cbind(wp_sf_osun_known, LCLQ)\n\nWe also remove the LCLQ for those that fall above the designated significance level, which is 0.05, as they are not statistically significant.\n\nLCLQ_osun <- LCLQ_osun %>% \n  mutate(\n    `p_sim_Non.Functional` = replace(`p_sim_Non.Functional`, `p_sim_Non.Functional` > 0.05, NA),\n    `Non.Functional` = ifelse(`p_sim_Non.Functional` > 0.05, NA, `Non.Functional`))"
  },
  {
    "objectID": "Take-Home-Exercises/exe-01/THE1.html#analysis-1",
    "href": "Take-Home-Exercises/exe-01/THE1.html#analysis-1",
    "title": "Take Home Exercise 1: Spatial Point Patterns Analysis on Nigerian Water Points",
    "section": "Analysis",
    "text": "Analysis\nPlotting\n\ntmap_mode(\"view\")\n\nLCLQ_osun <- LCLQ_osun %>% mutate(`size` = ifelse(is.na(`Non.Functional`), 1, 5))\n\ntm_view(set.zoom.limits=c(9, 15),\n        bbox = st_bbox(filter(LCLQ_osun, !is.na(`Non.Functional`)))) +\n  tm_shape(osun) +\n  tm_borders() +\n  tm_shape(LCLQ_osun) +\n  tm_dots(col=\"Non.Functional\",\n          palette=c(\"cyan\", \"grey\"),\n          size = \"size\",\n          scale=0.15,\n          border.col = \"black\",\n          border.lwd = 0.5,\n          alpha=0.5,\n          title=\"LCLQ\"\n          )\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nThe plot above displays water points with statistically significant LCLQ (i.e. p-value < 0.05). As we can observe, the calculated LCLQ is just under 1. This implies that while the functional water points are isolated (i.e. it is less likely to have non-functional water points within its neighbourhood), the proportion of categories within their neighbourhood is a good representation of the proportion of categories throughout Osun."
  },
  {
    "objectID": "Take-Home-Exercises/exe-01/THE1.html#examining-colocation-using-ripleys-cross-k-cross-l-function",
    "href": "Take-Home-Exercises/exe-01/THE1.html#examining-colocation-using-ripleys-cross-k-cross-l-function",
    "title": "Take Home Exercise 1: Spatial Point Patterns Analysis on Nigerian Water Points",
    "section": "Examining colocation using Ripley’s Cross-K (Cross-L) Function",
    "text": "Examining colocation using Ripley’s Cross-K (Cross-L) Function\nThe simulation-based Local Co-location Quotient (LCLQ) proposed by Wang et al. (2017) takes into account that spatial associations vary locally across different spaces. However, traditionally, colocation is measured by Ripley’s Cross-K Function - a modification of Ripley’s K-Function. Unlike the LCLQ, it is a global measure. As such, there is merit in conducting analysis using the Cross-K Function to compare the results against the LCLQ.\nFor this project, instead of the traditional Cross-K Function, we will be using the normalised version: Cross-L Function. Much like in the Second-order Spatial Points Patterns Analysis, we will be using spatstat’s Lcross() function to compute the value and envelope() to perform the Monte Carlo simulation tests.\nWe will be operating on the same H0, H1, and significance level as the LCLQ.\n\nAssigning marks to the ppp object\nWe will be using creating a multitype version of our wp_ppp object that we have created in the Data Preprocessing section, and combining it with the osun_owin object. However, for the purpose of computing the L-Cross Function, we need to assign marks to the ppp object - specifically denoting the func_status.\n\nwp_ppp_marked <- wp_ppp\nmarks(wp_ppp_marked) <- factor(wp_sf_osun$func_status)\n\nwp_osun_ppp_marked = wp_ppp_marked[osun_owin]\n\nWe can now see that the points are categorised based on their func_status.\n\nplot(wp_osun_ppp_marked)\n\n\n\n\nAgain, however, we need to rescale the data to km.\n\nwp_osun_ppp_marked.km <- rescale(wp_osun_ppp_marked, 1000, \"km\")\n\n\n\nComputing Cross-L Function\n\nwp_osun_Lcross.csr <- envelope(wp_osun_ppp_marked.km, \n                                 Lcross, \n                                 i=\"Functional\", \n                                 j=\"Non-Functional\", \n                                 correction=\"border\", \n                                 nsim=39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(wp_osun_Lcross.csr, xlim=c(0,10), main=\"L-Cross Function\", legend=FALSE)\n\n\n\n\nWe can see that from distances 0 - slightly before 6 km (approximate) there seems to be clustering between the functional and non-functional water points. However, from 7 km onwards (approximate), there seems to be dispersion instead. For those intervals, we can reject the null hypothesis that functional water points and non-functional water points are independently distributed at 95% confidence interval."
  },
  {
    "objectID": "Take-Home-Exercises/exe-02/THE2.html",
    "href": "Take-Home-Exercises/exe-02/THE2.html",
    "title": "Take Home Exercise 2: Spatio-temporal Analysis of Vaccination Trends in DKI Jakarta",
    "section": "",
    "text": "In response to the Covid-19 pandemic, Indonesia launched an ongoing mass immunisation program. According to covid19.go.id as of 15 February 2023, 203.823.041 of Indonesia’s population has received the first dose, 174.828.708 has received the second dose, 69.759.284 has received the third dose, and 2.007.703 has received the fourth dose. Indonesia is targetting to have 234.666.020 of its population vaccinated against Covid-19.\nThis project aims to investigate the distribution of cumulative vaccination rate across the province of DKI Jakarta, in hopes of identifying kelurahan (sub-districts) with relatively higher vaccination rates and how they have changed over time. The period of study for this project is confined to July 2021 - June 2022."
  },
  {
    "objectID": "Take-Home-Exercises/exe-02/THE2.html#packages",
    "href": "Take-Home-Exercises/exe-02/THE2.html#packages",
    "title": "Take Home Exercise 2: Spatio-temporal Analysis of Vaccination Trends in DKI Jakarta",
    "section": "Packages",
    "text": "Packages\nThe packages used in this project are:\n\nsf: for importing, managing, and processing geospatial data.\ntidyverse: a family of other R packages for performing data science tasks such as importing, wrangling, and visualising data.\ntmap: creating thematic maps\nsfdep: for analysing spatial dependencies\n\n\npacman::p_load(sf, tidyverse, tmap, sfdep)"
  },
  {
    "objectID": "Take-Home-Exercises/exe-02/THE2.html#geospatial-data",
    "href": "Take-Home-Exercises/exe-02/THE2.html#geospatial-data",
    "title": "Take Home Exercise 2: Spatio-temporal Analysis of Vaccination Trends in DKI Jakarta",
    "section": "Geospatial Data",
    "text": "Geospatial Data\nWe can get the 2019 DKI Jakarta administration boundary data from Indonesia Geospasial data portal.\n\njkt_sf <- st_read(dsn = \"data/geospatial\", \n                 layer = \"BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA\")\n\nReading layer `BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA' from data source \n  `C:\\Jenpoer\\IS415-GAA\\Take-Home-Exercises\\exe-02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 269 features and 161 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 106.3831 ymin: -6.370815 xmax: 106.9728 ymax: -5.184322\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Take-Home-Exercises/exe-02/THE2.html#aspatial-data",
    "href": "Take-Home-Exercises/exe-02/THE2.html#aspatial-data",
    "title": "Take Home Exercise 2: Spatio-temporal Analysis of Vaccination Trends in DKI Jakarta",
    "section": "Aspatial Data",
    "text": "Aspatial Data\nThe data we are going to use is from Riwayat File Vaksinasi DKI Jakarta, which has daily vaccination records done in DKI Jakarta. For this project, we are confining the time period of study from July 2021 - June 2022. Therefore, we will take data from the last day of every month.\nAs the files are in XLSX format, we can use the readxl package included in tidyverse, specifically the read_excel() function. We need to specify the sheet that we are concerned with as “Data Kelurahan”, as we will be analysing on a kelurahan level.\nTo distinguish between the information for each sheet, we will add a column with the dates.\n\n# Converts the file names into a vector of date strings\ndates <- list.files(\"data/aspatial\") %>% \n  lapply(substring, first=36) %>%\n  strtrim(nchar(.) - 6) \ndates\n\n [1] \"27 Februari 2022\"  \"30 April 2022\"     \"30 Juni 2022\"     \n [4] \"30 November 2021\"  \"30 September 2021\" \"31 Agustus 2021\"  \n [7] \"31 Desember 2021\"  \"31 Januari 2022\"   \"31 Juli 2021\"     \n[10] \"31 Maret 2022\"     \"31 Mei 2022\"       \"31 Oktober 2021\"  \n\n\n\nvaccine <- list.files(\"data/aspatial\", full.names = TRUE) %>% # list all files\n  lapply(readxl::read_excel, sheet=\"Data Kelurahan\") # apply read_excel to all\n\nnames(vaccine) <- dates # set the list's names as dates\n\nvaccine <- vaccine %>% bind_rows(.id = \"DATE\") # bind rows into a tibble with date as id"
  },
  {
    "objectID": "Take-Home-Exercises/exe-02/THE2.html#geospatial-data-1",
    "href": "Take-Home-Exercises/exe-02/THE2.html#geospatial-data-1",
    "title": "Take Home Exercise 2: Spatio-temporal Analysis of Vaccination Trends in DKI Jakarta",
    "section": "Geospatial Data",
    "text": "Geospatial Data\n\nSelecting relevant information\n\ncolnames(jkt_sf)\n\n  [1] \"OBJECT_ID\"  \"KODE_DESA\"  \"DESA\"       \"KODE\"       \"PROVINSI\"  \n  [6] \"KAB_KOTA\"   \"KECAMATAN\"  \"DESA_KELUR\" \"JUMLAH_PEN\" \"JUMLAH_KK\" \n [11] \"LUAS_WILAY\" \"KEPADATAN\"  \"PERPINDAHA\" \"JUMLAH_MEN\" \"PERUBAHAN\" \n [16] \"WAJIB_KTP\"  \"SILAM\"      \"KRISTEN\"    \"KHATOLIK\"   \"HINDU\"     \n [21] \"BUDHA\"      \"KONGHUCU\"   \"KEPERCAYAA\" \"PRIA\"       \"WANITA\"    \n [26] \"BELUM_KAWI\" \"KAWIN\"      \"CERAI_HIDU\" \"CERAI_MATI\" \"U0\"        \n [31] \"U5\"         \"U10\"        \"U15\"        \"U20\"        \"U25\"       \n [36] \"U30\"        \"U35\"        \"U40\"        \"U45\"        \"U50\"       \n [41] \"U55\"        \"U60\"        \"U65\"        \"U70\"        \"U75\"       \n [46] \"TIDAK_BELU\" \"BELUM_TAMA\" \"TAMAT_SD\"   \"SLTP\"       \"SLTA\"      \n [51] \"DIPLOMA_I\"  \"DIPLOMA_II\" \"DIPLOMA_IV\" \"STRATA_II\"  \"STRATA_III\"\n [56] \"BELUM_TIDA\" \"APARATUR_P\" \"TENAGA_PEN\" \"WIRASWASTA\" \"PERTANIAN\" \n [61] \"NELAYAN\"    \"AGAMA_DAN\"  \"PELAJAR_MA\" \"TENAGA_KES\" \"PENSIUNAN\" \n [66] \"LAINNYA\"    \"GENERATED\"  \"KODE_DES_1\" \"BELUM_\"     \"MENGUR_\"   \n [71] \"PELAJAR_\"   \"PENSIUNA_1\" \"PEGAWAI_\"   \"TENTARA\"    \"KEPOLISIAN\"\n [76] \"PERDAG_\"    \"PETANI\"     \"PETERN_\"    \"NELAYAN_1\"  \"INDUSTR_\"  \n [81] \"KONSTR_\"    \"TRANSP_\"    \"KARYAW_\"    \"KARYAW1\"    \"KARYAW1_1\" \n [86] \"KARYAW1_12\" \"BURUH\"      \"BURUH_\"     \"BURUH1\"     \"BURUH1_1\"  \n [91] \"PEMBANT_\"   \"TUKANG\"     \"TUKANG_1\"   \"TUKANG_12\"  \"TUKANG__13\"\n [96] \"TUKANG__14\" \"TUKANG__15\" \"TUKANG__16\" \"TUKANG__17\" \"PENATA\"    \n[101] \"PENATA_\"    \"PENATA1_1\"  \"MEKANIK\"    \"SENIMAN_\"   \"TABIB\"     \n[106] \"PARAJI_\"    \"PERANCA_\"   \"PENTER_\"    \"IMAM_M\"     \"PENDETA\"   \n[111] \"PASTOR\"     \"WARTAWAN\"   \"USTADZ\"     \"JURU_M\"     \"PROMOT\"    \n[116] \"ANGGOTA_\"   \"ANGGOTA1\"   \"ANGGOTA1_1\" \"PRESIDEN\"   \"WAKIL_PRES\"\n[121] \"ANGGOTA1_2\" \"ANGGOTA1_3\" \"DUTA_B\"     \"GUBERNUR\"   \"WAKIL_GUBE\"\n[126] \"BUPATI\"     \"WAKIL_BUPA\" \"WALIKOTA\"   \"WAKIL_WALI\" \"ANGGOTA1_4\"\n[131] \"ANGGOTA1_5\" \"DOSEN\"      \"GURU\"       \"PILOT\"      \"PENGACARA_\"\n[136] \"NOTARIS\"    \"ARSITEK\"    \"AKUNTA_\"    \"KONSUL_\"    \"DOKTER\"    \n[141] \"BIDAN\"      \"PERAWAT\"    \"APOTEK_\"    \"PSIKIATER\"  \"PENYIA_\"   \n[146] \"PENYIA1\"    \"PELAUT\"     \"PENELITI\"   \"SOPIR\"      \"PIALAN\"    \n[151] \"PARANORMAL\" \"PEDAGA_\"    \"PERANG_\"    \"KEPALA_\"    \"BIARAW_\"   \n[156] \"WIRASWAST_\" \"LAINNYA_12\" \"LUAS_DESA\"  \"KODE_DES_3\" \"DESA_KEL_1\"\n[161] \"KODE_12\"    \"geometry\"  \n\n\nThe original data from the Indonesia Geospasial data portal has a lot of features. However, for the purpose of our study, we are only concerned about the first 9 columns (up to JUMLAH_PEN = Total Population). Hence, to make it easier to work with our data, we will only select the first 9 columns.\n\njkt_sf <- jkt_sf %>% dplyr::select(c(0:9))\n\n\n\nCorrecting projection information\n\nst_crs(jkt_sf)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nInspecting the CRS of the jkt spatial dataframe that we created, it appears that it is using the WGS 84 projection system with EPSG 4326. However, we want to use Indonesia’s national Projected Coordinate System of DGN95 / Indonesia TM-3 zone 54.1, which is EPSG 23845. Therefore, we need to re-project it using st_transform().\n\njkt_sf <- jkt_sf %>% st_transform(crs=23845)\nst_crs(jkt_sf)\n\nCoordinate Reference System:\n  User input: EPSG:23845 \n  wkt:\nPROJCRS[\"DGN95 / Indonesia TM-3 zone 54.1\",\n    BASEGEOGCRS[\"DGN95\",\n        DATUM[\"Datum Geodesi Nasional 1995\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4755]],\n    CONVERSION[\"Indonesia TM-3 zone 54.1\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",139.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9999,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",200000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",1500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"easting (X)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"northing (Y)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre.\"],\n        AREA[\"Indonesia - onshore east of 138°E.\"],\n        BBOX[-9.19,138,-1.49,141.01]],\n    ID[\"EPSG\",23845]]\n\n\n\n\nConfining area of study\n\ntmap_mode('plot')\ntm_shape(jkt_sf) + \n  tm_polygons(\"KAB_KOTA\") \n\n\n\n\nAs mentioned in the Context section, DKI Jakarta includes Kabupaten Kepulauan Seribu - an archipelago of smaller islands located off-shore of the rest of the cities located in mainland Java. As we will be doing some neighbour calculations, in the interest of simplicity, we will exclude Kepulauan Seribu from the analysis. We will also exclude Danau Sunter.\n\njkt_sf <- jkt_sf %>% filter(`KAB_KOTA` %in% c('JAKARTA BARAT',\n                                              'JAKARTA PUSAT',\n                                              'JAKARTA SELATAN',\n                                              'JAKARTA TIMUR',\n                                              'JAKARTA UTARA'))\n\n\ntm_shape(jkt_sf) + tm_polygons()"
  },
  {
    "objectID": "Take-Home-Exercises/exe-02/THE2.html#aspatial-data-1",
    "href": "Take-Home-Exercises/exe-02/THE2.html#aspatial-data-1",
    "title": "Take Home Exercise 2: Spatio-temporal Analysis of Vaccination Trends in DKI Jakarta",
    "section": "Aspatial Data",
    "text": "Aspatial Data\n\nInspecting the data\nThe aspatial data contains 35 columns.\n\n\n\n\n\n\nExplanation (click to expand)\n\n\n\n\n\n\nDATE: The date from which the data is taken (according to the excel sheets)\nKODE_KELURAHAN: Sub-district code\nWILAYAH KOTA: City\nKECAMATAN: District\nKELURAHAN: Sub-district\nSASARAN: Target population\nBELUM VAKSIN: Unvaccinated\nJUMLAH DOSIS 1: Number of people who have been given the first dose up to that point\nJUMLAH DOSIS 2: Number of people who have been given the second dose up to that point\nJUMLAH DOSIS 3: Number of people who have been given the third dose up to that point\nTOTAL VAKSIN DIBERIKAN: Total number of vaccine given up to that point\nLANSIA (DOSIS 1 / DOSIS 2 / TOTAL VAKSIN DIBERIKAN / DOSIS 3): Elderly (first dose / second dose / total / third dose)\nPELAYAN PUBLIK (DOSIS 1 / DOSIS 2 / TOTAL VAKSIN DIBERIKAN / DOSIS 3): Public worker (first dose / second dose / total / third dose)\nGOTONG ROYONG (DOSIS 1 / DOSIS 2 / TOTAL VAKSIN DIBERIKAN / DOSIS 3): Vaccination under the Gotong Royong scheme (first dose / second dose / total / third dose)\nTENAGA KESAHATAN (DOSIS 1 / DOSIS 2 / TOTAL VAKSIN DIBERIKAN / DOSIS 3): Healthcare worker (first dose / second dose / total / third dose)\nTAHAPAN 3 (DOSIS 1 / DOSIS 2 / TOTAL VAKSINASI DIBERIKAN / DOSIS 3): Stage 3 - General public (first dose / second dose / total / third dose)\nREMAJA (DOSIS 1 / DOSIS 2 / TOTAL VAKSINASI DIBERIKAN / DOSIS 3): Teenagers (first dose / second dose / total / third dose)\n\n\n\n\n\nglimpse(vaccine)\n\nRows: 3,216\nColumns: 35\n$ DATE                                         <chr> \"27 Februari 2022\", \"27 F…\n$ `KODE KELURAHAN`                             <chr> NA, \"3172051003\", \"317304…\n$ `WILAYAH KOTA`                               <chr> NA, \"JAKARTA UTARA\", \"JAK…\n$ KECAMATAN                                    <chr> NA, \"PADEMANGAN\", \"TAMBOR…\n$ KELURAHAN                                    <chr> \"TOTAL\", \"ANCOL\", \"ANGKE\"…\n$ SASARAN                                      <dbl> 8941211, 23947, 29381, 29…\n$ `BELUM VAKSIN`                               <dbl> 1517196, 4592, 5319, 5903…\n$ `JUMLAH\\r\\nDOSIS 1`                          <dbl> 7424015, 19355, 24062, 23…\n$ `JUMLAH\\r\\nDOSIS 2`                          <dbl> 6590380, 16687, 20738, 19…\n$ `TOTAL VAKSIN\\r\\nDIBERIKAN`                  <dbl> 14014395, 36042, 44800, 4…\n$ `LANSIA\\r\\nDOSIS 1`                          <dbl> 646481, 1567, 2465, 1451,…\n$ `LANSIA\\r\\nDOSIS 2`                          <dbl> 604751, 1418, 2336, 1348,…\n$ `LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN`          <dbl> 1251232, 2985, 4801, 2799…\n$ `PELAYAN PUBLIK\\r\\nDOSIS 1`                  <dbl> 1478545, 3971, 3899, 4590…\n$ `PELAYAN PUBLIK\\r\\nDOSIS 2`                  <dbl> 1371190, 3614, 3512, 4161…\n$ `PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN`   <dbl> 2849735, 7585, 7411, 8751…\n$ `GOTONG ROYONG\\r\\nDOSIS 1`                   <dbl> 88088, 178, 178, 262, 102…\n$ `GOTONG ROYONG\\r\\nDOSIS 2`                   <dbl> 86046, 171, 179, 260, 99,…\n$ `GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN`    <dbl> 174134, 349, 357, 522, 20…\n$ `TENAGA KESEHATAN\\r\\nDOSIS 1`                <dbl> 115186, 140, 135, 348, 12…\n$ `TENAGA KESEHATAN\\r\\nDOSIS 2`                <dbl> 111623, 130, 130, 331, 12…\n$ `TENAGA KESEHATAN TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl> 226809, 270, 265, 679, 24…\n$ `TAHAPAN 3\\r\\nDOSIS 1`                       <dbl> 4232389, 11200, 14670, 13…\n$ `TAHAPAN 3\\r\\nDOSIS 2`                       <dbl> 3638187, 9327, 12227, 111…\n$ `TAHAPAN 3 TOTAL\\r\\nVAKSIN DIBERIKAN`        <dbl> 7870576, 20527, 26897, 24…\n$ `REMAJA\\r\\nDOSIS 1`                          <dbl> 863326, 2299, 2715, 2845,…\n$ `REMAJA\\r\\nDOSIS 2`                          <dbl> 778583, 2027, 2354, 2512,…\n$ `REMAJA TOTAL\\r\\nVAKSIN DIBERIKAN`           <dbl> 1641909, 4326, 5069, 5357…\n$ `JUMLAH\\r\\nDOSIS 3`                          <dbl> NA, NA, NA, NA, NA, NA, N…\n$ `LANSIA\\r\\nDOSIS 3`                          <dbl> NA, NA, NA, NA, NA, NA, N…\n$ `PELAYAN PUBLIK\\r\\nDOSIS 3`                  <dbl> NA, NA, NA, NA, NA, NA, N…\n$ `GOTONG ROYONG\\r\\nDOSIS 3`                   <dbl> NA, NA, NA, NA, NA, NA, N…\n$ `TENAGA KESEHATAN\\r\\nDOSIS 3`                <dbl> NA, NA, NA, NA, NA, NA, N…\n$ `TAHAPAN 3\\r\\nDOSIS 3`                       <dbl> NA, NA, NA, NA, NA, NA, N…\n$ `REMAJA\\r\\nDOSIS 3`                          <dbl> NA, NA, NA, NA, NA, NA, N…\n\n\n\n\nRename columns\nAs the columns in the data currently has unwanted newline characters, we can rename the columns so that they will be in a format that’s easier to work with.\n\n# use gsub(text, pattern=\"\\r\\n\", replacement=\" \") to replace newline characters with spaces\n\ncolnames(vaccine) <- colnames(vaccine) %>% gsub(pattern=\"\\r\\n\", replacement=\" \")\n\n\n\nSelecting relevant information\nMuch like the geospatial data, we want to only include data for Jakarta Barat, Jakarta Pusat, Jakarta Selatan, Jakarta Timur, and Jakarta Utara.\n\nvaccine <- vaccine %>% filter(`WILAYAH KOTA` %in% c('JAKARTA BARAT',\n                                              'JAKARTA PUSAT',\n                                              'JAKARTA SELATAN',\n                                              'JAKARTA TIMUR',\n                                              'JAKARTA UTARA'))\n\nFor the purposes of this project, we are also not too concerned about number of vaccinations given based on demographics (i.e. public workers, elderly, teenagers, etc.). Therefore, we will only be selecting columns related to administrative information and total vaccination information (i.e. SASARAN, BELUM VAKSIN, JUMLAH DOSIS 1, JUMLAH DOSIS 2, JUMLAH DOSIS 3).\n\nvaccine <- vaccine %>% dplyr::select(c(0:10, 29))\n\n\n\nJoining aspatial data together with geospatial data\nWe can join the geospatial data with the aspatial data by kelurahan.\n\njkt_vaccine <- left_join(jkt_sf, vaccine, by = c(\"DESA\" = \"KELURAHAN\"))\n\n\ntm_shape(jkt_vaccine) + \n  tm_polygons(\"JUMLAH DOSIS 1\") +\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"left\")\n\n\n\n\nViewing the map, we can see that there are some missing records. This might be due to mismatches in records.\n\nunique(vaccine$KELURAHAN[!(vaccine$KELURAHAN %in% jkt_sf$DESA)])\n\n[1] \"BALE KAMBANG\"          \"HALIM PERDANA KUSUMAH\" \"JATI PULO\"            \n[4] \"KAMPUNG TENGAH\"        \"KERENDANG\"             \"KRAMAT JATI\"          \n[7] \"PAL MERIAM\"            \"PINANG RANTI\"          \"RAWA JATI\"            \n\n\n\nunique(jkt_sf$DESA[!(jkt_sf$DESA %in% vaccine$KELURAHAN)])\n\n[1] \"KRENDANG\"             \"RAWAJATI\"             \"TENGAH\"              \n[4] \"BALEKAMBANG\"          \"PINANGRANTI\"          \"JATIPULO\"            \n[7] \"PALMERIAM\"            \"KRAMATJATI\"           \"HALIM PERDANA KUSUMA\"\n\n\n\nspelling_mismatch <- data.frame(\n  Aspatial = sort(unique(vaccine$KELURAHAN[!(vaccine$KELURAHAN %in% jkt_sf$DESA)])),\n  Geospatial = c(\"BALEKAMBANG\", \"HALIM PERDANA KUSUMA\", \"JATIPULO\", \"TENGAH\", \"KRENDANG\", \"KRAMATJATI\", \"PALMERIAM\", \"PINANGRANTI\", \"RAWAJATI\"))\n\nspelling_mismatch\n\n               Aspatial           Geospatial\n1          BALE KAMBANG          BALEKAMBANG\n2 HALIM PERDANA KUSUMAH HALIM PERDANA KUSUMA\n3             JATI PULO             JATIPULO\n4        KAMPUNG TENGAH               TENGAH\n5             KERENDANG             KRENDANG\n6           KRAMAT JATI           KRAMATJATI\n7            PAL MERIAM            PALMERIAM\n8          PINANG RANTI          PINANGRANTI\n9             RAWA JATI             RAWAJATI\n\n\nAs we can observe, the aspatial data names the kelurahan with spaces in between (e.g. RAWA JATI), while the geospatial data names them without spaces (e.g. RAWAJATI). In addition, there is a typo in the aspatial data (HALIM PERDANA KUSUMAH vs. HALIM PERDANA KUSUMA). As such, we need to standardise these names before performing a join.\n\nvaccine <- vaccine %>% \n  mutate(KELURAHAN = recode(KELURAHAN,\n                            \"BALE KAMBANG\" = \"BALEKAMBANG\",\n                            \"HALIM PERDANA KUSUMAH\" = \"HALIM PERDANA KUSUMA\",\n                            \"JATI PULO\" = \"JATIPULO\",\n                            \"KAMPUNG TENGAH\" = \"TENGAH\",\n                            \"KERENDANG\" = \"KRENDANG\",\n                            \"KRAMAT JATI\" = \"KRAMATJATI\",\n                            \"PAL MERIAM\" = \"PALMERIAM\",\n                            \"PINANG RANTI\" = \"PINANGRANTI\",\n                            \"RAWA JATI\" = \"RAWAJATI\",\n                            .default = KELURAHAN))\n\nWith this, we can join the dataframes once more.\n\njkt_vaccine <- left_join(jkt_sf, vaccine, by = c(\"DESA\" = \"KELURAHAN\"))\n\n\ntm_shape(jkt_vaccine) + \n  tm_polygons(\"JUMLAH DOSIS 1\") +\n  tm_layout(legend.outside = TRUE,\n            legend.outside.position = \"left\")\n\n\n\n\n\n\nConvert DATE column into objects\nCurrently, our DATE columns are in the character data type. For our analysis, we want them to be in a date object format. The date strings written in Bahasa Indonesia format, so to do this, we must also set our locale to use the Indonesian locale.\n\nSys.setlocale(locale=\"id\")\n\n[1] \"LC_COLLATE=id;LC_CTYPE=id;LC_MONETARY=id;LC_NUMERIC=C;LC_TIME=id\"\n\n# Create the date column\njkt_vaccine <- jkt_vaccine %>% \n  mutate(DATE = as.Date(DATE, format =\"%d %B %Y\"))"
  },
  {
    "objectID": "Take-Home-Exercises/exe-02/THE2.html#calculate-monthly-vaccination-rates",
    "href": "Take-Home-Exercises/exe-02/THE2.html#calculate-monthly-vaccination-rates",
    "title": "Take Home Exercise 2: Spatio-temporal Analysis of Vaccination Trends in DKI Jakarta",
    "section": "Calculate monthly vaccination rates",
    "text": "Calculate monthly vaccination rates\nThe monthly vaccination rate for every kelurahan is defined as the amount of people who had been given the first dose up to that point divided the target population. We might also want to find out how the amount of people vaccinated with the second dose and third dose changes over time. As such, we will also calculate their monthly rates.\n\n# Commented out because of time taken to run\n\n#first_dose_rate <- jkt_vaccine %>%\n# group_by(DESA, DATE) %>%\n#  summarise(`FIRST DOSE RATE` = sum(`JUMLAH DOSIS 1`) / SASARAN)\n\n#second_dose_rate <- jkt_vaccine %>%\n#  group_by(DESA, DATE) %>%\n#  summarise(`SECOND DOSE RATE` = sum(`JUMLAH DOSIS 2`) / SASARAN)\n\n#third_dose_rate <- jkt_vaccine %>%\n#  group_by(DESA, DATE) %>%\n#  summarise(`THIRD DOSE RATE` = sum(`JUMLAH DOSIS 3`) / SASARAN)\n\nWe can combine them into a single dataframe.\n\n# Commented out because it's dependent on the previous variables\n\n#vaccine_rates <- first_dose_rate %>% \n#  cbind(second_dose_rate$`SECOND DOSE RATE`, third_dose_rate$`THIRD DOSE RATE`) %>%\n#  rename(\n#    `FIRST DOSE RATE` = `FIRST.DOSE.RATE`,\n#    `SECOND DOSE RATE` = `second_dose_rate..SECOND.DOSE.RATE.`,\n#    `THIRD DOSE RATE` = `third_dose_rate..THIRD.DOSE.RATE.`\n#  )\n\nThen, we can save it into an RDS format so that we do not have to go through this computational bottleneck again.\n\n#saveRDS(vaccine_rates, file=\"data/rds/vaccine_rates.rds\")\n\nWe can read the file again from the RDS format.\n\nvaccine_rates <- read_rds(\"data/rds/vaccine_rates.rds\")\n\n\nglimpse(vaccine_rates)\n\nRows: 3,132\nColumns: 6\n$ DESA               <chr> \"ANCOL\", \"ANCOL\", \"ANCOL\", \"ANCOL\", \"ANCOL\", \"ANCOL~\n$ DATE               <date> 2021-07-31, 2021-08-31, 2021-09-30, 2021-10-31, 20~\n$ `FIRST DOSE RATE`  <dbl> 0.4849877, 0.6161941, 0.7207166, 0.7498225, 0.76919~\n$ `SECOND DOSE RATE` <dbl> 0.1745939, 0.3731156, 0.5585668, 0.6056709, 0.64584~\n$ `THIRD DOSE RATE`  <dbl> NA, NA, NA, NA, NA, NA, NA, NA, 0.1642795, 0.274272~\n$ geometry           <MULTIPOLYGON [m]> MULTIPOLYGON (((-3621016 69..., MULTIP~"
  },
  {
    "objectID": "Take-Home-Exercises/exe-02/THE2.html#choropleth-mapping",
    "href": "Take-Home-Exercises/exe-02/THE2.html#choropleth-mapping",
    "title": "Take Home Exercise 2: Spatio-temporal Analysis of Vaccination Trends in DKI Jakarta",
    "section": "Choropleth mapping",
    "text": "Choropleth mapping\nWe want to visualise the monthly choropleth maps for the total vaccination rate, first dose rate, second dose rate, and third dose rate. Therefore, we can create a utility function to make the process easier.\n\ncreate_choropleth_map <- function(df, varname, colpal=\"Blues\") {\n  tm_shape(df) +\n    tm_fill(varname,\n            palette = colpal,\n            style=\"quantile\") +\n    tm_facets(by=\"DATE\") +\n    tm_borders(alpha = 0.5)\n}\n\n\nFirst DoseSecond DoseThird Dose\n\n\n\ncreate_choropleth_map(vaccine_rates, \"FIRST DOSE RATE\", \"Blues\")\n\n\n\n\n\n\n\ncreate_choropleth_map(vaccine_rates, \"SECOND DOSE RATE\", \"Purples\")\n\n\n\n\n\n\n\ncreate_choropleth_map(vaccine_rates, \"THIRD DOSE RATE\", \"Oranges\")\n\n\n\n\n\n\n\n\nAnalysis\n\nTotal Vaccination Rate: We can see that as time progresses, the overall vaccination rate across the province grows higher. In August 2021, some kelurahan in North Jakarta and East Jakarta notably start having a higher vaccination rate. Then, for a period from November 2021 - February 2022, the vaccination rate seems equally distributed across the province. Afterwards, vaccination rates in South Jakarta and North Jakarta start increasing in March 2022 and spreads across the rest of the province.\nFirst Dose Rate: We can observe the same phenomenon of increase across the entire province. However, we can spot that certain kelurahan in North Jakarta and South Jakarta seem to have higher first dose vaccination rates.\nSecond Dose Rate: The vaccination rate seems to be higher around the edges of the province, particularly around South Jakarta and West Jakarta.\nThird Dose Rate: There is no data from July 2021 – February 2022, presumably because third dose vaccinations have not started yet. However, the kelurahan at the border of North Jakarta and East Jakarta and a certain kelurahan at East Jakarta seem to be among the first notably to receive a high third dose vaccination rate."
  },
  {
    "objectID": "Take-Home-Exercises/exe-02/THE2.html#computing-spatial-weights",
    "href": "Take-Home-Exercises/exe-02/THE2.html#computing-spatial-weights",
    "title": "Take Home Exercise 2: Spatio-temporal Analysis of Vaccination Trends in DKI Jakarta",
    "section": "Computing spatial weights",
    "text": "Computing spatial weights\nHCSA uses spatial weights to identify spatial clustering of high/low values in locations within a defined proximity. As such, we need to calculate a matrix of contiguity weights for each kelurahan before we can compute the local GI* statistic.\nWe will be deriving the contiguity weights with the Queen’s criterion. The Queen’s method derives its name from the Queen chess piece, so it essentially takes into account adjacent polygons horizontally, vertically, and diagonally.\nThe weights will also be inverse distance interpolated. We assume that surrounding areas are more similar to each other.\n\nwm_q <- vaccine_rates %>%\n  filter(DATE == as.Date(\"2022-06-30\")) %>% # filter for latest monthly data first\n  mutate(nb = st_contiguity(geometry), # create column of neighobrs\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1), # create column of weights\n         .before = 1)"
  },
  {
    "objectID": "Take-Home-Exercises/exe-02/THE2.html#computing-local-gi-statistics",
    "href": "Take-Home-Exercises/exe-02/THE2.html#computing-local-gi-statistics",
    "title": "Take Home Exercise 2: Spatio-temporal Analysis of Vaccination Trends in DKI Jakarta",
    "section": "Computing Local Gi* Statistics",
    "text": "Computing Local Gi* Statistics\nUsing the weight matrix data frame we have derived, we can now compute the local Gi* statistics.\nWe set our significance level to 0.05, so we will reject all Gi* with simulated p-value above that threshold and replace them with NA.\n\nset.seed(8008)\n\n\nFirst DoseSecond DoseThird Dose\n\n\n\nHCSA_first <- wm_q %>%\n  mutate(local_Gi = local_gstar_perm(`FIRST DOSE RATE`, nb, wt, nsim=99),\n         .before = 1) %>%\n  unnest(local_Gi) %>%\n  dplyr::select(c(gi_star, p_sim, DESA, DATE, `FIRST DOSE RATE`)) %>%\n  mutate(`p_sim` = replace(`p_sim`, `p_sim` > 0.05, NA),\n         `gi_star` = ifelse(is.na(`p_sim`), NA, `gi_star`))\n\narrange(HCSA_first, gi_star)\n\nSimple feature collection with 261 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -3644275 ymin: 663887.8 xmax: -3606237 ymax: 701380.1\nProjected CRS: DGN95 / Indonesia TM-3 zone 54.1\n# A tibble: 261 x 6\n   gi_star p_sim DESA            DATE       FIRST DO~1                  geometry\n     <dbl> <dbl> <chr>           <date>          <dbl>        <MULTIPOLYGON [m]>\n 1   -5.25  0.02 KEBON KACANG    2022-06-30      0.807 (((-3625808 687465.5, -3~\n 2   -4.51  0.02 KEBON MELATI    2022-06-30      0.783 (((-3626882 686779.9, -3~\n 3   -4.43  0.02 BENDUNGAN HILIR 2022-06-30      0.833 (((-3627088 685743.3, -3~\n 4   -3.47  0.02 PETAMBURAN      2022-06-30      0.787 (((-3628411 685042.2, -3~\n 5   -3.19  0.02 GONDANGDIA      2022-06-30      0.802 (((-3624308 687466.3, -3~\n 6   -3.12  0.04 KAMPUNG BALI    2022-06-30      0.825 (((-3625850 687583.2, -3~\n 7   -3.06  0.02 BATU AMPAR      2022-06-30      0.814 (((-3618791 676066.9, -3~\n 8   -2.98  0.02 GELORA          2022-06-30      0.839 (((-3628597 685303.7, -3~\n 9   -2.87  0.02 KEBON SIRIH     2022-06-30      0.828 (((-3623898 688271.9, -3~\n10   -2.72  0.04 MENTENG         2022-06-30      0.823 (((-3623479 686316.2, -3~\n# ... with 251 more rows, and abbreviated variable name 1: `FIRST DOSE RATE`\n\n\n\n\n\nHCSA_second <- wm_q %>%\n  mutate(local_Gi = local_gstar_perm(`SECOND DOSE RATE`, nb, wt, nsim=99),\n         .before = 1) %>%\n  unnest(local_Gi) %>% \n  dplyr::select(c(gi_star, p_sim, DESA, DATE, `SECOND DOSE RATE`)) %>%\n  mutate(`p_sim` = replace(`p_sim`, `p_sim` > 0.05, NA),\n         `gi_star` = ifelse(is.na(`p_sim`), NA, `gi_star`))\n\narrange(HCSA_second, gi_star)\n\nSimple feature collection with 261 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -3644275 ymin: 663887.8 xmax: -3606237 ymax: 701380.1\nProjected CRS: DGN95 / Indonesia TM-3 zone 54.1\n# A tibble: 261 x 6\n   gi_star p_sim DESA         DATE       SECOND DOSE~1                  geometry\n     <dbl> <dbl> <chr>        <date>             <dbl>        <MULTIPOLYGON [m]>\n 1   -4.97  0.02 CILINCING    2022-06-30         0.698 (((-3608930 700323.4, -3~\n 2   -4.00  0.02 KEBON KACANG 2022-06-30         0.708 (((-3625808 687465.5, -3~\n 3   -3.84  0.02 KALIBARU     2022-06-30         0.626 (((-3611558 700364.2, -3~\n 4   -3.77  0.02 LAGOA        2022-06-30         0.712 (((-3613975 697258.7, -3~\n 5   -3.41  0.04 SEMPER BARAT 2022-06-30         0.764 (((-3611299 695056.3, -3~\n 6   -3.31  0.02 SEMPER TIMUR 2022-06-30         0.738 (((-3610704 695221.9, -3~\n 7   -3.16  0.04 KEBON MELATI 2022-06-30         0.650 (((-3626882 686779.9, -3~\n 8   -2.96  0.02 PETAMBURAN   2022-06-30         0.664 (((-3628411 685042.2, -3~\n 9   -2.95  0.02 MARUNDA      2022-06-30         0.685 (((-3607419 701299.7, -3~\n10   -2.62  0.02 TENGAH       2022-06-30         0.701 (((-3618479 674818.7, -3~\n# ... with 251 more rows, and abbreviated variable name 1: `SECOND DOSE RATE`\n\n\n\n\n\nHCSA_third<- wm_q %>%\n  mutate(local_Gi = local_gstar_perm(`THIRD DOSE RATE`, nb, wt, nsim=99),\n         .before = 1) %>%\n  unnest(local_Gi) %>% \n  dplyr::select(c(gi_star, p_sim, DESA, DATE, `THIRD DOSE RATE`)) %>%\n  mutate(`p_sim` = replace(`p_sim`, `p_sim` > 0.05, NA),\n         `gi_star` = ifelse(is.na(`p_sim`), NA, `gi_star`))\n\narrange(HCSA_third, gi_star)\n\nSimple feature collection with 261 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -3644275 ymin: 663887.8 xmax: -3606237 ymax: 701380.1\nProjected CRS: DGN95 / Indonesia TM-3 zone 54.1\n# A tibble: 261 x 6\n   gi_star p_sim DESA             DATE       THIRD D~1                  geometry\n     <dbl> <dbl> <chr>            <date>         <dbl>        <MULTIPOLYGON [m]>\n 1   -3.15  0.02 SEMPER TIMUR     2022-06-30     0.300 (((-3610704 695221.9, -3~\n 2   -3.14  0.02 SEMPER BARAT     2022-06-30     0.324 (((-3611299 695056.3, -3~\n 3   -3.14  0.02 CILINCING        2022-06-30     0.259 (((-3608930 700323.4, -3~\n 4   -3.02  0.02 KALIBARU         2022-06-30     0.177 (((-3611558 700364.2, -3~\n 5   -2.95  0.02 LAGOA            2022-06-30     0.288 (((-3613975 697258.7, -3~\n 6   -2.53  0.02 RAWA BADAK UTARA 2022-06-30     0.284 (((-3615834 697699.9, -3~\n 7   -2.44  0.04 HARAPAN MULIA    2022-06-30     0.306 (((-3621251 689507, -362~\n 8   -2.42  0.02 MARUNDA          2022-06-30     0.239 (((-3607419 701299.7, -3~\n 9   -2.35  0.02 KEBON BAWANG     2022-06-30     0.301 (((-3617160 697993.4, -3~\n10   -2.28  0.04 MANGGARAI        2022-06-30     0.292 (((-3622058 685018.6, -3~\n# ... with 251 more rows, and abbreviated variable name 1: `THIRD DOSE RATE`"
  },
  {
    "objectID": "Take-Home-Exercises/exe-02/THE2.html#visualisation",
    "href": "Take-Home-Exercises/exe-02/THE2.html#visualisation",
    "title": "Take Home Exercise 2: Spatio-temporal Analysis of Vaccination Trends in DKI Jakarta",
    "section": "Visualisation",
    "text": "Visualisation\n\nFirst DoseSecond DoseThird Dose\n\n\n\ntmap_mode(\"plot\")\ntm_shape(HCSA_first) +\n  tm_fill(\"gi_star\", palette=\"PiYG\", midpoint=0, title=\"Gi*\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\ntm_shape(HCSA_second) +\n  tm_fill(\"gi_star\", palette=\"PiYG\", midpoint=0, title=\"Gi*\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\ntm_shape(HCSA_third) +\n  tm_fill(\"gi_star\", palette=\"PiYG\", midpoint=0, title=\"Gi*\") + \n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Take-Home-Exercises/exe-02/THE2.html#analysis-1",
    "href": "Take-Home-Exercises/exe-02/THE2.html#analysis-1",
    "title": "Take Home Exercise 2: Spatio-temporal Analysis of Vaccination Trends in DKI Jakarta",
    "section": "Analysis",
    "text": "Analysis\nIt seems that at the later stages of the vaccination program, the southern coast of Jakarta have significantly higher overall vaccination rates than the other kelurahan. Meanwhile, central Jakarta have significantly lower overall vaccination rates. It is a similar case with the second dose, but we can see the formation of a cold spot around the north eastern part of Jakarta and a new hot spot around Kelapa Gading (the area bordering North Jakarta and East Jakarta). This phenomenon carries over to the third dose.\nTherefore, we can infer that while the kelurahan near the southern coast of Jakarta have a higher number of vaccinated individuals overall, the hot spots in the second dose and third dose maps imply that people in those areas opted for the second & extra doses of vaccination. Meanwhile, the second and third doses are not given out as much in the cold spots, such as the notable cold spot around Cilincing (the far north eastern part of Jakarta)."
  },
  {
    "objectID": "Take-Home-Exercises/exe-02/THE2.html#creating-a-time-series-cube",
    "href": "Take-Home-Exercises/exe-02/THE2.html#creating-a-time-series-cube",
    "title": "Take Home Exercise 2: Spatio-temporal Analysis of Vaccination Trends in DKI Jakarta",
    "section": "Creating a Time Series Cube",
    "text": "Creating a Time Series Cube\nTo perform EHSA, we must create a time series cube out of our data. It is a way to represent spatial data in a temporal context. Using a cube, we can index spatial data by time, therefore creating a “time series” for each location.\nWe can use sfdep’s as_spacetime() method to create this data representation.\n\n# Commented out because of time taken to run\n\n#vaccine_rates_st <- vaccine_rates %>% \n#  as_spacetime(.loc_col=\"DESA\", .time_col=\"DATE\")\n\nLike the vaccine_rates dataframe, we can save it into an RDS file format as the conversion takes a long time.\n\n# Commented out because it depends on previous commented code\n\n#saveRDS(vaccine_rates_st, file=\"data/rds/vaccine_rates_st.rds\")\n\nWe can load it again from the RDS file. It will retain being a spacetime object.\n\nvaccine_rates_st <- read_rds(\"data/rds/vaccine_rates_st.rds\")\nis_spacetime_cube(vaccine_rates_st)\n\n[1] TRUE"
  },
  {
    "objectID": "Take-Home-Exercises/exe-02/THE2.html#computing-spatial-weights-1",
    "href": "Take-Home-Exercises/exe-02/THE2.html#computing-spatial-weights-1",
    "title": "Take Home Exercise 2: Spatio-temporal Analysis of Vaccination Trends in DKI Jakarta",
    "section": "Computing spatial weights",
    "text": "Computing spatial weights\nJust as we did in the HCSA, we need to calculate a matrix of spatial weights. We will be using the Queen’s method and inverse distance interpolation.\n\nvaccine_rates_nb <- vaccine_rates_st %>%\n  activate(\"geometry\") %>% # activate geometry context\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %>%  # create neighbour and weight column\n  set_wts(\"wt\") %>%\n  set_nbs(\"nb\")"
  },
  {
    "objectID": "Take-Home-Exercises/exe-02/THE2.html#computing-local-gi",
    "href": "Take-Home-Exercises/exe-02/THE2.html#computing-local-gi",
    "title": "Take Home Exercise 2: Spatio-temporal Analysis of Vaccination Trends in DKI Jakarta",
    "section": "Computing local Gi*",
    "text": "Computing local Gi*\nUsing these new columns, we can calculate the local Gi* for each location grouped by DATE. For this analysis, we will be focusing more on the overall vaccination rate (i.e. FIRST DOSE RATE)\n\nEHSA_gi_star <- vaccine_rates_nb %>% \n  group_by(`DATE`) %>%\n  mutate(gi_star = local_gstar_perm(\n    `FIRST DOSE RATE`, nb, wt, nsim=99),\n    .before = 1) %>% \n  unnest(gi_star)\n\nEHSA_gi_star\n\n# A tibble: 3,132 x 15\n# Groups:   DATE [12]\n   gi_star    e_gi       var_gi     p_value p_sim p_fold~1 skewn~2 kurto~3 DESA \n     <dbl>   <dbl>        <dbl>       <dbl> <dbl>    <dbl>   <dbl>   <dbl> <chr>\n 1   2.00  0.00382 0.0000000147 0.0451       0.06     0.03 -0.225   0.153  ANCOL\n 2  -0.901 0.00382 0.0000000203 0.368        0.32     0.16  0.346  -0.491  ANGKE\n 3  -3.84  0.00382 0.0000000299 0.000124     0.02     0.01  0.345   0.255  BALE~\n 4  -3.46  0.00382 0.0000000151 0.000536     0.02     0.01 -0.0937 -0.257  BALI~\n 5  -1.08  0.00383 0.0000000281 0.280        0.3      0.15 -0.371  -0.214  BAMB~\n 6   0.984 0.00383 0.0000000131 0.325        0.32     0.16 -0.114   0.271  BANG~\n 7   0.921 0.00383 0.0000000220 0.357        0.38     0.19  0.235   0.177  BARU \n 8  -5.08  0.00384 0.0000000172 0.000000379  0.02     0.01 -0.265  -0.223  BATU~\n 9  -1.00  0.00384 0.0000000200 0.316        0.28     0.14  0.0723  0.480  BEND~\n10  -4.04  0.00386 0.0000000154 0.0000534    0.02     0.01 -0.186  -0.0200 BIDA~\n# ... with 3,122 more rows, 6 more variables: DATE <date>,\n#   `FIRST DOSE RATE` <dbl>, `SECOND DOSE RATE` <dbl>, `THIRD DOSE RATE` <dbl>,\n#   wt <list>, nb <list>, and abbreviated variable names 1: p_folded_sim,\n#   2: skewness, 3: kurtosis"
  },
  {
    "objectID": "Take-Home-Exercises/exe-02/THE2.html#mann-kendall-test",
    "href": "Take-Home-Exercises/exe-02/THE2.html#mann-kendall-test",
    "title": "Take Home Exercise 2: Spatio-temporal Analysis of Vaccination Trends in DKI Jakarta",
    "section": "Mann-Kendall Test",
    "text": "Mann-Kendall Test\nUsing the Mann-Kendall statistical test, we can assess whether a set of values is increasing or decreasing over time. One advantage of this test is that the data does not need to conform to any specific distribution.\n\nH0: There is no monotonic trend in the series.\nH1: A trend exists, be it positive, negative, or non-null.\nSignificance level: 0.05\n\nFor this study, we will be selecting 3 kelurahans of interest.\n\nSelecting Study Area\nTo get an idea on which kelurahan we should pick, we can check the highest vaccination rate (i.e. FIRST DOSE RATE) at different stages of the vaccination program\nEarly (September 2021):\n\nvaccine_rates %>% \n  filter(DATE == as.Date(\"2021-09-30\")) %>% \n  top_n(5, `FIRST DOSE RATE`) %>%\n  arrange(desc(`FIRST DOSE RATE`)) %>%\n  dplyr::pull(DESA)\n\n[1] \"HALIM PERDANA KUSUMA\" \"KELAPA GADING TIMUR\"  \"PEGANGSAAN DUA\"      \n[4] \"KAMAL MUARA\"          \"GLODOK\"              \n\n\nMiddle (January 2022):\n\nvaccine_rates %>% \n  filter(DATE == as.Date(\"2022-01-31\")) %>% \n  top_n(5, `FIRST DOSE RATE`) %>%\n  arrange(desc(`FIRST DOSE RATE`)) %>%\n  dplyr::pull(DESA)\n\n[1] \"HALIM PERDANA KUSUMA\" \"SRENGSENG SAWAH\"      \"MANGGARAI SELATAN\"   \n[4] \"GLODOK\"               \"TEBET TIMUR\"         \n\n\nLate (June 2022):\n\nvaccine_rates %>% \n  filter(DATE == as.Date(\"2022-06-30\")) %>% \n  top_n(5, `FIRST DOSE RATE`) %>%\n  arrange(desc(`FIRST DOSE RATE`)) %>%\n  dplyr::pull(DESA)\n\n[1] \"HALIM PERDANA KUSUMA\" \"SRENGSENG SAWAH\"      \"MANGGARAI SELATAN\"   \n[4] \"MALAKA SARI\"          \"GLODOK\"              \n\n\nWe find that HALIM PERDANA KUSUMA seem to have the highest vaccination rate from the early stage of the vaccination program to the later stages. Additionally, GLODOK are also present as one of the top 5 in all the stages. We find that MANGGARAI SELATAN increases to being one of the top 5 kelurahan with the highest vaccination rate from the middle stage of the vaccination program to the final stage, but it was not included in the beginning.\nHence, we will be focusing our analysis on these three kelurahan.\n\n\nPerforming Mann-Kendall Test\n\nHalim Perdana KusumaGlodokManggarai Selatan\n\n\n\nEHSA_cbg_hpk <- EHSA_gi_star %>% \n  ungroup() %>% \n  filter(DESA == \"HALIM PERDANA KUSUMA\") |> \n  select(DESA, DATE, gi_star)\n\n\nggplot(data = EHSA_cbg_hpk, \n       aes(x = DATE, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\n\n\nEHSA_cbg_hpk %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>% \n  tidyr::unnest_wider(mk)\n\n# A tibble: 1 x 5\n    tau     sl     S     D  varS\n  <dbl>  <dbl> <dbl> <dbl> <dbl>\n1 0.545 0.0164    36  66.0  213.\n\n\n\n\n\nEHSA_cbg_glodok <- EHSA_gi_star %>% \n  ungroup() %>% \n  filter(DESA == \"GLODOK\") |> \n  select(DESA, DATE, gi_star)\n\n\nggplot(data = EHSA_cbg_glodok, \n       aes(x = DATE, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\n\n\nEHSA_cbg_glodok %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>% \n  tidyr::unnest_wider(mk)\n\n# A tibble: 1 x 5\n     tau     sl     S     D  varS\n   <dbl>  <dbl> <dbl> <dbl> <dbl>\n1 -0.545 0.0164   -36  66.0  213.\n\n\n\n\n\nEHSA_cbg_ms<- EHSA_gi_star %>% \n  ungroup() %>% \n  filter(DESA == \"MANGGARAI SELATAN\") |> \n  select(DESA, DATE, gi_star)\n\n\nggplot(data = EHSA_cbg_ms, \n       aes(x = DATE, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\n\n\nEHSA_cbg_ms %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>% \n  tidyr::unnest_wider(mk)\n\n# A tibble: 1 x 5\n    tau       sl     S     D  varS\n  <dbl>    <dbl> <dbl> <dbl> <dbl>\n1 0.758 0.000779    50  66.0  213.\n\n\n\n\n\n\n\nAnalysis\n\nHALIM PERDANA KUSUMA: By the graph of Gi* plotted against date, we can see somewhat of an upwards trend. This is statistically confirmed by the Mann-Kendall Test. We can reject the null hypothesis that there is no monotonic trend.\nGLODOK: By the graph of Gi* plotted against date, we can see somewhat of an downwards trend. This is statistically confirmed by the Mann-Kendall Test. We can reject the null hypothesis that there is no monotonic trend. Therefore, we can infer that as time goes by, the rate of vaccination in Glodok gradually decreases in comparison to the other kelurahan.\nMANGGARAI SELATAN: By the graph of Gi* plotted against date, we can see somewhat of an upwards trend. This is statistically confirmed by the Mann-Kendall Test. We can reject the null hypothesis that there is no monotonic trend."
  },
  {
    "objectID": "Take-Home-Exercises/exe-02/THE2.html#ehsa-analysis-on-all-kelurahan",
    "href": "Take-Home-Exercises/exe-02/THE2.html#ehsa-analysis-on-all-kelurahan",
    "title": "Take Home Exercise 2: Spatio-temporal Analysis of Vaccination Trends in DKI Jakarta",
    "section": "EHSA Analysis on all kelurahan",
    "text": "EHSA Analysis on all kelurahan\nWe can perform emerging hotspot analysis on all kelurahan using sfdep’s emerging_hostpot_analysis() function.\n\nEHSA <- emerging_hotspot_analysis(\n  x = vaccine_rates_st, \n  .var = \"FIRST DOSE RATE\", \n  k = 1, \n  nsim = 99\n)\n\nVisualise the distribution of EHSA classes\n\nggplot(data = EHSA,\n       aes(x = classification)) +\n  geom_bar(fill=\"light blue\")\n\n\n\n\n\njkt_EHSA <- jkt_sf %>%\n  left_join(EHSA,\n            by = c(\"DESA\" = \"location\")) %>%\n   mutate(`p_value` = replace(`p_value`, `p_value` > 0.05, NA),\n          `classification` = ifelse(is.na(`p_value`), NA, `classification`))\n\ntmap_mode(\"plot\")\ntm_shape(jkt_EHSA) +\n  tm_fill(\"classification\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nAnalysis\nA majority of the kelurahan, especially around the coast, seem to be in the form of an oscillating hot spot, where they become a statistically significant hot spot at the final time step despite being a statistically significant cold spot for the time steps before it. Whereas a few kelurahan in West Jakarta and North Jakarta are oscillating cold spots, which is the reverse of oscillating hot spots. A lot of the kelurahan in East Jakarta and West Jakarta are also sporadic cold spots, which means they are a statistically significant cold spot at the final time step with a history of being on-and-off cold spots.\n\nfilter(jkt_EHSA, classification == \"intensifying hotspot\")$DESA\n\n[1] \"JAGAKARSA\"\n\n\nNotably, there is also one kelurahan (JAGAKARSA) that follows the intensifying hot spot pattern, which means it is a significant hot spot most of the time.\nIn summary, the vaccination rates increase closer to the south-east coast of Jakarta, whereas West Jakarta seem to be cold spots with either oscillations or are sporadically cold."
  },
  {
    "objectID": "Take-Home-Exercises/exe-03/data/geospatial/MPSZ-2019/MPSZ-2019.html",
    "href": "Take-Home-Exercises/exe-03/data/geospatial/MPSZ-2019/MPSZ-2019.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take-Home-Exercises/exe-03/THE3.html",
    "href": "Take-Home-Exercises/exe-03/THE3.html",
    "title": "Take Home Exercise 3: Geographically Weighted Prediction of HDB Resale Prices",
    "section": "",
    "text": "Housing is one of the most basic and essential need for everyone. In Singapore, public housing plays a critical role in meeting the housing needs of the population. One common way of acquiring public housing in Singapore is through the resale market. Many Singaporeans choose to purchase resale HDB flats because of their affordability and relatively short waiting time compared to new flats. As such, the resale market is a critical component of the overall public housing market in Singapore.\nThe cost of housing is a significant expense for most individuals and families. It is also a major investment for people. As such, understanding the factors that affect the resale prices is important for individuals to make informed decisions when making a purchase. There are many factors influencing the price of housing, whether it be the condition of the economy in general, structural factors (variables related to the property itself), or locational factors (variables related to the positioning of the HDB units).\nThis project aims to build predictive models of housing resale prices. Two types of models will be explored: conventional OLS regression and geographically-weighted regression."
  },
  {
    "objectID": "Take-Home-Exercises/exe-03/THE3.html#packages",
    "href": "Take-Home-Exercises/exe-03/THE3.html#packages",
    "title": "Take Home Exercise 3: Geographically Weighted Prediction of HDB Resale Prices",
    "section": "Packages",
    "text": "Packages\nThe R packages used in this project are:\n\noslrr: for analysing ordinary least squares regression models\nggpubr: for creating production-ready ggplot2 graphs\nsf: for importing, managing, and processing geospatial data.\nsfdep & spdep: for analysing spatial dependencies\nGWmodel: for calibrating geographically-weighted models\ntmap: creating thematic maps\ntidyverse: a family of other R packages for performing data science tasks such as importing, wrangling, and visualising data.\ngtsummary: for creating publication-ready summary tables\nhttr: for making HTTP requests (used for retrieving information from OneMap API)\njsonlite: for processing JSON format into R data types\nrvest: for performing web-scraping (used to scrape the data of the top primary schools)\n\n\n\nCode\npacman::p_load(olsrr, ggpubr, sf, sfdep, spdep, GWmodel, tmap, tidyverse, gtsummary, httr, jsonlite, rvest, SpatialML)"
  },
  {
    "objectID": "Take-Home-Exercises/exe-03/THE3.html#geospatial-data",
    "href": "Take-Home-Exercises/exe-03/THE3.html#geospatial-data",
    "title": "Take Home Exercise 3: Geographically Weighted Prediction of HDB Resale Prices",
    "section": "Geospatial Data",
    "text": "Geospatial Data\nWe will be using a number of geospatial data as independent locational factors to predict HDB resale prices. The datasets used are:\n\nFrom data.gov.sg:\n\nLocation of Hawker Centres\nLocation of Eldercare centres\nLocation of Parks\n\nFrom dataportal.asia (also taken from data.gov.sg):\n\nLocation of Childcare centres\nLocation of Supermarkets\nLocation of Pre-schools\nLocation of Kindergartens\n\nFrom LTA Data Mall:\n\nLocation of Bus Stops - 2023\nLocation of MRT Stations exit\n\n\n\n\nCode\nsf_hawker_centres <- st_read(\"data/geospatial/hawker-centres-kml.kml\") %>% \n  st_transform(3414)\n\nsf_eldercare <- st_read(dsn = \"data/geospatial/Eldercare\", layer = \"ELDERCARE\") %>% \n  st_transform(3414)\n\nsf_parks <- st_read(dsn = \"data/geospatial/parks.kml\") %>% \n  st_transform(3414)\n\nsf_childcare <- st_read(dsn = \"data/geospatial/childcare.geojson\") %>% \n  st_transform(3414)\n\nsf_supermarkets <- st_read(dsn = \"data/geospatial/supermarkets.kml\") %>% \n  st_transform(3414)\n\nsf_preschools <- st_read(dsn = \"data/geospatial/preschools-location.kml\") %>% \n  st_transform(3414)\n\nsf_kindergartens <- st_read(dsn = \"data/geospatial/kindergartens.kml\") %>% \n  st_transform(3414)\n\nsf_bus_stop <- st_read(dsn = \"data/geospatial/BusStop_Feb2023\", layer = \"BusStop\") %>% \n  st_transform(3414)\n\nsf_mrt <- st_read(dsn = \"data/geospatial/TrainStationExit\", layer = \"Train_Station_Exit_Layer\") %>% \n  st_transform(3414)\n\n\nAdditionally, we need the geospatial polygon data for Singapore’s region. For this, we use Master Plan 2019 Subzone Boundary, which contains the geographical boundary of Singapore at the planning subzone level. This particular version of data was provided by Prof. Kam Tin Seong.\n\n\nCode\nmpsz <- st_read(dsn=\"data/geospatial/MPSZ-2019\", layer=\"MPSZ-2019\") %>%\n  st_transform(3414)"
  },
  {
    "objectID": "Take-Home-Exercises/exe-03/THE3.html#aspatial-data",
    "href": "Take-Home-Exercises/exe-03/THE3.html#aspatial-data",
    "title": "Take Home Exercise 3: Geographically Weighted Prediction of HDB Resale Prices",
    "section": "Aspatial Data",
    "text": "Aspatial Data\nSome of the locational factors are not in the form of geospatial data. Rather, they are in the form of CSVs with coordinates. Those datasets are:\n\nPrimary Schools (taken from data.world from Hui Xiang Chua)\nSingapore Mall Coordinates (taken from Mall SVY21 Coordinates Web Scraper)\n\nWe will convert the coordinate data to sf format by using st_as_sf(), and st_transform().\n\n\nCode\nsf_malls <- read_csv(\"data/aspatial/mall_coordinates_updated.csv\") %>%\n  dplyr::select(c(\"name\", \"longitude\", \"latitude\")) %>%\n  st_as_sf(coords=c(\"longitude\", \"latitude\"), crs=4326) %>%\n  st_transform(3414)\n\nsf_primary_schools <- read_csv(\"data/aspatial/primaryschoolsg.csv\") %>%\n  dplyr::select(c(0:8)) %>%\n  st_as_sf(coords=c(\"Longitude\", \"Latitude\"), crs=4326) %>%\n  st_transform(3414)\n\n\nMost importantly, our core dataset is the HDB Resale Flat Prices provided by data.gov.sg. The distribution of housing prices are dependent on sub-markets. For instance, 2-Room flats and 3-Room flats will have different price distributions, with 3-Room flats generally being higher. In this study, we will be focusing on 3-Room flats.\nAdditionally, we will only be looking at 1 January 2021 to 31 December 2022 for train data and January-February 2023 for test data. For now, we will import them into one dataframe to make preprocessing easier.\n\n\nCode\nhdb_resale <- read_csv(\"data/aspatial/resale-flat-prices.csv\") %>%\n  filter(month >= \"2021-01\" & month <= \"2023-02\", \n         flat_type == \"3 ROOM\")"
  },
  {
    "objectID": "Take-Home-Exercises/exe-03/THE3.html#geospatial-data-1",
    "href": "Take-Home-Exercises/exe-03/THE3.html#geospatial-data-1",
    "title": "Take Home Exercise 3: Geographically Weighted Prediction of HDB Resale Prices",
    "section": "Geospatial Data",
    "text": "Geospatial Data\n\nInspecting the data\nFor all the locational factors, we want them to be in the format of spatial points. Therefore, let’s check if any of them are not in the form of points!\nTo do that, we create a utility function that prints out the name of the object if its geometry type does not match the one we want.\n\ncheck_geometry_type <- function(sf_obj, desired_geometry) {\n  if(st_geometry_type(sf_obj, by_geometry = FALSE) != desired_geometry) {\n    print(deparse(substitute(sf_obj))) # print name of object\n  }\n}\n\n\n\nCode\ncheck_geometry_type(sf_bus_stop, \"POINT\")\ncheck_geometry_type(sf_childcare, \"POINT\")\ncheck_geometry_type(sf_eldercare, \"POINT\")\ncheck_geometry_type(sf_hawker_centres, \"POINT\")\ncheck_geometry_type(sf_kindergartens, \"POINT\")\ncheck_geometry_type(sf_malls, \"POINT\")\ncheck_geometry_type(sf_parks, \"POINT\")\ncheck_geometry_type(sf_preschools, \"POINT\")\ncheck_geometry_type(sf_primary_schools, \"POINT\")\ncheck_geometry_type(sf_supermarkets, \"POINT\")\ncheck_geometry_type(sf_mrt, \"POINT\")\ncheck_geometry_type(mpsz, \"MULTIPOLYGON\")\n\n\nIt seems that all of the geospatial data is in the geometry type we expect them to be.\n\n\nCheck validity of data\nAs we saw with the MRT stations data, sometimes, we might encounter invalid geometries. To err on the side of caution, it’s good practice to check all the geospatial data for such cases.\nAgain, for convenience, we define a utility function to check the validity of geometries and print out the names of objects that are invalid.\n\ncheck_geometry_validity <- function(sf_obj) {\n  if(length(which(st_is_valid(sf_obj) == FALSE | \n                  is.na(st_is_valid(sf_obj)))) > 0) {\n    print(deparse(substitute(sf_obj))) # print name of object\n  }\n}\n\n\n\nCode\n# Check the locational factors\ncheck_geometry_validity(sf_bus_stop)\ncheck_geometry_validity(sf_childcare)\ncheck_geometry_validity(sf_eldercare)\ncheck_geometry_validity(sf_hawker_centres)\ncheck_geometry_validity(sf_kindergartens)\ncheck_geometry_validity(sf_malls)\ncheck_geometry_validity(sf_parks)\ncheck_geometry_validity(sf_preschools)\ncheck_geometry_validity(sf_primary_schools)\ncheck_geometry_validity(sf_supermarkets)\ncheck_geometry_validity(sf_mrt)\n# Check the planning subzone boundaries data\ncheck_geometry_validity(mpsz)\n\n\n[1] \"mpsz\"\n\n\nIt seems that there is a problem with the Subzone Boundaries data. Let’s fix it!\n\n\nCode\nmpsz <- st_make_valid(mpsz)\ncheck_geometry_validity(mpsz)"
  },
  {
    "objectID": "Take-Home-Exercises/exe-03/THE3.html#primary-schools-data",
    "href": "Take-Home-Exercises/exe-03/THE3.html#primary-schools-data",
    "title": "Take Home Exercise 3: Geographically Weighted Prediction of HDB Resale Prices",
    "section": "Primary Schools Data",
    "text": "Primary Schools Data\nIn Singapore, distance affects priority admission to primary schools. Hence, for families with children or expecting to have children, they will likely be concerned about the proximity of their housing unit to good primary schools.\nReferring to salary.sg’s 2022 primary school ranking, we can extract the top 20 primary schools into a separate dataframe.\nTo automate this process, we can use rvest package to scrape the data from the webpage! In doing so, we must inspect the structure of the HTML page and extract only the relevant information (in our case, the ordered list element of the page under the post ID 33132).\n\nprimary_schools_ranking <- read_html(\"https://www.salary.sg/2022/best-primary-schools-2022-by-popularity/\") %>%\n  html_nodes(xpath = paste('//*[@id=\"post-33132\"]/div[3]/div/div/ol/li') ) %>%\n  html_text() %>%\n  sapply(gsub, pattern=\" – .*\", replacement=\"\") %>%\n  sapply(gsub, pattern=\" Section)\", replacement=\")\") %>%\n  sapply(gsub, pattern=\"’\", replacement=\"'\") %>%\n  sapply(str_remove_all, pattern=\"[^A-z|0-9|[:punct:]|\\\\s]\") %>%\n  unname()\n\nprimary_schools_ranking <- primary_schools_ranking[0:20]\n\n\n\nCode\nlength(primary_schools_ranking)\n\n\n[1] 20\n\n\n\n\nCode\nprimary_schools_ranking\n\n\n [1] \"Methodist Girls' School (Primary)\"        \n [2] \"Catholic High School (Primary)\"           \n [3] \"Tao Nan School\"                           \n [4] \"Pei Hwa Presbyterian Primary School\"      \n [5] \"Holy Innocents' Primary School\"           \n [6] \"Nan Hua Primary School\"                   \n [7] \"CHIJ St. Nicholas Girls' School (Primary)\"\n [8] \"Admiralty Primary School\"                 \n [9] \"St. Hilda's Primary School\"               \n[10] \"Ai Tong School\"                           \n[11] \"Anglo-Chinese School (Junior)\"            \n[12] \"Chongfu School\"                           \n[13] \"St. Joseph's Institution Junior\"          \n[14] \"Anglo-Chinese School (Primary)\"           \n[15] \"Singapore Chinese Girls' Primary School\"  \n[16] \"Nanyang Primary School\"                   \n[17] \"South View Primary School\"                \n[18] \"Pei Chun Public School\"                   \n[19] \"Kong Hwa School\"                          \n[20] \"Rosyth School\"                            \n\n\nNow, we can filter out based on the names.\n\n\nCode\nsf_good_primary_schools <- sf_primary_schools %>%\n  filter(Name %in% primary_schools_ranking)\n\nnrow(sf_good_primary_schools)\n\n\n[1] 19\n\n\nIt seems that we are missing one primary school. Checking to see which name from the ranking list is missing from the data frame:\n\n\nCode\nunique(primary_schools_ranking[!(primary_schools_ranking %in% sf_good_primary_schools$Name)])\n\n\n[1] \"CHIJ St. Nicholas Girls' School (Primary)\"\n\n\nIn the original sf_primary_schools dataframe, it is called “CHIJ St. Nicholas Girls’ School”. Therefore, let us manually add this record to sf_good_primary_schools.\n\n\nCode\nsf_good_primary_schools <- sf_good_primary_schools %>%\n  rbind(sf_primary_schools %>% filter(Name == \"CHIJ St. Nicholas Girls' School\"))\n\n\n\n\nCode\nnrow(sf_good_primary_schools)\n\n\n[1] 20"
  },
  {
    "objectID": "Take-Home-Exercises/exe-03/THE3.html#hdb-resale-data",
    "href": "Take-Home-Exercises/exe-03/THE3.html#hdb-resale-data",
    "title": "Take Home Exercise 3: Geographically Weighted Prediction of HDB Resale Prices",
    "section": "HDB Resale Data",
    "text": "HDB Resale Data\n\nInspecting the data\n\n\nCode\nglimpse(hdb_resale)\n\n\nRows: 13,780\nColumns: 11\n$ month               <chr> \"2021-01\", \"2021-01\", \"2021-01\", \"2021-01\", \"2021-…\n$ town                <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO …\n$ flat_type           <chr> \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", …\n$ block               <chr> \"331\", \"534\", \"561\", \"170\", \"463\", \"542\", \"170\", \"…\n$ street_name         <chr> \"ANG MO KIO AVE 1\", \"ANG MO KIO AVE 10\", \"ANG MO K…\n$ storey_range        <chr> \"04 TO 06\", \"04 TO 06\", \"01 TO 03\", \"07 TO 09\", \"0…\n$ floor_area_sqm      <dbl> 68, 68, 68, 60, 68, 68, 60, 73, 67, 67, 68, 68, 73…\n$ flat_model          <chr> \"New Generation\", \"New Generation\", \"New Generatio…\n$ lease_commence_date <dbl> 1981, 1980, 1980, 1986, 1980, 1981, 1986, 1976, 19…\n$ remaining_lease     <chr> \"59 years\", \"58 years 02 months\", \"58 years 01 mon…\n$ resale_price        <dbl> 260000, 265000, 265000, 268000, 268000, 270000, 27…\n\n\nAs we can observe, there are no columns indicating the longitude and latitude coordinates of the HDB. This is troublesome, seeing that for our geospatial analysis, we need the exact location of the units. Fortunately, Singapore has the OneMap API, which allows you to query for coordinates given an address.\n\n\nRetrieving coordinates from OneMap API\nUsing the httr package, we can invoke HTTP requests. The OneMap API exposes a /search endpoint, which allows you to search for the longitude and latitude of a given address. We can create a function to invoke this API with the addresses of the HDB flats and return the coordinates.\n\nget_onemap_coords <- function(address) {\n  r <- httr::GET('https://developers.onemap.sg/commonapi/search?',\n                 query=list(searchVal=address,\n                     returnGeom='Y',\n                     getAddrDetails='Y',\n                     pageNum = '1'))\n  \n  data <- fromJSON(rawToChar(r$content))\n  res <- data$results %>%\n    head(res, n=1) %>%\n    mutate(SEARCH_KEY = address, .before = 1)\n  \n  return(res)\n}\n\nIn our data, we only have the block number and street name. Let’s create a column with the full address that we can pass into our get_onemap_coords() function!\n\n\nCode\nhdb_resale <- hdb_resale %>% \n  mutate(joined_address = paste(hdb_resale$block, hdb_resale$street_name))\n\n\nAfterwards, we can create a new dataframe from the results of our get_onemap_coords() function. To save computational time, we can just query for unique addresses.\n\n\nCode\nhdb_onemap_coords <- unique(hdb_resale$joined_address) %>%\n  lapply(get_onemap_coords)  %>%\n  Reduce(full_join, .) %>%\n  select(c(\"SEARCH_KEY\", \"BLK_NO\", \"ROAD_NAME\", \"ADDRESS\", \"POSTAL\", \"LATITUDE\", \"LONGITUDE\"))\n\n\nWe can save it into an RDS file format for future use.\n\n\nCode\nwrite_rds(hdb_onemap_coords, \"data/rds/hdb_onemap_coords.rds\")\n\n\nAfterwards, we can perform a left join of the coordinates to our original data.\n\n\nCode\nhdb_onemap_coords <- read_rds(\"data/rds/hdb_onemap_coords.rds\")\n\nhdb_resale_coords <- left_join(hdb_resale, hdb_onemap_coords, multiple=\"all\", by=c(\"joined_address\" = \"SEARCH_KEY\"))\n\n\n\n\nConverting the HDB into geospatial data\nNow that we have the longitude and latitude, we can transform it into an sf dataframe.\n\n\nCode\nsf_hdb_resale_coords <- hdb_resale_coords %>%\n  st_as_sf(coords=c(\"LONGITUDE\", \"LATITUDE\"), crs=4326) %>%\n  st_transform(3414)\n\n\n\n\nStructural Factors\nFor our analysis, we will be using these structural factors:\n\nfloor_area_sqm: area of the unit\nstorey_range: floor level of the unit\nremaining_lease: remaining lease period\nAge of the unit (to be derived from lease_commence_date)\n\n\n\nCode\nglimpse(hdb_resale_coords)\n\n\nRows: 13,780\nColumns: 18\n$ month               <chr> \"2021-01\", \"2021-01\", \"2021-01\", \"2021-01\", \"2021-…\n$ town                <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO …\n$ flat_type           <chr> \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", …\n$ block               <chr> \"331\", \"534\", \"561\", \"170\", \"463\", \"542\", \"170\", \"…\n$ street_name         <chr> \"ANG MO KIO AVE 1\", \"ANG MO KIO AVE 10\", \"ANG MO K…\n$ storey_range        <chr> \"04 TO 06\", \"04 TO 06\", \"01 TO 03\", \"07 TO 09\", \"0…\n$ floor_area_sqm      <dbl> 68, 68, 68, 60, 68, 68, 60, 73, 67, 67, 68, 68, 73…\n$ flat_model          <chr> \"New Generation\", \"New Generation\", \"New Generatio…\n$ lease_commence_date <dbl> 1981, 1980, 1980, 1986, 1980, 1981, 1986, 1976, 19…\n$ remaining_lease     <chr> \"59 years\", \"58 years 02 months\", \"58 years 01 mon…\n$ resale_price        <dbl> 260000, 265000, 265000, 268000, 268000, 270000, 27…\n$ joined_address      <chr> \"331 ANG MO KIO AVE 1\", \"534 ANG MO KIO AVE 10\", \"…\n$ BLK_NO              <chr> \"331\", \"534\", \"561\", \"170\", \"463\", \"542\", \"170\", \"…\n$ ROAD_NAME           <chr> \"ANG MO KIO AVENUE 1\", \"ANG MO KIO AVENUE 10\", \"AN…\n$ ADDRESS             <chr> \"331 ANG MO KIO AVENUE 1 TECK GHEE VIEW SINGAPORE …\n$ POSTAL              <chr> \"560331\", \"560534\", \"560561\", \"560170\", \"NIL\", \"56…\n$ LATITUDE            <chr> \"1.36211140665392\", \"1.37405846295585\", \"1.3705776…\n$ LONGITUDE           <chr> \"103.850766473498\", \"103.854168170426\", \"103.85785…\n\n\nIf we look at our HDB resale data, we can see that some of them are actually categorical variables, such as storey_range and remaining_lease. Categorical variables need some special treatment, as they cannot be input into a regression model as they are. Hence, we need to transform them into an appropriate format. Normally, this is done through one-hot encoding, in which we create dummy columns of 0’s and 1’s according to its category.\nHowever, categorical variables might also be ordered. From a glance, we can suspect that this is the case with storey_range.\n\n\nCode\nunique(sf_hdb_resale_coords$storey_range)\n\n\n [1] \"04 TO 06\" \"01 TO 03\" \"07 TO 09\" \"10 TO 12\" \"13 TO 15\" \"28 TO 30\"\n [7] \"19 TO 21\" \"16 TO 18\" \"25 TO 27\" \"22 TO 24\" \"34 TO 36\" \"40 TO 42\"\n[13] \"31 TO 33\" \"37 TO 39\" \"46 TO 48\" \"43 TO 45\"\n\n\nWhereas remaining_lease is in the form of character strings that denote number of years and months left.\nHence, it might be more useful for us to convert them into numeric values!\n\nConvert storey_range into numeric values\nBefore we convert storey_range into a numeric value, we need to decide whether we should convert it to one-hot encoding or ordinal numbers.\nThis is because we will be predicting resale prices using linear regression. Hence, the choice of encoding is important here because it will make a difference in how the calculations are done.\n\n\n\n\n\n\nOne-hot encoding\n\n\n\npredicted_housing_price = w1 * (1 or 0 if storey_range = “01 TO 03”) + w2 * (1 or 0 if storey_range = “04 TO 06”) + ….\nThis implies that each category are treated individually.\n\n\n\n\n\n\n\n\nOrdinal encoding\n\n\n\npredicted_housing_price = w * (ordinally encoded storey_range, e.g. “01 TO 03” = 1, “04 TO 06” = 2, …)\nThis implies that the higher the storey where the unit is located, the higher its resale price should be.\n\n\nTo get an idea, we can briefly visualise the mean resale price for each category.\n\n\nCode\nggplot(sf_hdb_resale_coords %>%\n         group_by(storey_range) %>%\n         summarise(mean_price = mean(resale_price)),\n       aes(x=storey_range, y=mean_price)) +\n  geom_col(fill=\"light coral\") +\n  labs(title = \"Mean Resale Price vs. Storey Range\",\n         x = \"Storey Range\",\n         y = \"Mean Resale Price\") +\n  theme(axis.text.x = element_text(angle=90))\n\n\n\n\n\nFrom this, we can suspect that there might be a positive linear correlation between the resale price and the storey range. Hence, it will be a good idea to encode it into ordinal numbers to capture this relationship.\nIn R, we have a data type called factors, which allows us to associate an order to character values. We can create an ordered factor using the ordered() function.\n\n\nCode\n# Levels of the ordered factor\nlevels(ordered(sf_hdb_resale_coords$storey_range))\n\n\n [1] \"01 TO 03\" \"04 TO 06\" \"07 TO 09\" \"10 TO 12\" \"13 TO 15\" \"16 TO 18\"\n [7] \"19 TO 21\" \"22 TO 24\" \"25 TO 27\" \"28 TO 30\" \"31 TO 33\" \"34 TO 36\"\n[13] \"37 TO 39\" \"40 TO 42\" \"43 TO 45\" \"46 TO 48\"\n\n\nUsing the mutate() function of dplyr, we can add this encoding as another column to sf_hdb_resale_coords.\n\n\nCode\nsf_hdb_resale_coords <- sf_hdb_resale_coords %>%\n  mutate(storey_range_encoded = as.numeric(ordered(storey_range)))\n\n\n\n\nConvert remaining_lease into continuous numbers\nThere are two different ways remaining_lease is represented: “xx years yy months” or “xx years”. For simplicity, we will convert the values into number of months.\nLet’s create a utility function to calculate the number of months given that format. We will use the str_split() function to split the words and calculate the total number of months.\n\ncalculate_months <- function(lease_string) {\n  str_list <- str_split(lease_string, \" \") %>% unlist()\n \n  if (length(str_list) > 2) {\n      year <- as.numeric(str_list[1])\n      month <- as.numeric(str_list[3])\n      return(year * 12 + month)\n  } else {\n    year <- as.numeric(str_list[1])\n    return(year * 12)\n  }\n}\n\nNow, we can create a new column called remaining_lease_months! We use purrr’s map_int() function to apply the scalar function to every element in the remaining_lease column.\n\n\nCode\nsf_hdb_resale_coords <- sf_hdb_resale_coords %>%\n  mutate(remaining_lease_months = map_int(remaining_lease, calculate_months))\n\n\nDerive age of the unit\nWe will derive the age of the unit by subtracting the year of the resale (taken from the month column) with the lease_commence_date. The age of the unit will be in years.\n\n\nCode\nsf_hdb_resale_coords <- sf_hdb_resale_coords %>%\n  mutate(unit_age = as.numeric(substring(month, 0, 4)) - lease_commence_date)\n\n\n\n\n\nLocational Factors\nNow, we can incorporate the locational factors into the HDB resale data. We are interested in:\n\nProximity to certain facilities\nCount of facilities within a specified radius\n\n\nProximity\nWe can get the proximity to the nearest facility by calculating a matrix of distances using sf’s st_distance() function. We calculate the lowest row-wise value of the matrix for each HDB unit in kilometers, and append it as a column to the dataframe.\n\nget_proximity <- function(origin_df, dest_df, col_name) {\n  \n  # creates a matrix of distances\n  dist_matrix <- st_distance(origin_df, dest_df)\n  \n  # Get the lowest distance for every facility\n  origin_df <- origin_df %>%\n    mutate(PROX = apply(dist_matrix, 1, min) / 1000) %>%\n    rename(!!col_name := PROX) \n  # use the !! operator to \"unquote\" the variable\n  # and := to substitute\n  \n  return(origin_df)\n}\n\n\nCBD\nOne of the locational factors of interest that we want to take into account is the proximity to Singapore’s CBD. This encompasses the Downtown Core planning area. To get the proximity, we can simply check against the centroid of the Downtown Core area.\n\n\nCode\n# Extract Downtown core\ndowntown_core <- mpsz %>%\n  filter(PLN_AREA_N == \"DOWNTOWN CORE\") %>% \n  st_combine()\n\n# Get Centroid\ndowntown_core_centroid <- downtown_core %>%\n  st_centroid()\n\n\nWe can view the centroid of the Downtown Core.\n\n\nCode\ntmap_mode(\"view\")\ntm_shape(downtown_core) +\n  tm_fill(col = \"turquoise\", alpha=0.5) +\n  tm_borders(alpha=0.5) +\ntm_shape(downtown_core_centroid) + \n  tm_bubbles(col = \"blue\") +\n  tmap_options(check.and.fix=TRUE) +\n  tm_view(set.zoom.limits=c(13,15))\n\n\n\n\n\n\n\nUsing our get_proximity() utility function, we can calculate the proximity to the CBD.\n\n\nCode\nsf_hdb_resale_coords <- sf_hdb_resale_coords %>%\n  get_proximity(downtown_core_centroid, \"PROX_CBD\")\n\n\n\n\nOther locational factors\nWe can repeat this process as it is with the other locational factors.\n\n\nCode\nsf_hdb_resale_coords <- sf_hdb_resale_coords %>%\n  get_proximity(sf_eldercare, \"PROX_ELDERCARE\") %>%\n  get_proximity(sf_hawker_centres, \"PROX_HAWKER_CENTRE\") %>%\n  get_proximity(sf_mrt, \"PROX_MRT\") %>%\n  get_proximity(sf_parks, \"PROX_PARK\") %>%\n  get_proximity(sf_malls, \"PROX_MALL\") %>%\n  get_proximity(sf_supermarkets, \"PROX_SUPERMARKET\") %>%\n  get_proximity(sf_good_primary_schools, \"PROX_GOOD_PRIMARY_SCHOOL\")\n\n\n\n\n\nCount of facilities\nFor the count of facilities, we are interested in getting:\n\nNumber of kindergartens within 350m\nNumber of childcare centres within 350m\nNumber of bus stops within 350m\nNumber of primary schools within 1km\n\nTo do this, we can again create a matrix of distances with st_distance(). Afterwards, we can find the count of values within each row of the matrix that falls within the specified distance in meters. This value will be appended to the dataframe as a new column.\n\nget_count_within <- function(origin_df, dest_df, threshold_dist, col_name){\n  \n  # creates a matrix of distances\n  dist_matrix <- st_distance(origin_df, dest_df)   \n  \n  # count the number of location_factors within threshold_dist and create new data frame\n  origin_df <- origin_df %>% \n    mutate(\n      WITHIN_DT = apply(dist_matrix, 1, function(x) sum(x <= threshold_dist))\n    ) %>%\n    rename(!!col_name := WITHIN_DT) \n  \n\n  # Return df\n  return(origin_df)\n}\n\nNow, we can calculate the number of facilities within the radius.\n\n\nCode\nsf_hdb_resale_coords <- sf_hdb_resale_coords %>% \n  get_count_within(sf_kindergartens, 350, \"WITHIN_350M_KINDERGARTEN\") %>%\n  get_count_within(sf_childcare, 350, \"WITHIN_350M_CHILDCARE\") %>%\n  get_count_within(sf_bus_stop, 350, \"WITHIN_350M_BUS\") %>%\n  get_count_within(sf_primary_schools, 1000, \"WITHIN_1KM_PRIMARY_SCHOOL\")\n\n\n\n\n\nSaving to RDS\nNow that we’re done with all the preprocessing, we should save our data for future use, so that we don’t have to go through the whole preprocessing steps again!\nFirst of all, we should only select columns relevant to our analysis.\n\n\nCode\nsf_hdb_resale_factors <- sf_hdb_resale_coords %>%\n  dplyr::select(c(\"month\", \"resale_price\", \"floor_area_sqm\", \"flat_type\",\n                  \"storey_range_encoded\", \"remaining_lease_months\", \"unit_age\",\n                  \"PROX_CBD\", \"PROX_ELDERCARE\", \"PROX_HAWKER_CENTRE\", \n                  \"PROX_MRT\", \"PROX_PARK\", \"PROX_MALL\", \"PROX_SUPERMARKET\",\n                  \"PROX_GOOD_PRIMARY_SCHOOL\", \"WITHIN_350M_KINDERGARTEN\",\n                  \"WITHIN_350M_CHILDCARE\", \"WITHIN_350M_BUS\", \n                  \"WITHIN_1KM_PRIMARY_SCHOOL\"))\n\n\nWe can then save it into RDS format,\n\n\nCode\nwrite_rds(sf_hdb_resale_factors, \"data/rds/hdb_resale_factors.rds\")\n\n\nand retrieve it when we need it!\n\n\nCode\nsf_hdb_resale_factors <- read_rds(\"data/rds/hdb_resale_factors.rds\")"
  },
  {
    "objectID": "Take-Home-Exercises/exe-03/THE3.html#locational-factors",
    "href": "Take-Home-Exercises/exe-03/THE3.html#locational-factors",
    "title": "Take Home Exercise 3: Geographically Weighted Prediction of HDB Resale Prices",
    "section": "Locational Factors",
    "text": "Locational Factors\nNow, we can incorporate the locational factors into the HDB resale data. We are interested in:\n\nProximity to certain facilities\nCount of facilities within a specified radius\n\n\nProximity\nWe can get the proximity to the nearest facility by calculating a matrix of distances using sf’s st_distance() function. We calculate the lowest row-wise value of the matrix for each HDB unit in kilometers, and append it as a column to the dataframe.\n\nget_proximity <- function(origin_df, dest_df, col_name) {\n  \n  # creates a matrix of distances\n  dist_matrix <- st_distance(origin_df, dest_df)\n  \n  # Get the lowest distance for every facility\n  origin_df <- origin_df %>%\n    mutate(PROX = apply(dist_matrix, 1, min) / 1000) %>%\n    rename(!!col_name := PROX) \n  # use the !! operator to \"unquote\" the variable\n  # and := to substitute\n  \n  return(origin_df)\n}\n\n\nCBD\nOne of the locational factors of interest that we want to take into account is the proximity to Singapore’s CBD. This encompasses the Downtown Core planning area. To get the proximity, we can simply check against the centroid of the Downtown Core area.\n\n\nCode\n# Extract Downtown core\ndowntown_core <- mpsz %>%\n  filter(PLN_AREA_N == \"DOWNTOWN CORE\") %>% \n  st_combine()\n\n# Get Centroid\ndowntown_core_centroid <- downtown_core %>%\n  st_centroid()\n\n\nWe can view the centroid of the Downtown Core.\n\n\nCode\ntmap_mode(\"view\")\ntm_shape(downtown_core) +\n  tm_fill(col = \"turquoise\", alpha=0.5) +\n  tm_borders(alpha=0.5) +\ntm_shape(downtown_core_centroid) + \n  tm_bubbles(col = \"blue\") +\n  tmap_options(check.and.fix=TRUE) +\n  tm_view(set.zoom.limits=c(13,15))\n\n\n\n\n\n\n\nUsing our get_proximity() utility function, we can calculate the proximity to the CBD.\n\n\nCode\nsf_hdb_resale_coords <- sf_hdb_resale_coords %>%\n  get_proximity(downtown_core_centroid, \"PROX_CBD\")\n\n\n\n\nOther locational factors\nWe can repeat this process as it is with the other locational factors.\n\n\nCode\nsf_hdb_resale_coords <- sf_hdb_resale_coords %>%\n  get_proximity(sf_eldercare, \"PROX_ELDERCARE\") %>%\n  get_proximity(sf_hawker_centres, \"PROX_HAWKER_CENTRE\") %>%\n  get_proximity(sf_mrt, \"PROX_MRT\") %>%\n  get_proximity(sf_parks, \"PROX_PARK\") %>%\n  get_proximity(sf_malls, \"PROX_MALL\") %>%\n  get_proximity(sf_supermarkets, \"PROX_SUPERMARKET\") %>%\n  get_proximity(sf_good_primary_schools, \"PROX_GOOD_PRIMARY_SCHOOL\")\n\n\n\n\n\nCount of facilities\nFor the count of facilities, we are interested in getting:\n\nNumber of kindergartens within 350m\nNumber of childcare centres within 350m\nNumber of bus stops within 350m\nNumber of primary schools within 1km\n\nTo do this, we can again create a matrix of distances with st_distance(). Afterwards, we can find the count of values within each row of the matrix that falls within the specified distance in meters. This value will be appended to the dataframe as a new column.\n\nget_count_within <- function(origin_df, dest_df, threshold_dist, col_name){\n  \n  # creates a matrix of distances\n  dist_matrix <- st_distance(origin_df, dest_df)   \n  \n  # count the number of location_factors within threshold_dist and create new data frame\n  origin_df <- origin_df %>% \n    mutate(\n      WITHIN_DT = apply(dist_matrix, 1, function(x) sum(x <= threshold_dist))\n    ) %>%\n    rename(!!col_name := WITHIN_DT) \n  \n\n  # Return df\n  return(origin_df)\n}\n\nNow, we can calculate the number of facilities within the radius.\n\n\nCode\nsf_hdb_resale_coords <- sf_hdb_resale_coords %>% \n  get_count_within(sf_kindergartens, 350, \"WITHIN_350M_KINDERGARTEN\") %>%\n  get_count_within(sf_childcare, 350, \"WITHIN_350M_CHILDCARE\") %>%\n  get_count_within(sf_bus_stop, 350, \"WITHIN_350M_BUS\") %>%\n  get_count_within(sf_primary_schools, 1000, \"WITHIN_1KM_PRIMARY_SCHOOL\")\n\n\n\n\nSaving to RDS\nNow that we’re done with all the preprocessing, we should save our data for future use, so that we don’t have to go through the whole preprocessing steps again!\nFirst of all, we should only select columns relevant to our analysis.\n\n\nCode\nsf_hdb_resale_factors <- sf_hdb_resale_coords %>%\n  dplyr::select(c(\"month\", \"resale_price\", \"floor_area_sqm\", \"flat_type\",\n                  \"storey_range_encoded\", \"remaining_lease_months\", \"unit_age\",\n                  \"PROX_CBD\", \"PROX_ELDERCARE\", \"PROX_HAWKER_CENTRE\", \n                  \"PROX_MRT\", \"PROX_PARK\", \"PROX_MALL\", \"PROX_SUPERMARKET\",\n                  \"PROX_GOOD_PRIMARY_SCHOOL\", \"WITHIN_350M_KINDERGARTEN\",\n                  \"WITHIN_350M_CHILDCARE\", \"WITHIN_350M_BUS\", \n                  \"WITHIN_1KM_PRIMARY_SCHOOL\"))\n\n\nWe can then save it into RDS format,\n\n\nCode\nwrite_rds(sf_hdb_resale_factors, \"data/rds/hdb_resale_factors.rds\")\n\n\nand retrieve it when we need it!\n\n\nCode\nsf_hdb_resale_factors <- read_rds(\"data/rds/hdb_resale_factors.rds\")"
  },
  {
    "objectID": "Take-Home-Exercises/exe-03/THE3.html#locational-factors-1",
    "href": "Take-Home-Exercises/exe-03/THE3.html#locational-factors-1",
    "title": "Take Home Exercise 3: Geographically Weighted Prediction of HDB Resale Prices",
    "section": "Locational Factors",
    "text": "Locational Factors\nWe can view the locational factors in the form of interactive maps. Use the layer panel (the button on the left side of the interactive map underneath the zoom buttons) to toggle which things you want to view.\nWe can divide the locational factors into 3 categories: Care (i.e. Childcare/Eldercare) & Education (i.e. Kindegrartens, Preschools), General Amenities (i.e. Hawker Centres, Shopping Malls, Parks, Supermarkets), and Transportation (i.e. MRT Stations and Bus Stops).\n\nCare & EducationGeneral AmenitiesTransportation\n\n\n\n\nCode\ntmap_mode('view') \ntm_shape(sf_eldercare) +\n  tm_dots(col=\"blue\", alpha=0.4, id=\"NAME\") +\ntm_shape(sf_childcare) +\n  tm_dots(col=\"red\", alpha=0.4) +\ntm_shape(sf_kindergartens) +\n  tm_dots(col=\"green\", alpha=0.4) +\ntm_shape(sf_preschools) +\n  tm_dots(col=\"purple\", alpha=0.4) +\ntm_shape(sf_primary_schools) +\n  tm_dots(col=\"yellow\", alpha=0.4, id=\"Name\") +\ntm_view(set.zoom.limits=c(11,15))\n\n\n\n\n\n\n\n\n\n\n\nCode\ntmap_mode('view') \ntm_shape(sf_hawker_centres) +\n  tm_dots(col=\"blue\", alpha=0.4) +\ntm_shape(sf_malls) +\n  tm_dots(col=\"purple\", alpha=0.4, id=\"name\") +\ntm_shape(sf_parks) +\n  tm_dots(col=\"green\", alpha=0.4, id=\"Name\") +\ntm_shape(sf_supermarkets) +\n  tm_dots(col=\"turquoise\", alpha=0.4) +\ntm_view(set.zoom.limits=c(11,15))\n\n\n\n\n\n\n\n\n\n\n\nCode\ntmap_mode('view') \ntm_shape(sf_bus_stop) +\n  tm_dots(col=\"blue\", id=\"LOC_DESC\", alpha=0.4) +\ntm_shape(sf_mrt) +\n  tm_dots(col=\"yellow\", id=\"STN_NAM_DE\", alpha=0.4) +\ntm_view(set.zoom.limits=c(11,15))"
  },
  {
    "objectID": "Take-Home-Exercises/exe-03/THE3.html#hdb-resale-prices",
    "href": "Take-Home-Exercises/exe-03/THE3.html#hdb-resale-prices",
    "title": "Take Home Exercise 3: Geographically Weighted Prediction of HDB Resale Prices",
    "section": "HDB Resale Prices",
    "text": "HDB Resale Prices\nWe can visualise the distribution of HDB resale prices using histograms.\n\n\nCode\noptions(scipen = 999)\nggplot(data=sf_hdb_resale_factors, aes(x=`resale_price`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\") +\n    labs(title = \"Distribution of Resale Prices\",\n         x = \"Resale Prices\",\n         y = \"Frequency\") +\n  scale_x_continuous(labels = scales::comma)\n\n\n\n\n\nWe can see that the distribution of the prices seem to be right-skewed. We can normalise this using a log transformation. Using dplyr’s mutate() function, we can add a column of log-normalised resale price values.\n\n\nCode\nsf_hdb_resale_factors <- sf_hdb_resale_factors %>%\n  mutate(`resale_price_log` = log(resale_price))\n\n\n\n\nCode\nggplot(data=sf_hdb_resale_factors, aes(x=`resale_price_log`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\") +\n    labs(title = \"Distribution of Log(Resale Prices)\",\n         x = \"Log(Resale Prices)\",\n         y = \"Frequency\")\n\n\n\n\n\nWe can see that the post-log-normalised data is less skewed. However, for our analysis, we will still be using the original prices.\nLet’s also view the distribution of the structural factors and the locational factors over the whole market.\n\nStructuralLocational\n\n\n\n\nCode\nplot_floor_area <- ggplot(data=sf_hdb_resale_factors, aes(x=floor_area_sqm)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light green\") +\n    labs(x = \"Area of unit\",\n         y = \"Frequency\")\n\nplot_storey <- ggplot(data=sf_hdb_resale_factors, aes(x=storey_range_encoded)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light green\") +\n    labs(x = \"Storey group\",\n         y = \"Frequency\")\n\nplot_unit_age <- ggplot(data=sf_hdb_resale_factors, aes(x=unit_age)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light green\") +\n    labs(x = \"Age of unit\",\n         y = \"Frequency\")\n\nplot_remaining_lease_months <- ggplot(data=sf_hdb_resale_factors, aes(x=remaining_lease_months)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light green\") +\n    labs(x = \"Remaining lease (mths)\",\n         y = \"Frequency\")\n\nggarrange(plot_floor_area, plot_storey, plot_unit_age, plot_remaining_lease_months, ncol = 2, nrow = 2)\n\n\n\n\n\n\n\nProximity\n\n\nCode\nplot_PROX_CBD <- ggplot(data=sf_hdb_resale_factors, aes(x=PROX_CBD)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light coral\")\n\nplot_PROX_ELDERCARE <- ggplot(data=sf_hdb_resale_factors, aes(x=PROX_ELDERCARE)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light coral\")\n\nplot_PROX_HAWKER_CENTRE <- ggplot(data=sf_hdb_resale_factors, aes(x=PROX_HAWKER_CENTRE)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light coral\")\n\nplot_PROX_MRT <- ggplot(data=sf_hdb_resale_factors, aes(x=PROX_MRT)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light coral\")\n\nplot_PROX_MALL <- ggplot(data=sf_hdb_resale_factors, aes(x=PROX_MALL)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light coral\")\n\nplot_PROX_SUPERMARKET <- ggplot(data=sf_hdb_resale_factors, aes(x=PROX_SUPERMARKET)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light coral\")\n\nplot_PROX_GOOD_PRIMARY_SCHOOL <- ggplot(data=sf_hdb_resale_factors, aes(x=PROX_GOOD_PRIMARY_SCHOOL)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light coral\")\n\nggarrange(plot_PROX_CBD, plot_PROX_ELDERCARE, plot_PROX_HAWKER_CENTRE, \n          plot_PROX_MRT, plot_PROX_MALL, plot_PROX_SUPERMARKET, \n          plot_PROX_GOOD_PRIMARY_SCHOOL, ncol = 2, nrow = 4)\n\n\n\n\n\nCount within radius\n\n\nCode\nplot_WITHIN_350M_KINDERGARTEN <- ggplot(data=sf_hdb_resale_factors, aes(x=WITHIN_350M_KINDERGARTEN)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"plum\")\n\nplot_WITHIN_350M_CHILDCARE <- ggplot(data=sf_hdb_resale_factors, aes(x=WITHIN_350M_KINDERGARTEN)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"plum\")\n\nplot_WITHIN_350M_BUS <- ggplot(data=sf_hdb_resale_factors, aes(x=WITHIN_350M_BUS)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"plum\")\n\nplot_WITHIN_1KM_PRIMARY_SCHOOL <- ggplot(data=sf_hdb_resale_factors, aes(x=WITHIN_1KM_PRIMARY_SCHOOL)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"plum\")\n\nggarrange(plot_WITHIN_350M_KINDERGARTEN, plot_WITHIN_350M_CHILDCARE,\n          plot_WITHIN_350M_BUS, plot_WITHIN_1KM_PRIMARY_SCHOOL,\n          ncol = 2, nrow = 2)"
  },
  {
    "objectID": "Take-Home-Exercises/exe-03/THE3.html#correlation-analysis",
    "href": "Take-Home-Exercises/exe-03/THE3.html#correlation-analysis",
    "title": "Take Home Exercise 3: Geographically Weighted Prediction of HDB Resale Prices",
    "section": "Correlation Analysis",
    "text": "Correlation Analysis\nBefore moving on to the predictive modelling, we need to check if our independent variables are not heavily correlated. Heavily correlated features serve to increase the complexity of the model without adding much information, thus making our model more prone to errors. If there are any heavily correlated features, we need to remove them!\nWe will use the corrplot package to plot a correlation matrix of our variables.\n\n\nCode\ndraw_correlation_plot <- function(sf_df) {\n  corr_matrix <- sf_df %>%\n    select(c(\"floor_area_sqm\", 5:20)) %>%\n    st_drop_geometry() %>%\n    cor()\n  \n  return(corrplot::corrplot(corr_matrix, diag = FALSE, order = \"AOE\", method = \"number\", type = \"full\"))\n}\n\ndraw_correlation_plot(sf_hdb_resale_factors)\n\n\n\n\n\nThere appears to be a heavy negative correlation between remaining_lease_months and unit_age. This makes sense because the total remaining lease would be inversely proportional to how long the unit has existed. For example, assume that the total length of the lease is 99 years. For a unit built in 1980, its lease period would be until 2079. In the year 2021, the age of the unit would be 41 years (2021 - 1980), while the remaining lease period would be 58 years (2079 - 2021). For the purpose of this study, it would make sense to keep the remaining lease in months. Not only does it provide a more accurate measure of time by taking into account the months, people are likely to be concerned about how long they will be able to own the flat before the lease period is over. This will likely affect their decision to purchase the flat and the price.\n\n\nCode\nsf_hdb_resale_factors <- sf_hdb_resale_factors %>%\n  dplyr::select(-unit_age)"
  },
  {
    "objectID": "Take-Home-Exercises/exe-03/THE3.html#train-test-split",
    "href": "Take-Home-Exercises/exe-03/THE3.html#train-test-split",
    "title": "Take Home Exercise 3: Geographically Weighted Prediction of HDB Resale Prices",
    "section": "Train-Test Split",
    "text": "Train-Test Split\nWhen doing predictive modeling, it is not sufficient to report error metrics on the training data alone. We want to evaluate how well the model generalises to data points that it hasn’t seen before. Despite a low training error, a model might perform badly on new data points due to overfitting (i.e. it fits the training data too well that it is unable to generalise).\nAs a rule of thumb, to ensure that our evaluation is unbiased, the test set must be kept completely separate from the model training! As such, as mentioned in the Data Import section, we will be taking 1 January 2021 to 31 December 2022 for train data and January-February 2023 for test data.\nWe will also save them into RDS file format, so that we can load them for future use.\n\n\nCode\ntrain_data <- sf_hdb_resale_factors %>% \n  filter(month >= \"2021-01\" & month <= \"2022-12\") %>%\n  write_rds(\"data/rds/train_data.rds\")\n\ntest_data <- sf_hdb_resale_factors %>% \n  filter(month >= \"2023-01\" & month <= \"2023-02\") %>%\n  write_rds(\"data/rds/test_data.rds\")\n\n\nWhenever we want to use the data, we can reload a fresh copy from the RDS file.\n\n\nCode\ntrain_data <- read_rds(\"data/rds/train_data.rds\")\ntest_data <- read_rds(\"data/rds/test_data.rds\")"
  },
  {
    "objectID": "Take-Home-Exercises/exe-03/THE3.html#training-ols-multiple-linear-regression",
    "href": "Take-Home-Exercises/exe-03/THE3.html#training-ols-multiple-linear-regression",
    "title": "Take Home Exercise 3: Geographically Weighted Prediction of HDB Resale Prices",
    "section": "Training OLS Multiple Linear Regression",
    "text": "Training OLS Multiple Linear Regression\nWe can use stats package’s lm() function to fit a multiple linear regression on our data. Our dependent variable (the value we want to predict) y is resale_price, while our independent variables are all the other columns in sf_hdb_resale_factors.\n\n\nCode\nset.seed(8008)\nols_price_mlr <- lm(resale_price ~ floor_area_sqm +\n                storey_range_encoded + remaining_lease_months +\n                PROX_CBD + PROX_ELDERCARE + PROX_HAWKER_CENTRE +\n                PROX_MRT + PROX_PARK + PROX_MALL +\n                PROX_SUPERMARKET + PROX_GOOD_PRIMARY_SCHOOL + \n                WITHIN_350M_KINDERGARTEN +\n                WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                WITHIN_1KM_PRIMARY_SCHOOL,\n              data=train_data)\n\n\nLet’s save the result of this model for future use!\n\n\nCode\nwrite_rds(ols_price_mlr, \"data/model/ols_price_mlr.rds\")\n\n\n\nTrain Result Analysis\nFor the coefficients learned by the model, we set the significance level at 0.05. We can remove any variables that are statistically insignificant (i.e. p-value > 0.05).\n\n\nCode\nols_price_mlr <- read_rds(\"data/model/ols_price_mlr.rds\")\n\ntbl_regression(ols_price_mlr,\n               intercept = TRUE) %>%\n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared,\n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n-123,016\n-134,212, -111,819\n<0.001\n    floor_area_sqm\n5,047\n4,905, 5,189\n<0.001\n    storey_range_encoded\n10,602\n10,062, 11,141\n<0.001\n    remaining_lease_months\n293\n287, 299\n<0.001\n    PROX_CBD\n-7,485\n-7,757, -7,213\n<0.001\n    PROX_ELDERCARE\n-3,997\n-5,805, -2,190\n<0.001\n    PROX_HAWKER_CENTRE\n-7,476\n-9,917, -5,034\n<0.001\n    PROX_MRT\n-12,468\n-15,066, -9,869\n<0.001\n    PROX_PARK\n-7,259\n-10,006, -4,512\n<0.001\n    PROX_MALL\n-19,369\n-21,833, -16,904\n<0.001\n    PROX_SUPERMARKET\n24,607\n19,558, 29,656\n<0.001\n    PROX_GOOD_PRIMARY_SCHOOL\n-752\n-1,470, -35\n0.040\n    WITHIN_350M_KINDERGARTEN\n2,476\n1,356, 3,596\n<0.001\n    WITHIN_350M_CHILDCARE\n-2,257\n-2,862, -1,652\n<0.001\n    WITHIN_350M_BUS\n1,001\n644, 1,358\n<0.001\n    WITHIN_1KM_PRIMARY_SCHOOL\n-3,057\n-3,792, -2,321\n<0.001\n  \n  \n    \n      R² = 0.655; Adjusted R² = 0.654; AIC = 309,250; Statistic = 1,593; p-value = <0.001; σ = 51,245\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nHowever, fortunately, it seems that all of our variables are statistically significant! Let’s view a breakdown of our model’s metrics.\n\n\nCode\nols_regress(ols_price_mlr)\n\n\n                            Model Summary                              \n----------------------------------------------------------------------\nR                       0.809       RMSE                    51245.082 \nR-Squared               0.655       Coef. Var                  13.811 \nAdj. R-Squared          0.654       MSE                2626058446.567 \nPred R-Squared          0.654       MAE                     38069.849 \n----------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                          ANOVA                                           \n-----------------------------------------------------------------------------------------\n                          Sum of                                                         \n                         Squares           DF          Mean Square       F          Sig. \n-----------------------------------------------------------------------------------------\nRegression    62738198804773.688           15    4182546586984.913    1592.709    0.0000 \nResidual      33067327959175.605        12592       2626058446.567                       \nTotal         95805526763949.297        12607                                            \n-----------------------------------------------------------------------------------------\n\n                                                 Parameter Estimates                                                   \n----------------------------------------------------------------------------------------------------------------------\n                    model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n----------------------------------------------------------------------------------------------------------------------\n              (Intercept)    -123015.672      5711.993                 -21.536    0.000    -134212.048    -111819.296 \n           floor_area_sqm       5047.072        72.443        0.372     69.670    0.000       4905.073       5189.070 \n     storey_range_encoded      10601.512       275.010        0.225     38.550    0.000      10062.451      11140.574 \n   remaining_lease_months        292.701         3.126        0.642     93.643    0.000        286.574        298.828 \n                 PROX_CBD      -7485.375       138.738       -0.383    -53.953    0.000      -7757.323      -7213.428 \n           PROX_ELDERCARE      -3997.223       922.169       -0.025     -4.335    0.000      -5804.814      -2189.631 \n       PROX_HAWKER_CENTRE      -7475.594      1245.579       -0.037     -6.002    0.000      -9917.119      -5034.069 \n                 PROX_MRT     -12467.857      1325.616       -0.053     -9.405    0.000     -15066.267      -9869.447 \n                PROX_PARK      -7259.318      1401.507       -0.030     -5.180    0.000     -10006.484      -4512.151 \n                PROX_MALL     -19368.504      1257.172       -0.090    -15.406    0.000     -21832.752     -16904.255 \n         PROX_SUPERMARKET      24607.100      2575.998        0.056      9.552    0.000      19557.752      29656.449 \n PROX_GOOD_PRIMARY_SCHOOL       -752.176       366.021       -0.012     -2.055    0.040      -1469.634        -34.718 \n WITHIN_350M_KINDERGARTEN       2475.650       571.410        0.024      4.333    0.000       1355.600       3595.701 \n    WITHIN_350M_CHILDCARE      -2257.166       308.740       -0.043     -7.311    0.000      -2862.344      -1651.988 \n          WITHIN_350M_BUS       1000.977       182.280        0.030      5.491    0.000        643.681       1358.273 \nWITHIN_1KM_PRIMARY_SCHOOL      -3056.531       375.309       -0.048     -8.144    0.000      -3792.193      -2320.868 \n----------------------------------------------------------------------------------------------------------------------\n\n\nThe R2 and adjusted R2 values are around 0.65, which implies that around 65% of variance is explained by the model. The root mean square error (RMSE) between the training data and the best fit line is 51245.082."
  },
  {
    "objectID": "Take-Home-Exercises/exe-03/THE3.html#training-global-random-forest",
    "href": "Take-Home-Exercises/exe-03/THE3.html#training-global-random-forest",
    "title": "Take Home Exercise 3: Geographically Weighted Prediction of HDB Resale Prices",
    "section": "Training global Random Forest",
    "text": "Training global Random Forest\nWhen using the ranger function, we need to first extract the coordinates of the data and drop the geometry column.\n\n\nCode\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n\ntrain_data <- st_drop_geometry(train_data)\ntest_data <- st_drop_geometry(test_data)\n\n\nWe can save the coordinates to RDS for future use.\n\n\nCode\nwrite_rds(coords_train, \"data/rds/coords_train.rds\")\nwrite_rds(coords_test, \"data/rds/coords_test.rds\")\n\n\nNow, let’s train the random forest using ranger!\n\n\nCode\nset.seed(8008)\nrf <- ranger(resale_price ~ floor_area_sqm +\n                storey_range_encoded + remaining_lease_months +\n                PROX_CBD + PROX_ELDERCARE + PROX_HAWKER_CENTRE +\n                PROX_MRT + PROX_PARK + PROX_MALL +\n                PROX_SUPERMARKET + PROX_GOOD_PRIMARY_SCHOOL + \n                WITHIN_350M_KINDERGARTEN +\n                WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                WITHIN_1KM_PRIMARY_SCHOOL,\n             data=train_data,\n             num.trees = 20)\n\nwrite_rds(rf, \"data/model/price_rf.rds\")\n\n\n\nTrain Result Analysis\n\n\nCode\nrf <- read_rds(\"data/model/price_rf.rds\")\nrf\n\n\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_range_encoded +      remaining_lease_months + PROX_CBD + PROX_ELDERCARE + PROX_HAWKER_CENTRE +      PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + PROX_GOOD_PRIMARY_SCHOOL +      WITHIN_350M_KINDERGARTEN + WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +      WITHIN_1KM_PRIMARY_SCHOOL, data = train_data, num.trees = 20) \n\nType:                             Regression \nNumber of trees:                  20 \nSample size:                      12608 \nNumber of independent variables:  15 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       832391715 \nR squared (OOB):                  0.890466 \n\n\nThe R2 value is around 0.89, which implies that around 89% of the variance of the train data is explained by the model.\n\n\nCode\nsqrt(rf$prediction.error)\n\n\n[1] 28851.2\n\n\nIn addition, the root mean square error (RMSE) between the actual values of the training data resale price and its predictions is 28851.2. We see that the random forest performs significantly better than the OLS linear regression."
  },
  {
    "objectID": "Take-Home-Exercises/exe-03/THE3.html#testing-for-spatial-autocorrelation",
    "href": "Take-Home-Exercises/exe-03/THE3.html#testing-for-spatial-autocorrelation",
    "title": "Take Home Exercise 3: Geographically Weighted Prediction of HDB Resale Prices",
    "section": "Testing for spatial autocorrelation",
    "text": "Testing for spatial autocorrelation\nThe OLS model is alright, but it’s not very ideal so far (65% explained variance). We can start to suspect that this is because the OLS model is too simple to capture the complex underlying patterns behind housing resale prices, leading to high bias (read more: bias-variance tradeoff). The global level Random Forest performs much better (89% of variance).\nHowever, these global models do not take into account the possibility of the lack of spatial stationarity in this problem. That means, resale prices might actually differ between locations given the same predictors. If that is the case, then it would be better to use geographically-weighted methods, which allows for geospatial information to be factored into the predictions.\nSo, first, let’s test our hypothesis! Our null hypothesis is that the residuals are assumed to be distributed at random over geographical space.\nFirst of all, we need to extract the residuals from our OLS model and convert them into sp’s SpatialPointsDataFrame.\n\n\nCode\nols_res.sp <- read_rds(\"data/rds/train_data.rds\") %>%\n  cbind(ols_price_mlr$residuals) %>%\n  rename(MLR_RES = ols_price_mlr.residuals) %>%\n  as_Spatial()\n\n\nWe can visualise it on the map.\n\n\nCode\ntmap_mode(\"view\")\ntm_shape(ols_res.sp) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,15))\n\n\n\n\n\n\n\nLooking at the map can’t really tell us if there is an actual spatial autocorrelation, aside from identifying potential patches of green and yellow. That’s why we should verify it using Moran’s I test. Let’s take a significance value of 0.05.\nFirst, let us compute the distance-based weight matrix using spdep package. We can also use the critical_threshold() function of sfdep to make sure there are no empty neighbour sets.\n\n\nCode\nnb <- dnearneigh(coordinates(ols_res.sp), 0, critical_threshold(ols_res.sp), longlat = FALSE)\nnb_lw <- nb2listw(nb, style = 'W')\n\n\nThen, we can perform the Global Moran I test for regression using spdep’s lm.morantest() function!\n\n\nCode\nmoran_test_results <- lm.morantest(ols_price_mlr, nb_lw) %>%\n  write_rds(\"data/rds/moran_test_results.rds\")\n\n\n\n\nCode\nmoran_test_results <- read_rds(\"data/rds/moran_test_results.rds\")\nmoran_test_results\n\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = resale_price ~ floor_area_sqm + storey_range_encoded + remaining_lease_months +\nPROX_CBD + PROX_ELDERCARE + PROX_HAWKER_CENTRE + PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET +\nPROX_GOOD_PRIMARY_SCHOOL + WITHIN_350M_KINDERGARTEN + WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\nWITHIN_1KM_PRIMARY_SCHOOL, data = train_data)\nweights: nb_lw\n\nMoran I statistic standard deviate = 332.2, p-value <\n0.00000000000000022\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n 0.1791197340277 -0.0005057702306  0.0000002923805 \n\n\nThe p-value is less than our designated significance value of 0.05. As such, we can reject the null hypothesis that the residuals are randomly distributed. Since the Observed Global Moran’s I is greater than 0, we can infer that the residuals are distributed in clusters.\nHaving confirmed this, we can infer that it might be better to use geographically-weighted methods."
  },
  {
    "objectID": "Take-Home-Exercises/exe-03/THE3.html#training-geographically-weighted-random-forest-gwrf",
    "href": "Take-Home-Exercises/exe-03/THE3.html#training-geographically-weighted-random-forest-gwrf",
    "title": "Take Home Exercise 3: Geographically Weighted Prediction of HDB Resale Prices",
    "section": "Training Geographically Weighted Random Forest (GWRF)",
    "text": "Training Geographically Weighted Random Forest (GWRF)\nWe know that Random Forest performs better than OLS multiple linear regression at the global level. As such, we can try to use Geographically Weighted Random Forest to do regression on HDB resale prices. The package that we will mainly be using for this analysis is the SpatialML package.\nUsing the grf.bw() function of SpatialML, we can calibrate the best adaptive bandwidth. However, this function is computationally expensive, so we will run it on a subset of the data (1000 rows). By right, the bandwidth of using 1000 rows vs. the whole dataset would be different, but approximating it on a subset is good enough for our purposes.\n\n\nCode\nset.seed(8008)\nbw.gwrf_adaptive <- grf.bw(resale_price ~ floor_area_sqm +\n                storey_range_encoded + remaining_lease_months +\n                PROX_CBD + PROX_ELDERCARE + PROX_HAWKER_CENTRE +\n                PROX_MRT + PROX_PARK + PROX_MALL +\n                PROX_SUPERMARKET + PROX_GOOD_PRIMARY_SCHOOL + \n                WITHIN_350M_KINDERGARTEN +\n                WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                WITHIN_1KM_PRIMARY_SCHOOL, \n             train_data[0:1000,], \n             kernel=\"adaptive\",\n             coords=coords_train[0:1000,], \n             trees = 20,\n             step = 5)\n\nwrite_rds(bw.gwrf_adaptive, \"data/rds/gwrf_bw.rds\")\n\n\nAs usual, we can read the bandwidth from the saved RDS file.\n\n\nCode\nbw.gwrf_adaptive <- read_rds(\"data/rds/gwrf_bw.rds\")\n\n\nNow, we can start training the GWRF model using SpatialML’s grf() function! This will take a long time to run, so we need to make sure to save the model in an RDS file after we finish running it.\n\n\nCode\nset.seed(8008)\n\ngwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm +\n                  storey_range_encoded + remaining_lease_months +\n                  PROX_CBD + PROX_ELDERCARE + PROX_HAWKER_CENTRE +\n                  PROX_MRT + PROX_PARK + PROX_MALL +\n                  PROX_SUPERMARKET + PROX_GOOD_PRIMARY_SCHOOL + \n                  WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRIMARY_SCHOOL,\n                train_data,\n                bw=bw.gwrf_adaptive$Best.BW,\n                kernel=\"adaptive\",\n                ntree = 20,\n                coords=coords_train)\n\nwrite_rds(gwRF_adaptive, \"data/model/price_gwrf.rds\")\n\n\nTo save the time needed for computation, we can always read the model from our saved RDS file.\n\n\nCode\ngwRF_adaptive <- read_rds(\"data/model/price_gwrf.rds\")\n\n\n\nTrain Result Analysis\n\n\nCode\ngwRF_adaptive$Global.Model\n\n\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_range_encoded +      remaining_lease_months + PROX_CBD + PROX_ELDERCARE + PROX_HAWKER_CENTRE +      PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + PROX_GOOD_PRIMARY_SCHOOL +      WITHIN_350M_KINDERGARTEN + WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +      WITHIN_1KM_PRIMARY_SCHOOL, data = train_data, num.trees = 20,      mtry = 5, importance = \"impurity\", num.threads = NULL) \n\nType:                             Regression \nNumber of trees:                  20 \nSample size:                      12608 \nNumber of independent variables:  15 \nMtry:                             5 \nTarget node size:                 5 \nVariable importance mode:         impurity \nSplitrule:                        variance \nOOB prediction error (MSE):       789630955 \nR squared (OOB):                  0.8960929 \n\n\n\n\nCode\nsqrt(gwRF_adaptive$Global.Model$prediction.error)\n\n\n[1] 28100.37\n\n\nThe global R2 value is 0.896 (which is roughly 90% of explained variance). The RMSE between the actual values of the training data resale price and its predictions is 28100.37. This is slightly better than the global-level random forest that we computed earlier.\nWe can also access the local goodness of fit measures by taking the LGofFit property of the model. We can then plot the local R2 values for each point in the train data set.\n\n\nCode\ngwRF_r2 <- read_rds(\"data/rds/train_data.rds\") %>%\n  cbind(gwRF_adaptive$LGofFit$LM_Rsq100) %>%\n  rename(`R2`= `gwRF_adaptive.LGofFit.LM_Rsq100`)\n\ntmap_mode(\"view\") \ntm_shape(gwRF_r2) +\n  tm_dots(col=\"R2\", style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,15))\n\n\n\n\n\n\n\nWe can see that for most units around the Downtown Core and southern region, the R2 value is quite high. However, the model has difficulty explaining the variance of units in the northern region."
  },
  {
    "objectID": "Take-Home-Exercises/exe-03/THE3.html#evaluation",
    "href": "Take-Home-Exercises/exe-03/THE3.html#evaluation",
    "title": "Take Home Exercise 3: Geographically Weighted Prediction of HDB Resale Prices",
    "section": "Evaluation",
    "text": "Evaluation\n\nOLS Multiple Linear Regression\nWe can use the predict.lm() function of the stats package to run inference on our test data and save it into RDS format.\n\n\nCode\nols_pred <- predict.lm(ols_price_mlr, test_data) %>%\n  write_rds(\"data/model/price_ols_pred.rds\")\n\n\n\n\nRandom Forest (RF)\nWe can use the predict() function of the ranger package to run inference on our test data and save it into RDS format.\n\n\nCode\nrf_pred <- predict(rf, test_data) %>%\n  write_rds(\"data/model/price_rf_pred.rds\")\n\n\n\n\nGeographically Weighted Random Forest (GWRF)\nTo call the predict function of the Geographically Weighted Random Forest, we need to drop the geometry in our column and bind the coordinates as normal columns.\n\n\nCode\ntest_data <- cbind(test_data, coords_test) %>% st_drop_geometry()\n\n\nAfterwards, we can predict prices for our test data using predict.grf() method!\n\n\nCode\ngwRF_pred <- predict.grf(gwRF_adaptive,\n                         test_data,\n                         x.var.name=\"X\",\n                         y.var.name=\"Y\",\n                         local.w=1,\n                         global.w=0)\n\nwrite_rds(gwRF_pred, \"data/model/price_gwrf_pred.rds\")\n\n\n\n\nPerformance Comparison\nLet’s join the resale price and predicted prices of each model into a single dataframe for easier processing.\n\n\nCode\nols_pred_df <- read_rds(\"data/model/price_ols_pred.rds\") %>%\n  as.data.frame()\n\ncolnames(ols_pred_df) <- c(\"ols_pred\")\n\nrf_pred_df <- read_rds(\"data/model/price_rf_pred.rds\")$predictions %>%\n  as.data.frame()\n\ncolnames(rf_pred_df) <- c(\"rf_pred\")\n\ngwRF_pred_df <- read_rds(\"data/model/price_gwrf_pred.rds\") %>%\n  as.data.frame()\n\ncolnames(gwRF_pred_df) <- c(\"gwrf_pred\")\n\nprices_pred_df <- cbind(test_data$resale_price, ols_pred_df, rf_pred_df,\n                        gwRF_pred_df) %>% \n  rename(\"actual_price\" = \"test_data$resale_price\")\n\nhead(prices_pred_df)\n\n\n  actual_price ols_pred  rf_pred gwrf_pred\n1       380000 328926.6 344170.6  356224.9\n2       380000 339528.1 345553.3  352958.2\n3       635000 538453.3 553103.3  554562.3\n4       365000 357733.7 354576.1  365821.0\n5       418000 368335.2 363729.4  368947.0\n6       380000 327505.5 308867.9  317648.3\n\n\nRoot Mean Square Error for OLS Multiple Linear Regression:\n\n\nCode\nsqrt(mean((prices_pred_df$actual_price - prices_pred_df$ols_pred)^2))\n\n\n[1] 58703.9\n\n\nRoot Mean Square Error for global Random Forest:\n\n\nCode\nsqrt(mean((prices_pred_df$actual_price - prices_pred_df$rf_pred)^2))\n\n\n[1] 37327.6\n\n\nRoot Mean Square Error for Geographically Weighted Random Forest:\n\n\nCode\nsqrt(mean((prices_pred_df$actual_price - prices_pred_df$gwrf_pred)^2))\n\n\n[1] 32736.84\n\n\nWe observe that the Geographically Weighted Random Forest performs the best on data it has never seen before, having the smallest root mean square error between the prediction and the actual prices. On the other hand, OLS Multiple Linear Regression performs the worst. This might be because it underfits the data, being too simple to capture the underlying distribution of the resale prices."
  },
  {
    "objectID": "In-Class-Exercises/chapter-15/ICE11.html",
    "href": "In-Class-Exercises/chapter-15/ICE11.html",
    "title": "In-Class Exercise 11: Spatial Interaction Models",
    "section": "",
    "text": "pacman::p_load(tmap, sf, sp, caret, stplanr, reshape2, broom, tidyverse)"
  },
  {
    "objectID": "In-Class-Exercises/chapter-15/ICE11.html#aspatial",
    "href": "In-Class-Exercises/chapter-15/ICE11.html#aspatial",
    "title": "In-Class Exercise 11: Spatial Interaction Models",
    "section": "Aspatial",
    "text": "Aspatial\n\nodbus <- read_csv(\"data/aspatial/origin_destination_bus_202210.csv\")\n\n\npop <- read_csv(\"data/aspatial/pop.csv\")"
  },
  {
    "objectID": "In-Class-Exercises/chapter-15/ICE11.html#geospatial",
    "href": "In-Class-Exercises/chapter-15/ICE11.html#geospatial",
    "title": "In-Class Exercise 11: Spatial Interaction Models",
    "section": "Geospatial",
    "text": "Geospatial\n\nbusstop <- st_read(dsn=\"data/geospatial\", layer=\"BusStop\") %>%\n  st_transform(crs=3414)\n\nReading layer `BusStop' from data source \n  `C:\\Jenpoer\\IS415-GAA\\In-Class-Exercises\\chapter-15\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5159 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\nmpsz <- st_read(dsn=\"data/geospatial\", layer=\"MPSZ-2019\") %>%\n  st_transform(crs=3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\Jenpoer\\IS415-GAA\\In-Class-Exercises\\chapter-15\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-Class-Exercises/chapter-15/data/geospatial/MPSZ-2019.html",
    "href": "In-Class-Exercises/chapter-15/data/geospatial/MPSZ-2019.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-Class-Exercises/chapter-15/ICE11.html#visualise-subzones",
    "href": "In-Class-Exercises/chapter-15/ICE11.html#visualise-subzones",
    "title": "In-Class Exercise 11: Spatial Interaction Models",
    "section": "Visualise subzones",
    "text": "Visualise subzones\n\ntmap_mode(\"plot\")\nqtm(mpsz)\n\n\n\n\n\nmpsz <- mpsz[order(mpsz$SUBZONE_C),]\nhead(mpsz,10)\n\nSimple feature collection with 10 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 26154.57 ymin: 37511.2 xmax: 31072.47 ymax: 41804.65\nProjected CRS: SVY21 / Singapore TM\n                 SUBZONE_N SUBZONE_C PLN_AREA_N PLN_AREA_C          REGION_N\n171 ANG MO KIO TOWN CENTRE    AMSZ01 ANG MO KIO         AM NORTH-EAST REGION\n170              CHENG SAN    AMSZ02 ANG MO KIO         AM NORTH-EAST REGION\n163             CHONG BOON    AMSZ03 ANG MO KIO         AM NORTH-EAST REGION\n330             TOWNSVILLE    AMSZ04 ANG MO KIO         AM NORTH-EAST REGION\n329             SHANGRI-LA    AMSZ05 ANG MO KIO         AM NORTH-EAST REGION\n172            KEBUN BAHRU    AMSZ06 ANG MO KIO         AM NORTH-EAST REGION\n233        SEMBAWANG HILLS    AMSZ07 ANG MO KIO         AM NORTH-EAST REGION\n254                 TAGORE    AMSZ08 ANG MO KIO         AM NORTH-EAST REGION\n242      YIO CHU KANG WEST    AMSZ09 ANG MO KIO         AM NORTH-EAST REGION\n252           YIO CHU KANG    AMSZ10 ANG MO KIO         AM NORTH-EAST REGION\n    REGION_C                       geometry\n171      NER MULTIPOLYGON (((29692.8 389...\n170      NER MULTIPOLYGON (((30384.33 39...\n163      NER MULTIPOLYGON (((30676.17 39...\n330      NER MULTIPOLYGON (((29649.88 38...\n329      NER MULTIPOLYGON (((28228.2 392...\n172      NER MULTIPOLYGON (((28491.21 39...\n233      NER MULTIPOLYGON (((27744.03 38...\n254      NER MULTIPOLYGON (((27193.46 41...\n242      NER MULTIPOLYGON (((29269.91 39...\n252      NER MULTIPOLYGON (((29598.36 39..."
  },
  {
    "objectID": "In-Class-Exercises/chapter-15/ICE11.html#calculate-distance-matrix",
    "href": "In-Class-Exercises/chapter-15/ICE11.html#calculate-distance-matrix",
    "title": "In-Class Exercise 11: Spatial Interaction Models",
    "section": "Calculate Distance Matrix",
    "text": "Calculate Distance Matrix\nIf we’re using sp, we can use spDists to calculate a distance matrix.\n\nmpsz_sp <- as(mpsz, \"Spatial\")\ndist <- spDists(mpsz_sp)\n\nThe distance matrix does not preserve the names of the subzones. As such, we can rename them with the subzone names.\n\nsz_names <- mpsz$SUBZONE_C\n\n\ncolnames(dist) <- sz_names\nrownames(dist) <- sz_names\n\nWe can pivot it into a longer form.\n\ndistPair <- melt(dist) %>%\n  rename(dist = value)\nhead(distPair, 10)\n\n     Var1   Var2      dist\n1  AMSZ01 AMSZ01    0.0000\n2  AMSZ02 AMSZ01  810.4491\n3  AMSZ03 AMSZ01 1360.9294\n4  AMSZ04 AMSZ01  840.4432\n5  AMSZ05 AMSZ01 1076.7916\n6  AMSZ06 AMSZ01  805.2979\n7  AMSZ07 AMSZ01 1798.7526\n8  AMSZ08 AMSZ01 2576.0199\n9  AMSZ09 AMSZ01 1204.2846\n10 AMSZ10 AMSZ01 1417.8035\n\n\n\ndistPair %>%\n  filter(dist > 0) %>%\n  summary()\n\n      Var1             Var2             dist        \n AMSZ01 :   331   AMSZ01 :   331   Min.   :  173.8  \n AMSZ02 :   331   AMSZ02 :   331   1st Qu.: 7149.5  \n AMSZ03 :   331   AMSZ03 :   331   Median :11890.0  \n AMSZ04 :   331   AMSZ04 :   331   Mean   :12229.4  \n AMSZ05 :   331   AMSZ05 :   331   3rd Qu.:16401.7  \n AMSZ06 :   331   AMSZ06 :   331   Max.   :49894.4  \n (Other):107906   (Other):107906                    \n\n\nA constant distance value of 50m is added to the intra-zone distance. It’s okay to put 50m because we have checked that the minimum distance between subzones are 173.8 m.\n\ndistPair$dist <- ifelse(distPair$dist == 0, 50, distPair$dist)\n\n\ndistPair <- distPair %>%\n  rename(orig = Var1,\n         dest = Var2)\n\nLastly, we can save it into RDS format!\n\nwrite_rds(distPair, \"data/rds/distPair.rds\")\nwrite_rds(od_data, \"data/rds/od_data.rds\")"
  },
  {
    "objectID": "In-Class-Exercises/chapter-15/ICE11.html#join-population-data-with-subzones",
    "href": "In-Class-Exercises/chapter-15/ICE11.html#join-population-data-with-subzones",
    "title": "In-Class Exercise 11: Spatial Interaction Models",
    "section": "Join Population Data with Subzones",
    "text": "Join Population Data with Subzones\n\npop <- pop %>%\n  left_join(mpsz,\n            by = c(\"PA\" = \"PLN_AREA_N\",\n                   \"SZ\" = \"SUBZONE_N\")) %>%\n  select(1:6) %>%\n  rename(SZ_NAME = SZ,\n         SZ = SUBZONE_C)"
  },
  {
    "objectID": "In-Class-Exercises/chapter-15/ICE11.html#preparing-data-for-flow-analysis",
    "href": "In-Class-Exercises/chapter-15/ICE11.html#preparing-data-for-flow-analysis",
    "title": "In-Class Exercise 11: Spatial Interaction Models",
    "section": "Preparing data for flow analysis",
    "text": "Preparing data for flow analysis\n\nod_data <- read_rds(\"data/rds/od_data.rds\")\n\nWe aggregate the data according to subzone.\n\nflow_data <- od_data %>%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %>%\n  summarise(TRIPS = sum(TRIPS))\n\nWe need to update it with the distance information.\n\nflow_data1 <- flow_data %>%\n  left_join(distPair,\n            by = c(\"ORIGIN_SZ\" = \"orig\",\n                   \"DESTIN_SZ\" = \"dest\"))\n\nNow, we can update it with the population data as well.\nOrigin:\n\nflow_data1 <- flow_data1 %>%\n  left_join(pop,\n            by = c(ORIGIN_SZ = \"SZ\")) %>% # join with the origin\n  rename(ORIGIN_AGE7_12 = AGE7_12,\n         ORIGIN_AGE13_24 = AGE13_24,\n         ORIGIN_AGE25_64 = AGE25_64) %>%\n  select(-c(PA, SZ_NAME))\n\nDestination:\n\nflow_data1 <- flow_data1 %>%\n  left_join(pop,\n            by = c(DESTIN_SZ = \"SZ\")) %>% # join with the destination\n  rename(DESTIN_AGE7_12 = AGE7_12,\n         DESTIN_AGE13_24 = AGE13_24,\n         DESTIN_AGE25_64 = AGE25_64) %>%\n  select(-c(PA, SZ_NAME))"
  },
  {
    "objectID": "In-Class-Exercises/chapter-15/ICE11.html#build-spatial-interaction-model",
    "href": "In-Class-Exercises/chapter-15/ICE11.html#build-spatial-interaction-model",
    "title": "In-Class Exercise 11: Spatial Interaction Models",
    "section": "Build Spatial Interaction Model",
    "text": "Build Spatial Interaction Model"
  },
  {
    "objectID": "In-Class-Exercises/chapter-15/ICE12.html",
    "href": "In-Class-Exercises/chapter-15/ICE12.html",
    "title": "In-Class Exercise 12: Spatial Interaction Models",
    "section": "",
    "text": "pacman::p_load(tmap, sf, sp, stplanr, \n               reshape2, broom, performance,\n               gtsummary, ggpubr, tidyverse)"
  },
  {
    "objectID": "In-Class-Exercises/chapter-15/ICE12.html#unconstrained",
    "href": "In-Class-Exercises/chapter-15/ICE12.html#unconstrained",
    "title": "In-Class Exercise 12: Spatial Interaction Models",
    "section": "Unconstrained",
    "text": "Unconstrained\nRun Poisson regression\n\nuncSIM <- glm(formula = TRIPS ~ \n                log(ORIGIN_AGE25_64) + \n                log(DESTIN_AGE25_64) +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nuncSIM\n\n\nCall:  glm(formula = TRIPS ~ log(ORIGIN_AGE25_64) + log(DESTIN_AGE25_64) + \n    log(dist), family = poisson(link = \"log\"), data = SIM_data, \n    na.action = na.exclude)\n\nCoefficients:\n         (Intercept)  log(ORIGIN_AGE25_64)  log(DESTIN_AGE25_64)  \n            17.00287               0.21001               0.01289  \n           log(dist)  \n            -1.51785  \n\nDegrees of Freedom: 14273 Total (i.e. Null);  14270 Residual\nNull Deviance:      36120000 \nResidual Deviance: 19960000     AIC: 20040000\n\n\nPseudo-R-Squared function\n\nCalcRSquared <- function(observed,estimated){\n  r <- cor(observed,estimated)\n  R2 <- r^2\n  R2\n}\n\n\nCalcRSquared(uncSIM$data$TRIPS, uncSIM$fitted.values)\n\n[1] 0.1694734\n\n\n\nr2_mcfadden(uncSIM)\n\n# R2 for Generalized Linear Regression\n       R2: 0.446\n  adj. R2: 0.446"
  },
  {
    "objectID": "In-Class-Exercises/chapter-15/ICE12.html#origin-constrained",
    "href": "In-Class-Exercises/chapter-15/ICE12.html#origin-constrained",
    "title": "In-Class Exercise 12: Spatial Interaction Models",
    "section": "Origin Constrained",
    "text": "Origin Constrained\n\norcSIM <- glm(formula = TRIPS ~ \n                 ORIGIN_SZ +\n                 log(DESTIN_AGE25_64) +\n                 log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(orcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + log(DESTIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-241.02   -16.13    -7.46     0.80   418.33  \n\nCoefficients:\n                       Estimate Std. Error   z value Pr(>|z|)    \n(Intercept)          19.9309957  0.0054015  3689.887  < 2e-16 ***\nORIGIN_SZAMSZ02       0.6805710  0.0052686   129.175  < 2e-16 ***\nORIGIN_SZAMSZ03       0.3597850  0.0054884    65.554  < 2e-16 ***\nORIGIN_SZAMSZ04      -0.1106566  0.0060027   -18.434  < 2e-16 ***\nORIGIN_SZAMSZ05      -0.3140561  0.0067998   -46.186  < 2e-16 ***\nORIGIN_SZAMSZ06       0.0634425  0.0060258    10.528  < 2e-16 ***\nORIGIN_SZAMSZ07      -1.1301580  0.0110298  -102.464  < 2e-16 ***\nORIGIN_SZAMSZ08      -0.6330394  0.0102949   -61.491  < 2e-16 ***\nORIGIN_SZAMSZ09       0.1064915  0.0063450    16.784  < 2e-16 ***\nORIGIN_SZAMSZ10       0.5061899  0.0053889    93.931  < 2e-16 ***\nORIGIN_SZAMSZ11      -1.3167911  0.0144870   -90.895  < 2e-16 ***\nORIGIN_SZAMSZ12      -1.5103004  0.0127453  -118.499  < 2e-16 ***\nORIGIN_SZBDSZ01       1.3626004  0.0051433   264.929  < 2e-16 ***\nORIGIN_SZBDSZ02       0.9554084  0.0059655   160.156  < 2e-16 ***\nORIGIN_SZBDSZ03       1.1476190  0.0054278   211.433  < 2e-16 ***\nORIGIN_SZBDSZ04       2.0110410  0.0046344   433.940  < 2e-16 ***\nORIGIN_SZBDSZ05       1.0658940  0.0053976   197.477  < 2e-16 ***\nORIGIN_SZBDSZ06       1.2719222  0.0054774   232.213  < 2e-16 ***\nORIGIN_SZBDSZ07      -0.5053039  0.0111553   -45.297  < 2e-16 ***\nORIGIN_SZBDSZ08      -0.3556193  0.0102947   -34.544  < 2e-16 ***\nORIGIN_SZBKSZ01      -0.3606399  0.0075473   -47.784  < 2e-16 ***\nORIGIN_SZBKSZ02       0.1357265  0.0061394    22.107  < 2e-16 ***\nORIGIN_SZBKSZ03       0.4101999  0.0058983    69.545  < 2e-16 ***\nORIGIN_SZBKSZ04      -0.3418645  0.0070764   -48.310  < 2e-16 ***\nORIGIN_SZBKSZ05      -0.2986750  0.0074073   -40.322  < 2e-16 ***\nORIGIN_SZBKSZ06      -0.2637855  0.0068739   -38.375  < 2e-16 ***\nORIGIN_SZBKSZ07       0.5498323  0.0051476   106.813  < 2e-16 ***\nORIGIN_SZBKSZ08      -0.0527393  0.0061457    -8.582  < 2e-16 ***\nORIGIN_SZBKSZ09      -0.1564691  0.0067300   -23.249  < 2e-16 ***\nORIGIN_SZBLSZ01      -1.7551329  0.0176599   -99.385  < 2e-16 ***\nORIGIN_SZBLSZ02      -1.9493637  0.0213859   -91.152  < 2e-16 ***\nORIGIN_SZBLSZ03      -2.9057732  0.0535995   -54.213  < 2e-16 ***\nORIGIN_SZBLSZ04      -1.4672066  0.0254726   -57.599  < 2e-16 ***\nORIGIN_SZBMSZ01       0.1806064  0.0060563    29.821  < 2e-16 ***\nORIGIN_SZBMSZ02      -1.4026549  0.0078244  -179.267  < 2e-16 ***\nORIGIN_SZBMSZ03      -0.5976236  0.0063808   -93.660  < 2e-16 ***\nORIGIN_SZBMSZ04      -0.5456513  0.0059061   -92.388  < 2e-16 ***\nORIGIN_SZBMSZ05      -3.1095195  0.0188118  -165.297  < 2e-16 ***\nORIGIN_SZBMSZ06      -3.0273827  0.0194319  -155.794  < 2e-16 ***\nORIGIN_SZBMSZ07      -0.7378197  0.0066865  -110.345  < 2e-16 ***\nORIGIN_SZBMSZ08      -0.9306150  0.0067188  -138.510  < 2e-16 ***\nORIGIN_SZBMSZ09      -1.4137345  0.0101071  -139.876  < 2e-16 ***\nORIGIN_SZBMSZ10      -1.7054195  0.0101582  -167.886  < 2e-16 ***\nORIGIN_SZBMSZ11      -1.2418380  0.0076792  -161.714  < 2e-16 ***\nORIGIN_SZBMSZ12      -1.3746537  0.0109769  -125.231  < 2e-16 ***\nORIGIN_SZBMSZ13      -0.4339494  0.0069335   -62.587  < 2e-16 ***\nORIGIN_SZBMSZ14      -0.9950458  0.0076302  -130.410  < 2e-16 ***\nORIGIN_SZBMSZ15      -0.6544196  0.0068964   -94.892  < 2e-16 ***\nORIGIN_SZBMSZ16      -1.5193747  0.0105329  -144.250  < 2e-16 ***\nORIGIN_SZBMSZ17      -1.6536771  0.0180672   -91.529  < 2e-16 ***\nORIGIN_SZBPSZ01       0.1484355  0.0064734    22.930  < 2e-16 ***\nORIGIN_SZBPSZ02      -0.3602094  0.0073902   -48.741  < 2e-16 ***\nORIGIN_SZBPSZ03      -0.1567975  0.0072226   -21.709  < 2e-16 ***\nORIGIN_SZBPSZ04       0.4504873  0.0058418    77.115  < 2e-16 ***\nORIGIN_SZBPSZ05       0.5028646  0.0053682    93.675  < 2e-16 ***\nORIGIN_SZBPSZ06      -1.0125668  0.0105638   -95.853  < 2e-16 ***\nORIGIN_SZBPSZ07      -0.3859065  0.0098561   -39.154  < 2e-16 ***\nORIGIN_SZBSSZ01       0.1488497  0.0065504    22.724  < 2e-16 ***\nORIGIN_SZBSSZ02       0.4269498  0.0055893    76.387  < 2e-16 ***\nORIGIN_SZBSSZ03      -0.2437385  0.0062020   -39.300  < 2e-16 ***\nORIGIN_SZBTSZ01       0.1987940  0.0066672    29.817  < 2e-16 ***\nORIGIN_SZBTSZ02      -0.4571546  0.0090784   -50.356  < 2e-16 ***\nORIGIN_SZBTSZ03      -0.2697243  0.0077941   -34.606  < 2e-16 ***\nORIGIN_SZBTSZ04      -1.0997236  0.0115225   -95.441  < 2e-16 ***\nORIGIN_SZBTSZ05      -1.0053122  0.0132594   -75.819  < 2e-16 ***\nORIGIN_SZBTSZ06      -1.0841201  0.0102242  -106.035  < 2e-16 ***\nORIGIN_SZBTSZ07      -2.3134497  0.0158499  -145.960  < 2e-16 ***\nORIGIN_SZBTSZ08      -1.1581618  0.0121161   -95.589  < 2e-16 ***\nORIGIN_SZCBSZ01      -1.0805930  0.0577831   -18.701  < 2e-16 ***\nORIGIN_SZCCSZ01      -0.8145372  0.0152638   -53.364  < 2e-16 ***\nORIGIN_SZCHSZ01       0.0377079  0.0133240     2.830 0.004654 ** \nORIGIN_SZCHSZ02      -0.6209553  0.0096388   -64.422  < 2e-16 ***\nORIGIN_SZCHSZ03       1.6790244  0.0069559   241.381  < 2e-16 ***\nORIGIN_SZCKSZ01       0.0839586  0.0059934    14.008  < 2e-16 ***\nORIGIN_SZCKSZ02       0.4379511  0.0062289    70.309  < 2e-16 ***\nORIGIN_SZCKSZ03       0.7956950  0.0051892   153.335  < 2e-16 ***\nORIGIN_SZCKSZ04       1.2740323  0.0053165   239.637  < 2e-16 ***\nORIGIN_SZCKSZ05       0.9326213  0.0061807   150.893  < 2e-16 ***\nORIGIN_SZCKSZ06       0.3976273  0.0085639    46.431  < 2e-16 ***\nORIGIN_SZCLSZ01      -0.7522917  0.0094655   -79.477  < 2e-16 ***\nORIGIN_SZCLSZ02      -1.3937450  0.0153260   -90.940  < 2e-16 ***\nORIGIN_SZCLSZ03      -0.7898683  0.0091016   -86.784  < 2e-16 ***\nORIGIN_SZCLSZ04       0.8451512  0.0051258   164.882  < 2e-16 ***\nORIGIN_SZCLSZ05      -1.6573818  0.0166091   -99.788  < 2e-16 ***\nORIGIN_SZCLSZ06       0.9478181  0.0048182   196.716  < 2e-16 ***\nORIGIN_SZCLSZ07      -0.2499753  0.0064632   -38.677  < 2e-16 ***\nORIGIN_SZCLSZ08       0.1350119  0.0069296    19.483  < 2e-16 ***\nORIGIN_SZCLSZ09      -1.3868782  0.0192743   -71.955  < 2e-16 ***\nORIGIN_SZDTSZ02      -3.7535792  0.0871325   -43.079  < 2e-16 ***\nORIGIN_SZDTSZ03      -3.8462041  0.0840156   -45.780  < 2e-16 ***\nORIGIN_SZDTSZ13      -2.9738127  0.0349241   -85.151  < 2e-16 ***\nORIGIN_SZGLSZ01      -1.5175198  0.0110135  -137.787  < 2e-16 ***\nORIGIN_SZGLSZ02       0.2405712  0.0058742    40.954  < 2e-16 ***\nORIGIN_SZGLSZ03       0.1940241  0.0061989    31.300  < 2e-16 ***\nORIGIN_SZGLSZ04       1.0292572  0.0049028   209.931  < 2e-16 ***\nORIGIN_SZGLSZ05       0.9864552  0.0050898   193.811  < 2e-16 ***\nORIGIN_SZHGSZ01       0.3073609  0.0054307    56.597  < 2e-16 ***\nORIGIN_SZHGSZ02       0.3827293  0.0054555    70.154  < 2e-16 ***\nORIGIN_SZHGSZ03       0.2342580  0.0059240    39.544  < 2e-16 ***\nORIGIN_SZHGSZ04       0.8750090  0.0049639   176.275  < 2e-16 ***\nORIGIN_SZHGSZ05       1.1695280  0.0049468   236.420  < 2e-16 ***\nORIGIN_SZHGSZ06      -0.0462411  0.0063805    -7.247 4.25e-13 ***\nORIGIN_SZHGSZ07       0.4488583  0.0055139    81.404  < 2e-16 ***\nORIGIN_SZHGSZ08       0.2236095  0.0061279    36.490  < 2e-16 ***\nORIGIN_SZHGSZ09      -1.6376674  0.0084442  -193.941  < 2e-16 ***\nORIGIN_SZHGSZ10      -2.9849025  0.0501042   -59.574  < 2e-16 ***\nORIGIN_SZJESZ01       0.3926525  0.0056268    69.783  < 2e-16 ***\nORIGIN_SZJESZ02       0.1230160  0.0056864    21.633  < 2e-16 ***\nORIGIN_SZJESZ03       0.0188276  0.0061020     3.085 0.002032 ** \nORIGIN_SZJESZ04      -1.3611618  0.0117184  -116.156  < 2e-16 ***\nORIGIN_SZJESZ05      -2.0643662  0.0157083  -131.419  < 2e-16 ***\nORIGIN_SZJESZ06       0.1556368  0.0055245    28.172  < 2e-16 ***\nORIGIN_SZJESZ07      -1.7664532  0.0133171  -132.646  < 2e-16 ***\nORIGIN_SZJESZ08      -0.9115981  0.0138203   -65.961  < 2e-16 ***\nORIGIN_SZJESZ09       0.6121916  0.0060381   101.388  < 2e-16 ***\nORIGIN_SZJESZ10      -1.1953045  0.0233216   -51.253  < 2e-16 ***\nORIGIN_SZJESZ11      -1.4088748  0.0220921   -63.773  < 2e-16 ***\nORIGIN_SZJWSZ01       0.5759093  0.0077741    74.081  < 2e-16 ***\nORIGIN_SZJWSZ02       0.9769314  0.0053029   184.227  < 2e-16 ***\nORIGIN_SZJWSZ03       1.3242695  0.0049068   269.882  < 2e-16 ***\nORIGIN_SZJWSZ04       0.5621088  0.0057831    97.199  < 2e-16 ***\nORIGIN_SZJWSZ05      -1.5744341  0.0146904  -107.174  < 2e-16 ***\nORIGIN_SZJWSZ06      -0.9113320  0.0126913   -71.807  < 2e-16 ***\nORIGIN_SZJWSZ07      -2.3083419  0.0357843   -64.507  < 2e-16 ***\nORIGIN_SZJWSZ08       2.0114225  0.0047956   419.429  < 2e-16 ***\nORIGIN_SZJWSZ09       1.9086705  0.0045255   421.759  < 2e-16 ***\nORIGIN_SZKLSZ01       0.2743166  0.0056908    48.204  < 2e-16 ***\nORIGIN_SZKLSZ02      -0.6443386  0.0074521   -86.463  < 2e-16 ***\nORIGIN_SZKLSZ03      -0.3990113  0.0067213   -59.366  < 2e-16 ***\nORIGIN_SZKLSZ04      -2.1413876  0.0138405  -154.719  < 2e-16 ***\nORIGIN_SZKLSZ05      -1.0913697  0.0121512   -89.816  < 2e-16 ***\nORIGIN_SZKLSZ06      -5.6240764  0.1857405   -30.279  < 2e-16 ***\nORIGIN_SZKLSZ07      -1.1885897  0.0096830  -122.750  < 2e-16 ***\nORIGIN_SZKLSZ08      -1.7018593  0.0114317  -148.872  < 2e-16 ***\nORIGIN_SZLKSZ01      -1.6659670  0.0446420   -37.318  < 2e-16 ***\nORIGIN_SZMDSZ01      -1.1210505  0.0318834   -35.161  < 2e-16 ***\nORIGIN_SZMDSZ02      -0.5096299  0.0116645   -43.691  < 2e-16 ***\nORIGIN_SZMDSZ03      -1.9187039  0.0198291   -96.762  < 2e-16 ***\nORIGIN_SZMPSZ01      -0.5260512  0.0094201   -55.844  < 2e-16 ***\nORIGIN_SZMPSZ02      -0.2905084  0.0077974   -37.257  < 2e-16 ***\nORIGIN_SZMPSZ03       0.3342293  0.0063715    52.457  < 2e-16 ***\nORIGIN_SZMUSZ02      -3.8337096  0.1105053   -34.693  < 2e-16 ***\nORIGIN_SZNTSZ01      -2.9845040  0.0397028   -75.171  < 2e-16 ***\nORIGIN_SZNTSZ02      -3.1812985  0.0249470  -127.522  < 2e-16 ***\nORIGIN_SZNTSZ03      -0.9742991  0.0085424  -114.054  < 2e-16 ***\nORIGIN_SZNTSZ05      -4.2086932  0.0579737   -72.597  < 2e-16 ***\nORIGIN_SZNTSZ06      -4.5831822  0.0583494   -78.547  < 2e-16 ***\nORIGIN_SZNVSZ01       0.3186962  0.0052944    60.195  < 2e-16 ***\nORIGIN_SZNVSZ02      -0.5321136  0.0073747   -72.154  < 2e-16 ***\nORIGIN_SZNVSZ03      -0.9911852  0.0090560  -109.451  < 2e-16 ***\nORIGIN_SZNVSZ04      -0.8329721  0.0099590   -83.640  < 2e-16 ***\nORIGIN_SZNVSZ05      -2.1460777  0.0182401  -117.657  < 2e-16 ***\nORIGIN_SZPGSZ01      -0.5604078  0.0151515   -36.987  < 2e-16 ***\nORIGIN_SZPGSZ02      -0.4025139  0.0085135   -47.279  < 2e-16 ***\nORIGIN_SZPGSZ03       0.6975483  0.0055534   125.608  < 2e-16 ***\nORIGIN_SZPGSZ04       1.2175486  0.0051080   238.363  < 2e-16 ***\nORIGIN_SZPGSZ05       0.3895354  0.0069851    55.767  < 2e-16 ***\nORIGIN_SZPLSZ01      -0.5572701  0.0134473   -41.441  < 2e-16 ***\nORIGIN_SZPLSZ02      -0.9854214  0.0172337   -57.180  < 2e-16 ***\nORIGIN_SZPLSZ03      -1.6991954  0.0472629   -35.952  < 2e-16 ***\nORIGIN_SZPLSZ04      -2.2000217  0.0373580   -58.890  < 2e-16 ***\nORIGIN_SZPLSZ05      -1.7086663  0.0260920   -65.486  < 2e-16 ***\nORIGIN_SZPNSZ01       1.5292867  0.0055102   277.535  < 2e-16 ***\nORIGIN_SZPNSZ02       0.7457519  0.0127815    58.346  < 2e-16 ***\nORIGIN_SZPNSZ03      -1.3659046  0.0216180   -63.184  < 2e-16 ***\nORIGIN_SZPNSZ04      -2.0025379  0.0360655   -55.525  < 2e-16 ***\nORIGIN_SZPNSZ05      -0.9157959  0.0320955   -28.533  < 2e-16 ***\nORIGIN_SZPRSZ01       0.0522611  0.0139142     3.756 0.000173 ***\nORIGIN_SZPRSZ02       1.3063371  0.0053809   242.774  < 2e-16 ***\nORIGIN_SZPRSZ03       0.9963670  0.0054293   183.516  < 2e-16 ***\nORIGIN_SZPRSZ04      -0.0300950  0.0088010    -3.419 0.000627 ***\nORIGIN_SZPRSZ05       1.6840313  0.0050839   331.245  < 2e-16 ***\nORIGIN_SZPRSZ06      -0.8277202  0.0131296   -63.042  < 2e-16 ***\nORIGIN_SZPRSZ07      -2.1698449  0.0177362  -122.340  < 2e-16 ***\nORIGIN_SZPRSZ08       0.4559353  0.0072609    62.793  < 2e-16 ***\nORIGIN_SZQTSZ01      -0.3517047  0.0078770   -44.650  < 2e-16 ***\nORIGIN_SZQTSZ02      -0.8199353  0.0071544  -114.605  < 2e-16 ***\nORIGIN_SZQTSZ03      -0.2457614  0.0065555   -37.490  < 2e-16 ***\nORIGIN_SZQTSZ04      -1.2216614  0.0084050  -145.349  < 2e-16 ***\nORIGIN_SZQTSZ05      -0.7219952  0.0072360   -99.778  < 2e-16 ***\nORIGIN_SZQTSZ06      -0.6729363  0.0076658   -87.784  < 2e-16 ***\nORIGIN_SZQTSZ07      -1.4497690  0.0109365  -132.563  < 2e-16 ***\nORIGIN_SZQTSZ08      -0.2770151  0.0070193   -39.465  < 2e-16 ***\nORIGIN_SZQTSZ09      -0.6157554  0.0078739   -78.202  < 2e-16 ***\nORIGIN_SZQTSZ10      -0.3091547  0.0075471   -40.963  < 2e-16 ***\nORIGIN_SZQTSZ11      -1.9698881  0.0151247  -130.243  < 2e-16 ***\nORIGIN_SZQTSZ12      -2.6449643  0.0205857  -128.485  < 2e-16 ***\nORIGIN_SZQTSZ13      -0.3754107  0.0088433   -42.452  < 2e-16 ***\nORIGIN_SZQTSZ14      -1.6537473  0.0134378  -123.067  < 2e-16 ***\nORIGIN_SZQTSZ15      -0.3435351  0.0131956   -26.034  < 2e-16 ***\nORIGIN_SZRCSZ01      -1.7104390  0.0141179  -121.154  < 2e-16 ***\nORIGIN_SZRCSZ06      -1.1250727  0.0094909  -118.542  < 2e-16 ***\nORIGIN_SZRVSZ01      -3.0220116  0.0339694   -88.963  < 2e-16 ***\nORIGIN_SZRVSZ02      -3.6040075  0.0297641  -121.086  < 2e-16 ***\nORIGIN_SZRVSZ03      -3.2345594  0.0259149  -124.814  < 2e-16 ***\nORIGIN_SZRVSZ04      -3.6900313  0.0575908   -64.073  < 2e-16 ***\nORIGIN_SZRVSZ05      -2.9527570  0.0178582  -165.344  < 2e-16 ***\nORIGIN_SZSBSZ01       0.0238445  0.0078563     3.035 0.002405 ** \nORIGIN_SZSBSZ02      -0.5780602  0.0093054   -62.121  < 2e-16 ***\nORIGIN_SZSBSZ03       0.8961719  0.0054586   164.175  < 2e-16 ***\nORIGIN_SZSBSZ04       0.8421798  0.0061888   136.080  < 2e-16 ***\nORIGIN_SZSBSZ05      -0.1682984  0.0078342   -21.482  < 2e-16 ***\nORIGIN_SZSBSZ06      -1.1482701  0.0196421   -58.460  < 2e-16 ***\nORIGIN_SZSBSZ07      -0.8830317  0.0160709   -54.946  < 2e-16 ***\nORIGIN_SZSBSZ08      -1.1039492  0.0174602   -63.226  < 2e-16 ***\nORIGIN_SZSBSZ09      -0.5946691  0.0101961   -58.323  < 2e-16 ***\nORIGIN_SZSESZ02       1.1144933  0.0050948   218.749  < 2e-16 ***\nORIGIN_SZSESZ03       1.1058963  0.0049026   225.574  < 2e-16 ***\nORIGIN_SZSESZ04       0.7427975  0.0056948   130.433  < 2e-16 ***\nORIGIN_SZSESZ05      -0.2812684  0.0069596   -40.414  < 2e-16 ***\nORIGIN_SZSESZ06       0.8168315  0.0055800   146.387  < 2e-16 ***\nORIGIN_SZSESZ07      -2.2842043  0.0231232   -98.784  < 2e-16 ***\nORIGIN_SZSGSZ01      -0.7313790  0.0098957   -73.909  < 2e-16 ***\nORIGIN_SZSGSZ02      -1.1185406  0.0110919  -100.843  < 2e-16 ***\nORIGIN_SZSGSZ03       0.1752618  0.0060508    28.965  < 2e-16 ***\nORIGIN_SZSGSZ04       0.3764395  0.0056165    67.023  < 2e-16 ***\nORIGIN_SZSGSZ05      -1.7203916  0.0118945  -144.637  < 2e-16 ***\nORIGIN_SZSGSZ06       0.4630857  0.0052886    87.563  < 2e-16 ***\nORIGIN_SZSGSZ07      -0.7051233  0.0073133   -96.417  < 2e-16 ***\nORIGIN_SZSKSZ01       0.2053928  0.0100710    20.395  < 2e-16 ***\nORIGIN_SZSKSZ02       1.2630428  0.0063490   198.935  < 2e-16 ***\nORIGIN_SZSKSZ03      -0.3035297  0.0096788   -31.360  < 2e-16 ***\nORIGIN_SZSKSZ04      -1.7952886  0.0359225   -49.977  < 2e-16 ***\nORIGIN_SZSKSZ05      -0.3836861  0.0176686   -21.716  < 2e-16 ***\nORIGIN_SZSLSZ01      -2.5916326  0.0348001   -74.472  < 2e-16 ***\nORIGIN_SZSLSZ04      -0.2251549  0.0088517   -25.436  < 2e-16 ***\nORIGIN_SZSRSZ01      -2.9590365  0.0173638  -170.414  < 2e-16 ***\nORIGIN_SZTHSZ01      -1.9639893  0.0570321   -34.437  < 2e-16 ***\nORIGIN_SZTHSZ03      -1.7281304  0.0272797   -63.349  < 2e-16 ***\nORIGIN_SZTHSZ04      -2.7837906  0.0343179   -81.118  < 2e-16 ***\nORIGIN_SZTHSZ06      -2.1800693  0.0205491  -106.091  < 2e-16 ***\nORIGIN_SZTMSZ01       0.8228136  0.0066824   123.131  < 2e-16 ***\nORIGIN_SZTMSZ02       2.3174781  0.0044978   515.243  < 2e-16 ***\nORIGIN_SZTMSZ03       1.7061757  0.0048615   350.957  < 2e-16 ***\nORIGIN_SZTMSZ04       1.2407899  0.0058389   212.504  < 2e-16 ***\nORIGIN_SZTMSZ05      -0.1000526  0.0124079    -8.064 7.41e-16 ***\nORIGIN_SZTNSZ01      -2.0347519  0.0139596  -145.760  < 2e-16 ***\nORIGIN_SZTNSZ02      -1.8682671  0.0107901  -173.146  < 2e-16 ***\nORIGIN_SZTNSZ03      -2.1737183  0.0146759  -148.115  < 2e-16 ***\nORIGIN_SZTNSZ04      -0.5006452  0.0081501   -61.428  < 2e-16 ***\nORIGIN_SZTPSZ01      -0.6722487  0.0075606   -88.914  < 2e-16 ***\nORIGIN_SZTPSZ02       0.4552916  0.0050191    90.711  < 2e-16 ***\nORIGIN_SZTPSZ03      -0.7865781  0.0072250  -108.869  < 2e-16 ***\nORIGIN_SZTPSZ04      -0.7049044  0.0066456  -106.071  < 2e-16 ***\nORIGIN_SZTPSZ05      -0.5574925  0.0070366   -79.227  < 2e-16 ***\nORIGIN_SZTPSZ06      -0.4247282  0.0068709   -61.815  < 2e-16 ***\nORIGIN_SZTPSZ07      -0.2846984  0.0071030   -40.081  < 2e-16 ***\nORIGIN_SZTPSZ08      -1.0898051  0.0110046   -99.031  < 2e-16 ***\nORIGIN_SZTPSZ09      -0.8092746  0.0079160  -102.232  < 2e-16 ***\nORIGIN_SZTPSZ10      -0.9332072  0.0086809  -107.502  < 2e-16 ***\nORIGIN_SZTPSZ11      -0.0421981  0.0064343    -6.558 5.44e-11 ***\nORIGIN_SZTPSZ12      -0.6330081  0.0078324   -80.819  < 2e-16 ***\nORIGIN_SZTSSZ01      -1.7650409  0.0517357   -34.116  < 2e-16 ***\nORIGIN_SZTSSZ02       1.1707267  0.0094178   124.310  < 2e-16 ***\nORIGIN_SZTSSZ03       0.6581679  0.0095894    68.635  < 2e-16 ***\nORIGIN_SZTSSZ04       0.8736493  0.0104965    83.233  < 2e-16 ***\nORIGIN_SZTSSZ05       0.0957248  0.0178709     5.356 8.49e-08 ***\nORIGIN_SZTSSZ06       1.7581609  0.0206810    85.013  < 2e-16 ***\nORIGIN_SZWCSZ01       0.8097950  0.0105622    76.669  < 2e-16 ***\nORIGIN_SZWCSZ02      -1.9966163  0.0345747   -57.748  < 2e-16 ***\nORIGIN_SZWCSZ03      -5.0687420  0.1474971   -34.365  < 2e-16 ***\nORIGIN_SZWDSZ01       1.4926003  0.0047216   316.124  < 2e-16 ***\nORIGIN_SZWDSZ02       0.9916597  0.0055755   177.859  < 2e-16 ***\nORIGIN_SZWDSZ03       1.5918065  0.0052180   305.062  < 2e-16 ***\nORIGIN_SZWDSZ04       1.3717152  0.0060516   226.669  < 2e-16 ***\nORIGIN_SZWDSZ05       0.6700111  0.0062287   107.569  < 2e-16 ***\nORIGIN_SZWDSZ06       0.8115996  0.0060947   133.165  < 2e-16 ***\nORIGIN_SZWDSZ07      -0.6488914  0.0093567   -69.351  < 2e-16 ***\nORIGIN_SZWDSZ08      -0.3610234  0.0096440   -37.435  < 2e-16 ***\nORIGIN_SZWDSZ09       1.4445461  0.0052279   276.317  < 2e-16 ***\nORIGIN_SZYSSZ01      -0.2039272  0.0069548   -29.322  < 2e-16 ***\nORIGIN_SZYSSZ02       0.8707707  0.0058957   147.697  < 2e-16 ***\nORIGIN_SZYSSZ03       1.8348842  0.0050377   364.231  < 2e-16 ***\nORIGIN_SZYSSZ04       1.0780641  0.0052960   203.564  < 2e-16 ***\nORIGIN_SZYSSZ05       0.3222765  0.0069700    46.237  < 2e-16 ***\nORIGIN_SZYSSZ06      -0.4424689  0.0124866   -35.435  < 2e-16 ***\nORIGIN_SZYSSZ07      -1.0267883  0.0155821   -65.895  < 2e-16 ***\nORIGIN_SZYSSZ08       0.1833117  0.0070935    25.842  < 2e-16 ***\nORIGIN_SZYSSZ09       1.0766070  0.0050451   213.396  < 2e-16 ***\nlog(DESTIN_AGE25_64)  0.0295428  0.0001051   280.998  < 2e-16 ***\nlog(dist)            -1.7024691  0.0004625 -3681.042  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance: 12983718  on 13993  degrees of freedom\nAIC: 13068835\n\nNumber of Fisher Scoring iterations: 6\n\n\n\nCalcRSquared(orcSIM$data$TRIPS, orcSIM$fitted.values)\n\n[1] 0.4029115"
  },
  {
    "objectID": "In-Class-Exercises/chapter-15/ICE12.html#destination-constrained",
    "href": "In-Class-Exercises/chapter-15/ICE12.html#destination-constrained",
    "title": "In-Class Exercise 12: Spatial Interaction Models",
    "section": "Destination Constrained",
    "text": "Destination Constrained\n\ndecSIM <- glm(formula = TRIPS ~ \n                DESTIN_SZ + \n                log(ORIGIN_AGE25_64) + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(decSIM)\n\n\nCall:\nglm(formula = TRIPS ~ DESTIN_SZ + log(ORIGIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-189.20   -15.64    -7.08     1.55   379.03  \n\nCoefficients:\n                       Estimate Std. Error   z value Pr(>|z|)    \n(Intercept)          19.4822997  0.0050784  3836.298  < 2e-16 ***\nDESTIN_SZAMSZ02       0.1263056  0.0049743    25.392  < 2e-16 ***\nDESTIN_SZAMSZ03       0.0421788  0.0049859     8.460  < 2e-16 ***\nDESTIN_SZAMSZ04      -1.1668479  0.0074254  -157.143  < 2e-16 ***\nDESTIN_SZAMSZ05      -1.2586639  0.0075854  -165.931  < 2e-16 ***\nDESTIN_SZAMSZ06      -1.1414791  0.0073474  -155.359  < 2e-16 ***\nDESTIN_SZAMSZ07      -1.5565804  0.0109476  -142.185  < 2e-16 ***\nDESTIN_SZAMSZ08      -0.3990754  0.0074159   -53.813  < 2e-16 ***\nDESTIN_SZAMSZ09      -1.0109118  0.0076802  -131.626  < 2e-16 ***\nDESTIN_SZAMSZ10       0.0159285  0.0051765     3.077  0.00209 ** \nDESTIN_SZAMSZ11      -0.3653273  0.0094866   -38.510  < 2e-16 ***\nDESTIN_SZAMSZ12       0.5297606  0.0053243    99.500  < 2e-16 ***\nDESTIN_SZBDSZ01       1.0394822  0.0044226   235.037  < 2e-16 ***\nDESTIN_SZBDSZ02       0.1956964  0.0059564    32.855  < 2e-16 ***\nDESTIN_SZBDSZ03       0.3209267  0.0053718    59.742  < 2e-16 ***\nDESTIN_SZBDSZ04       1.2429874  0.0043104   288.370  < 2e-16 ***\nDESTIN_SZBDSZ05       0.8535842  0.0046360   184.122  < 2e-16 ***\nDESTIN_SZBDSZ06       0.5181443  0.0053736    96.423  < 2e-16 ***\nDESTIN_SZBDSZ07      -0.5849371  0.0110468   -52.951  < 2e-16 ***\nDESTIN_SZBDSZ08      -1.2871050  0.0128623  -100.068  < 2e-16 ***\nDESTIN_SZBKSZ01      -1.0633560  0.0077771  -136.730  < 2e-16 ***\nDESTIN_SZBKSZ02      -0.4065316  0.0066712   -60.938  < 2e-16 ***\nDESTIN_SZBKSZ03      -0.6815674  0.0066509  -102.477  < 2e-16 ***\nDESTIN_SZBKSZ04      -0.4185485  0.0058306   -71.785  < 2e-16 ***\nDESTIN_SZBKSZ05      -0.8887654  0.0073867  -120.319  < 2e-16 ***\nDESTIN_SZBKSZ06      -0.9436078  0.0068625  -137.501  < 2e-16 ***\nDESTIN_SZBKSZ07      -0.0067325  0.0048408    -1.391  0.16430    \nDESTIN_SZBKSZ08      -1.2680903  0.0079177  -160.160  < 2e-16 ***\nDESTIN_SZBKSZ09      -0.0350151  0.0054287    -6.450 1.12e-10 ***\nDESTIN_SZBLSZ01      -0.3045203  0.0081978   -37.146  < 2e-16 ***\nDESTIN_SZBLSZ02       0.6432424  0.0074449    86.400  < 2e-16 ***\nDESTIN_SZBLSZ03       1.9595113  0.0084705   231.333  < 2e-16 ***\nDESTIN_SZBLSZ04       0.0149756  0.0172081     0.870  0.38415    \nDESTIN_SZBMSZ01      -0.0378127  0.0055294    -6.838 8.00e-12 ***\nDESTIN_SZBMSZ02      -0.8458055  0.0054043  -156.505  < 2e-16 ***\nDESTIN_SZBMSZ03      -1.1334399  0.0063720  -177.878  < 2e-16 ***\nDESTIN_SZBMSZ04      -1.1164759  0.0057743  -193.353  < 2e-16 ***\nDESTIN_SZBMSZ05      -1.1078742  0.0078703  -140.766  < 2e-16 ***\nDESTIN_SZBMSZ06      -2.2787234  0.0155126  -146.895  < 2e-16 ***\nDESTIN_SZBMSZ07      -0.2739089  0.0051924   -52.752  < 2e-16 ***\nDESTIN_SZBMSZ08      -1.6825978  0.0071842  -234.209  < 2e-16 ***\nDESTIN_SZBMSZ09      -3.0047801  0.0159980  -187.823  < 2e-16 ***\nDESTIN_SZBMSZ10      -2.2232689  0.0096907  -229.423  < 2e-16 ***\nDESTIN_SZBMSZ11      -1.9657136  0.0086445  -227.394  < 2e-16 ***\nDESTIN_SZBMSZ12      -1.5359286  0.0089658  -171.310  < 2e-16 ***\nDESTIN_SZBMSZ13      -0.5657561  0.0059960   -94.355  < 2e-16 ***\nDESTIN_SZBMSZ14      -1.6904858  0.0084858  -199.214  < 2e-16 ***\nDESTIN_SZBMSZ15      -1.5268383  0.0079959  -190.953  < 2e-16 ***\nDESTIN_SZBMSZ16      -2.2045600  0.0130872  -168.452  < 2e-16 ***\nDESTIN_SZBMSZ17      -2.2992381  0.0184895  -124.353  < 2e-16 ***\nDESTIN_SZBPSZ01      -0.8549497  0.0065168  -131.191  < 2e-16 ***\nDESTIN_SZBPSZ02      -1.7470549  0.0095751  -182.457  < 2e-16 ***\nDESTIN_SZBPSZ03      -1.4015145  0.0090888  -154.203  < 2e-16 ***\nDESTIN_SZBPSZ04      -0.5250632  0.0066496   -78.962  < 2e-16 ***\nDESTIN_SZBPSZ05       0.3413171  0.0046404    73.553  < 2e-16 ***\nDESTIN_SZBPSZ06      -0.8569188  0.0090795   -94.380  < 2e-16 ***\nDESTIN_SZBPSZ07      -0.0751284  0.0089704    -8.375  < 2e-16 ***\nDESTIN_SZBSSZ01       0.1015228  0.0055735    18.215  < 2e-16 ***\nDESTIN_SZBSSZ02      -0.7066412  0.0063845  -110.682  < 2e-16 ***\nDESTIN_SZBSSZ03       0.1622730  0.0046689    34.756  < 2e-16 ***\nDESTIN_SZBTSZ01       0.5470615  0.0047984   114.009  < 2e-16 ***\nDESTIN_SZBTSZ02      -0.1393371  0.0078266   -17.803  < 2e-16 ***\nDESTIN_SZBTSZ03       0.1474771  0.0059428    24.816  < 2e-16 ***\nDESTIN_SZBTSZ04      -1.2857827  0.0122000  -105.392  < 2e-16 ***\nDESTIN_SZBTSZ05      -0.2629188  0.0081769   -32.154  < 2e-16 ***\nDESTIN_SZBTSZ06      -0.8319920  0.0081401  -102.209  < 2e-16 ***\nDESTIN_SZBTSZ07      -1.8829448  0.0121227  -155.324  < 2e-16 ***\nDESTIN_SZBTSZ08      -1.5732123  0.0116752  -134.748  < 2e-16 ***\nDESTIN_SZCBSZ01      -3.5334327  0.3333510   -10.600  < 2e-16 ***\nDESTIN_SZCCSZ01      -0.2129306  0.0093782   -22.705  < 2e-16 ***\nDESTIN_SZCHSZ01      -0.1494972  0.0113078   -13.221  < 2e-16 ***\nDESTIN_SZCHSZ02       0.0041774  0.0063195     0.661  0.50860    \nDESTIN_SZCHSZ03       2.5565450  0.0046495   549.857  < 2e-16 ***\nDESTIN_SZCKSZ01       0.0489719  0.0053801     9.102  < 2e-16 ***\nDESTIN_SZCKSZ02      -0.3548993  0.0060671   -58.496  < 2e-16 ***\nDESTIN_SZCKSZ03       0.5386351  0.0044913   119.928  < 2e-16 ***\nDESTIN_SZCKSZ04      -0.4425512  0.0073837   -59.936  < 2e-16 ***\nDESTIN_SZCKSZ05      -0.4092591  0.0077267   -52.967  < 2e-16 ***\nDESTIN_SZCKSZ06       0.2207041  0.0074252    29.724  < 2e-16 ***\nDESTIN_SZCLSZ01       0.2851460  0.0052362    54.457  < 2e-16 ***\nDESTIN_SZCLSZ02      -1.9270528  0.0147688  -130.482  < 2e-16 ***\nDESTIN_SZCLSZ03      -0.6266521  0.0086780   -72.212  < 2e-16 ***\nDESTIN_SZCLSZ04      -0.1335581  0.0054216   -24.634  < 2e-16 ***\nDESTIN_SZCLSZ05      -0.8912963  0.0096015   -92.829  < 2e-16 ***\nDESTIN_SZCLSZ06       0.1781234  0.0048150    36.993  < 2e-16 ***\nDESTIN_SZCLSZ07      -0.5609619  0.0062277   -90.075  < 2e-16 ***\nDESTIN_SZCLSZ08      -0.3875308  0.0068390   -56.665  < 2e-16 ***\nDESTIN_SZCLSZ09       0.2539453  0.0072623    34.968  < 2e-16 ***\nDESTIN_SZDTSZ02      -2.5036295  0.0373421   -67.046  < 2e-16 ***\nDESTIN_SZDTSZ03      -0.8956407  0.0149971   -59.721  < 2e-16 ***\nDESTIN_SZDTSZ13      -1.6562176  0.0175441   -94.403  < 2e-16 ***\nDESTIN_SZGLSZ01      -0.2716152  0.0056553   -48.029  < 2e-16 ***\nDESTIN_SZGLSZ02      -0.1735665  0.0055548   -31.246  < 2e-16 ***\nDESTIN_SZGLSZ03       0.7029507  0.0044934   156.441  < 2e-16 ***\nDESTIN_SZGLSZ04       0.5788027  0.0045449   127.351  < 2e-16 ***\nDESTIN_SZGLSZ05       0.6865291  0.0045131   152.118  < 2e-16 ***\nDESTIN_SZHGSZ01       0.3275950  0.0043866    74.681  < 2e-16 ***\nDESTIN_SZHGSZ02      -0.6326974  0.0063517   -99.610  < 2e-16 ***\nDESTIN_SZHGSZ03      -1.0597982  0.0073914  -143.382  < 2e-16 ***\nDESTIN_SZHGSZ04      -0.2267013  0.0052178   -43.448  < 2e-16 ***\nDESTIN_SZHGSZ05      -0.3063050  0.0055452   -55.238  < 2e-16 ***\nDESTIN_SZHGSZ06      -0.7483961  0.0065544  -114.182  < 2e-16 ***\nDESTIN_SZHGSZ07       0.1096958  0.0051309    21.379  < 2e-16 ***\nDESTIN_SZHGSZ08      -0.1374201  0.0056692   -24.240  < 2e-16 ***\nDESTIN_SZHGSZ09       0.0775400  0.0060230    12.874  < 2e-16 ***\nDESTIN_SZHGSZ10      -3.3017475  0.0289292  -114.132  < 2e-16 ***\nDESTIN_SZJESZ01      -0.0489065  0.0057246    -8.543  < 2e-16 ***\nDESTIN_SZJESZ02      -0.5101614  0.0060074   -84.921  < 2e-16 ***\nDESTIN_SZJESZ03      -0.5328921  0.0064129   -83.097  < 2e-16 ***\nDESTIN_SZJESZ04      -0.7348953  0.0082249   -89.351  < 2e-16 ***\nDESTIN_SZJESZ05      -1.0864570  0.0111740   -97.231  < 2e-16 ***\nDESTIN_SZJESZ06       0.2407920  0.0046801    51.451  < 2e-16 ***\nDESTIN_SZJESZ07      -1.1523093  0.0090103  -127.888  < 2e-16 ***\nDESTIN_SZJESZ08      -0.4627356  0.0094529   -48.952  < 2e-16 ***\nDESTIN_SZJESZ09       0.0528616  0.0068126     7.759 8.53e-15 ***\nDESTIN_SZJESZ10       1.0240660  0.0084045   121.848  < 2e-16 ***\nDESTIN_SZJESZ11       0.7875517  0.0076251   103.284  < 2e-16 ***\nDESTIN_SZJWSZ01      -0.1533418  0.0076198   -20.124  < 2e-16 ***\nDESTIN_SZJWSZ02      -0.0011019  0.0059389    -0.186  0.85280    \nDESTIN_SZJWSZ03       0.9063789  0.0046747   193.892  < 2e-16 ***\nDESTIN_SZJWSZ04       0.7019286  0.0049743   141.112  < 2e-16 ***\nDESTIN_SZJWSZ05      -0.5197057  0.0072971   -71.220  < 2e-16 ***\nDESTIN_SZJWSZ06       0.3350986  0.0061171    54.780  < 2e-16 ***\nDESTIN_SZJWSZ07      -0.5961960  0.0328336   -18.158  < 2e-16 ***\nDESTIN_SZJWSZ08       0.8054662  0.0056006   143.819  < 2e-16 ***\nDESTIN_SZJWSZ09       1.5860146  0.0040282   393.723  < 2e-16 ***\nDESTIN_SZKLSZ01      -0.6500838  0.0063560  -102.279  < 2e-16 ***\nDESTIN_SZKLSZ02      -0.7039434  0.0064465  -109.197  < 2e-16 ***\nDESTIN_SZKLSZ03      -1.1972384  0.0075577  -158.413  < 2e-16 ***\nDESTIN_SZKLSZ04      -1.7172228  0.0097573  -175.993  < 2e-16 ***\nDESTIN_SZKLSZ05      -0.6042386  0.0093730   -64.466  < 2e-16 ***\nDESTIN_SZKLSZ06      -3.0201496  0.0389503   -77.539  < 2e-16 ***\nDESTIN_SZKLSZ07      -1.1522413  0.0076607  -150.409  < 2e-16 ***\nDESTIN_SZKLSZ08      -0.6977825  0.0057610  -121.122  < 2e-16 ***\nDESTIN_SZLKSZ01      -0.6895952  0.0268661   -25.668  < 2e-16 ***\nDESTIN_SZMDSZ01      -0.7155951  0.0228203   -31.358  < 2e-16 ***\nDESTIN_SZMDSZ02      -0.8153643  0.0123003   -66.288  < 2e-16 ***\nDESTIN_SZMDSZ03      -2.7745226  0.0301326   -92.077  < 2e-16 ***\nDESTIN_SZMPSZ01      -0.5492095  0.0087198   -62.984  < 2e-16 ***\nDESTIN_SZMPSZ02      -0.6104744  0.0069346   -88.033  < 2e-16 ***\nDESTIN_SZMPSZ03       0.2775047  0.0054964    50.489  < 2e-16 ***\nDESTIN_SZMUSZ02      -2.6322870  0.0214943  -122.464  < 2e-16 ***\nDESTIN_SZNTSZ01      -4.0762008  0.0531046   -76.758  < 2e-16 ***\nDESTIN_SZNTSZ02      -1.9765545  0.0125659  -157.296  < 2e-16 ***\nDESTIN_SZNTSZ03      -1.4563069  0.0085433  -170.462  < 2e-16 ***\nDESTIN_SZNTSZ05      -2.0125598  0.0270737   -74.336  < 2e-16 ***\nDESTIN_SZNTSZ06      -3.0145357  0.0504986   -59.695  < 2e-16 ***\nDESTIN_SZNVSZ01      -0.4693625  0.0053866   -87.135  < 2e-16 ***\nDESTIN_SZNVSZ02      -0.4525631  0.0060428   -74.894  < 2e-16 ***\nDESTIN_SZNVSZ03      -0.4821492  0.0064725   -74.492  < 2e-16 ***\nDESTIN_SZNVSZ04      -1.8929756  0.0128397  -147.432  < 2e-16 ***\nDESTIN_SZNVSZ05      -1.4501752  0.0099737  -145.400  < 2e-16 ***\nDESTIN_SZPGSZ01      -1.2305867  0.0174321   -70.593  < 2e-16 ***\nDESTIN_SZPGSZ02      -0.8232919  0.0080153  -102.715  < 2e-16 ***\nDESTIN_SZPGSZ03       0.2138480  0.0050850    42.054  < 2e-16 ***\nDESTIN_SZPGSZ04       0.1045757  0.0053579    19.518  < 2e-16 ***\nDESTIN_SZPGSZ05      -0.7542450  0.0088883   -84.858  < 2e-16 ***\nDESTIN_SZPLSZ01      -0.0098642  0.0080428    -1.226  0.22003    \nDESTIN_SZPLSZ02      -1.2630412  0.0152594   -82.771  < 2e-16 ***\nDESTIN_SZPLSZ03      -0.1554479  0.0108611   -14.312  < 2e-16 ***\nDESTIN_SZPLSZ04      -1.5505819  0.0114768  -135.105  < 2e-16 ***\nDESTIN_SZPLSZ05      -0.2417805  0.0130391   -18.543  < 2e-16 ***\nDESTIN_SZPNSZ01       0.7926715  0.0073628   107.659  < 2e-16 ***\nDESTIN_SZPNSZ02       2.1914920  0.0073537   298.013  < 2e-16 ***\nDESTIN_SZPNSZ03       1.0246845  0.0086874   117.951  < 2e-16 ***\nDESTIN_SZPNSZ04       2.5522612  0.0091789   278.057  < 2e-16 ***\nDESTIN_SZPNSZ05       1.7995301  0.0138562   129.872  < 2e-16 ***\nDESTIN_SZPRSZ01      -0.6576686  0.0096037   -68.481  < 2e-16 ***\nDESTIN_SZPRSZ02       0.3113532  0.0059851    52.021  < 2e-16 ***\nDESTIN_SZPRSZ03       0.9255296  0.0044779   206.687  < 2e-16 ***\nDESTIN_SZPRSZ04      -0.0028578  0.0093218    -0.307  0.75917    \nDESTIN_SZPRSZ05       0.2457863  0.0058261    42.187  < 2e-16 ***\nDESTIN_SZPRSZ06       0.3692137  0.0064542    57.205  < 2e-16 ***\nDESTIN_SZPRSZ07      -1.6733306  0.0138440  -120.871  < 2e-16 ***\nDESTIN_SZPRSZ08      -0.2221048  0.0074846   -29.675  < 2e-16 ***\nDESTIN_SZQTSZ01      -1.0185488  0.0093179  -109.311  < 2e-16 ***\nDESTIN_SZQTSZ02      -1.2802688  0.0081670  -156.761  < 2e-16 ***\nDESTIN_SZQTSZ03      -1.3322708  0.0079106  -168.415  < 2e-16 ***\nDESTIN_SZQTSZ04      -1.1803631  0.0077366  -152.568  < 2e-16 ***\nDESTIN_SZQTSZ05      -1.2215818  0.0072829  -167.734  < 2e-16 ***\nDESTIN_SZQTSZ06      -1.3213145  0.0074858  -176.509  < 2e-16 ***\nDESTIN_SZQTSZ07      -1.6426306  0.0123347  -133.171  < 2e-16 ***\nDESTIN_SZQTSZ08      -0.2224169  0.0058405   -38.082  < 2e-16 ***\nDESTIN_SZQTSZ09      -0.8142678  0.0069796  -116.665  < 2e-16 ***\nDESTIN_SZQTSZ10      -0.1090496  0.0062573   -17.428  < 2e-16 ***\nDESTIN_SZQTSZ11      -0.0108951  0.0061145    -1.782  0.07477 .  \nDESTIN_SZQTSZ12      -0.8582515  0.0090243   -95.105  < 2e-16 ***\nDESTIN_SZQTSZ13       0.1834409  0.0065231    28.122  < 2e-16 ***\nDESTIN_SZQTSZ14       0.1994454  0.0073615    27.093  < 2e-16 ***\nDESTIN_SZQTSZ15       0.6740197  0.0088699    75.990  < 2e-16 ***\nDESTIN_SZRCSZ01      -0.7746427  0.0079375   -97.593  < 2e-16 ***\nDESTIN_SZRCSZ06      -1.4394098  0.0209931   -68.566  < 2e-16 ***\nDESTIN_SZRVSZ01      -2.6060495  0.0175759  -148.274  < 2e-16 ***\nDESTIN_SZRVSZ02      -2.5823769  0.0354706   -72.803  < 2e-16 ***\nDESTIN_SZRVSZ03      -2.5890601  0.0152644  -169.614  < 2e-16 ***\nDESTIN_SZRVSZ04      -2.2277482  0.0165661  -134.477  < 2e-16 ***\nDESTIN_SZRVSZ05      -3.8610445  0.0298251  -129.456  < 2e-16 ***\nDESTIN_SZSBSZ01      -1.2035529  0.0103954  -115.777  < 2e-16 ***\nDESTIN_SZSBSZ02      -1.0267199  0.0085239  -120.452  < 2e-16 ***\nDESTIN_SZSBSZ03       0.5977382  0.0050336   118.750  < 2e-16 ***\nDESTIN_SZSBSZ04       0.5362769  0.0060573    88.534  < 2e-16 ***\nDESTIN_SZSBSZ05      -1.0440525  0.0089622  -116.495  < 2e-16 ***\nDESTIN_SZSBSZ06      -1.3939595  0.0246679   -56.509  < 2e-16 ***\nDESTIN_SZSBSZ07       0.1029116  0.0235414     4.372 1.23e-05 ***\nDESTIN_SZSBSZ08       1.3564902  0.0060529   224.105  < 2e-16 ***\nDESTIN_SZSBSZ09       0.4573712  0.0056585    80.829  < 2e-16 ***\nDESTIN_SZSESZ02      -0.1553609  0.0056716   -27.393  < 2e-16 ***\nDESTIN_SZSESZ03       0.5412776  0.0043801   123.576  < 2e-16 ***\nDESTIN_SZSESZ04      -0.6382091  0.0065411   -97.568  < 2e-16 ***\nDESTIN_SZSESZ05      -0.3332093  0.0055002   -60.581  < 2e-16 ***\nDESTIN_SZSESZ06      -0.3085951  0.0072340   -42.659  < 2e-16 ***\nDESTIN_SZSESZ07      -2.6237684  0.0245753  -106.764  < 2e-16 ***\nDESTIN_SZSGSZ01      -0.1062372  0.0066634   -15.943  < 2e-16 ***\nDESTIN_SZSGSZ02      -0.0475568  0.0058908    -8.073 6.85e-16 ***\nDESTIN_SZSGSZ03      -0.2118402  0.0055056   -38.477  < 2e-16 ***\nDESTIN_SZSGSZ04      -0.1099618  0.0054841   -20.051  < 2e-16 ***\nDESTIN_SZSGSZ05      -2.1556963  0.0113821  -189.394  < 2e-16 ***\nDESTIN_SZSGSZ06       0.4416352  0.0043842   100.734  < 2e-16 ***\nDESTIN_SZSGSZ07      -0.3949335  0.0059250   -66.655  < 2e-16 ***\nDESTIN_SZSISZ01      -1.2847094  0.0288610   -44.514  < 2e-16 ***\nDESTIN_SZSKSZ01       0.3089834  0.0082924    37.261  < 2e-16 ***\nDESTIN_SZSKSZ02       1.4139309  0.0059981   235.729  < 2e-16 ***\nDESTIN_SZSKSZ03       0.2427688  0.0067373    36.034  < 2e-16 ***\nDESTIN_SZSKSZ04      -0.2527488  0.0161286   -15.671  < 2e-16 ***\nDESTIN_SZSKSZ05       0.6046051  0.0122766    49.249  < 2e-16 ***\nDESTIN_SZSLSZ01      -0.3927387  0.0099790   -39.356  < 2e-16 ***\nDESTIN_SZSLSZ04      -0.5942110  0.0086225   -68.914  < 2e-16 ***\nDESTIN_SZSRSZ01      -2.6855766  0.0138707  -193.615  < 2e-16 ***\nDESTIN_SZTHSZ01      -3.2750084  0.0402668   -81.333  < 2e-16 ***\nDESTIN_SZTHSZ03      -1.7964408  0.0261810   -68.616  < 2e-16 ***\nDESTIN_SZTHSZ04      -2.6323994  0.0241831  -108.853  < 2e-16 ***\nDESTIN_SZTHSZ06      -1.9444390  0.0166052  -117.098  < 2e-16 ***\nDESTIN_SZTMSZ01       0.3856054  0.0063086    61.123  < 2e-16 ***\nDESTIN_SZTMSZ02       1.8586526  0.0039229   473.790  < 2e-16 ***\nDESTIN_SZTMSZ03       1.2601385  0.0044018   286.278  < 2e-16 ***\nDESTIN_SZTMSZ04       1.5884327  0.0043362   366.316  < 2e-16 ***\nDESTIN_SZTMSZ05       1.0377553  0.0063271   164.018  < 2e-16 ***\nDESTIN_SZTNSZ01      -0.9954275  0.0080345  -123.895  < 2e-16 ***\nDESTIN_SZTNSZ02      -2.1032696  0.0109228  -192.557  < 2e-16 ***\nDESTIN_SZTNSZ03      -2.0044892  0.0129215  -155.128  < 2e-16 ***\nDESTIN_SZTNSZ04      -0.9750326  0.0081677  -119.377  < 2e-16 ***\nDESTIN_SZTPSZ01      -0.7788383  0.0068769  -113.254  < 2e-16 ***\nDESTIN_SZTPSZ02       0.2866080  0.0042843    66.898  < 2e-16 ***\nDESTIN_SZTPSZ03      -0.8749841  0.0065470  -133.646  < 2e-16 ***\nDESTIN_SZTPSZ04      -1.6852792  0.0081488  -206.812  < 2e-16 ***\nDESTIN_SZTPSZ05      -1.3721346  0.0068230  -201.104  < 2e-16 ***\nDESTIN_SZTPSZ06      -0.7832133  0.0069164  -113.239  < 2e-16 ***\nDESTIN_SZTPSZ07      -2.3109126  0.0130830  -176.635  < 2e-16 ***\nDESTIN_SZTPSZ08      -1.6406531  0.0104897  -156.406  < 2e-16 ***\nDESTIN_SZTPSZ09      -0.5636273  0.0076848   -73.343  < 2e-16 ***\nDESTIN_SZTPSZ10      -1.5640843  0.0099984  -156.433  < 2e-16 ***\nDESTIN_SZTPSZ11      -0.3700482  0.0059834   -61.846  < 2e-16 ***\nDESTIN_SZTPSZ12      -0.8828228  0.0072302  -122.102  < 2e-16 ***\nDESTIN_SZTSSZ01       0.3529526  0.0221887    15.907  < 2e-16 ***\nDESTIN_SZTSSZ02       1.0265792  0.0153515    66.871  < 2e-16 ***\nDESTIN_SZTSSZ03       1.9647347  0.0092388   212.662  < 2e-16 ***\nDESTIN_SZTSSZ04       1.8649836  0.0089976   207.275  < 2e-16 ***\nDESTIN_SZTSSZ05       2.8437058  0.0085738   331.673  < 2e-16 ***\nDESTIN_SZTSSZ06       3.4238870  0.0161304   212.263  < 2e-16 ***\nDESTIN_SZWCSZ01       2.9550693  0.0051690   571.689  < 2e-16 ***\nDESTIN_SZWCSZ02      -0.8214103  0.0129213   -63.570  < 2e-16 ***\nDESTIN_SZWCSZ03      -1.7393427  0.0347472   -50.057  < 2e-16 ***\nDESTIN_SZWDSZ01       1.3424417  0.0039957   335.972  < 2e-16 ***\nDESTIN_SZWDSZ02      -0.2103694  0.0068601   -30.666  < 2e-16 ***\nDESTIN_SZWDSZ03       0.8268551  0.0051363   160.983  < 2e-16 ***\nDESTIN_SZWDSZ04      -0.0643997  0.0079076    -8.144 3.82e-16 ***\nDESTIN_SZWDSZ05       0.0451985  0.0075732     5.968 2.40e-09 ***\nDESTIN_SZWDSZ06       0.6981330  0.0051936   134.423  < 2e-16 ***\nDESTIN_SZWDSZ07      -0.0403233  0.0067749    -5.952 2.65e-09 ***\nDESTIN_SZWDSZ08       0.2850631  0.0069225    41.179  < 2e-16 ***\nDESTIN_SZWDSZ09       1.3016106  0.0050365   258.433  < 2e-16 ***\nDESTIN_SZYSSZ01       0.7598564  0.0044144   172.133  < 2e-16 ***\nDESTIN_SZYSSZ02       0.2648061  0.0058239    45.469  < 2e-16 ***\nDESTIN_SZYSSZ03      -0.0412163  0.0068337    -6.031 1.63e-09 ***\nDESTIN_SZYSSZ04      -0.0561054  0.0060829    -9.223  < 2e-16 ***\nDESTIN_SZYSSZ05      -0.9970159  0.0121827   -81.839  < 2e-16 ***\nDESTIN_SZYSSZ06      -1.3808376  0.0125738  -109.819  < 2e-16 ***\nDESTIN_SZYSSZ07      -0.7128364  0.0165296   -43.125  < 2e-16 ***\nDESTIN_SZYSSZ08       0.9409510  0.0045886   205.064  < 2e-16 ***\nDESTIN_SZYSSZ09       0.3738436  0.0047971    77.930  < 2e-16 ***\nlog(ORIGIN_AGE25_64)  0.1928847  0.0001667  1157.214  < 2e-16 ***\nlog(dist)            -1.7828141  0.0004794 -3718.501  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance: 12319763  on 13992  degrees of freedom\nAIC: 12404881\n\nNumber of Fisher Scoring iterations: 7\n\n\n\nCalcRSquared(decSIM$data$TRIPS, decSIM$fitted.values)\n\n[1] 0.496166"
  },
  {
    "objectID": "In-Class-Exercises/chapter-15/ICE12.html#doubly-constrained",
    "href": "In-Class-Exercises/chapter-15/ICE12.html#doubly-constrained",
    "title": "In-Class Exercise 12: Spatial Interaction Models",
    "section": "Doubly Constrained",
    "text": "Doubly Constrained\nPurely spatial interaction\n\ndbcSIM <- glm(formula = TRIPS ~ \n                ORIGIN_SZ + \n                DESTIN_SZ + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(dbcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(dist), family = poisson(link = \"log\"), \n    data = SIM_data, na.action = na.exclude)\n\nDeviance Residuals: \n     Min        1Q    Median        3Q       Max  \n-159.373   -12.413    -4.694     2.892   270.252  \n\nCoefficients:\n                  Estimate Std. Error   z value Pr(>|z|)    \n(Intercept)     21.9587595  0.0066831  3285.715  < 2e-16 ***\nORIGIN_SZAMSZ02  0.4778050  0.0054127    88.275  < 2e-16 ***\nORIGIN_SZAMSZ03  0.2895973  0.0055517    52.163  < 2e-16 ***\nORIGIN_SZAMSZ04 -0.2628080  0.0060720   -43.282  < 2e-16 ***\nORIGIN_SZAMSZ05 -0.2631404  0.0069008   -38.132  < 2e-16 ***\nORIGIN_SZAMSZ06  0.1722337  0.0062028    27.767  < 2e-16 ***\nORIGIN_SZAMSZ07 -0.9883200  0.0111224   -88.859  < 2e-16 ***\nORIGIN_SZAMSZ08 -0.4052821  0.0104095   -38.934  < 2e-16 ***\nORIGIN_SZAMSZ09  0.0356290  0.0064816     5.497 3.86e-08 ***\nORIGIN_SZAMSZ10  0.4815569  0.0055521    86.735  < 2e-16 ***\nORIGIN_SZAMSZ11 -1.4440079  0.0146079   -98.851  < 2e-16 ***\nORIGIN_SZAMSZ12 -1.7862677  0.0128071  -139.475  < 2e-16 ***\nORIGIN_SZBDSZ01  0.8653749  0.0054381   159.132  < 2e-16 ***\nORIGIN_SZBDSZ02  0.0841000  0.0062834    13.385  < 2e-16 ***\nORIGIN_SZBDSZ03  0.3158343  0.0057510    54.918  < 2e-16 ***\nORIGIN_SZBDSZ04  1.4556701  0.0049986   291.215  < 2e-16 ***\nORIGIN_SZBDSZ05  0.6363125  0.0057193   111.257  < 2e-16 ***\nORIGIN_SZBDSZ06  0.6749341  0.0058650   115.078  < 2e-16 ***\nORIGIN_SZBDSZ07 -1.2176407  0.0113698  -107.095  < 2e-16 ***\nORIGIN_SZBDSZ08 -0.9803580  0.0105604   -92.833  < 2e-16 ***\nORIGIN_SZBKSZ01 -0.2919642  0.0080763   -36.151  < 2e-16 ***\nORIGIN_SZBKSZ02  0.4609570  0.0067997    67.791  < 2e-16 ***\nORIGIN_SZBKSZ03  0.6273448  0.0065989    95.068  < 2e-16 ***\nORIGIN_SZBKSZ04 -0.2499063  0.0076555   -32.644  < 2e-16 ***\nORIGIN_SZBKSZ05 -0.2628428  0.0078905   -33.311  < 2e-16 ***\nORIGIN_SZBKSZ06 -0.2174034  0.0075134   -28.936  < 2e-16 ***\nORIGIN_SZBKSZ07  0.7094093  0.0058574   121.114  < 2e-16 ***\nORIGIN_SZBKSZ08 -0.1614362  0.0067626   -23.872  < 2e-16 ***\nORIGIN_SZBKSZ09 -0.2739085  0.0072969   -37.537  < 2e-16 ***\nORIGIN_SZBLSZ01 -2.4281074  0.0181172  -134.022  < 2e-16 ***\nORIGIN_SZBLSZ02 -2.7305447  0.0219341  -124.489  < 2e-16 ***\nORIGIN_SZBLSZ03 -3.3071431  0.0540398   -61.198  < 2e-16 ***\nORIGIN_SZBLSZ04 -2.4550671  0.0263946   -93.014  < 2e-16 ***\nORIGIN_SZBMSZ01  0.1198976  0.0065964    18.176  < 2e-16 ***\nORIGIN_SZBMSZ02 -1.3908667  0.0083230  -167.112  < 2e-16 ***\nORIGIN_SZBMSZ03 -0.6999122  0.0069754  -100.339  < 2e-16 ***\nORIGIN_SZBMSZ04 -0.2691159  0.0066184   -40.662  < 2e-16 ***\nORIGIN_SZBMSZ05 -2.6163780  0.0190989  -136.991  < 2e-16 ***\nORIGIN_SZBMSZ06 -2.9729956  0.0197182  -150.774  < 2e-16 ***\nORIGIN_SZBMSZ07 -0.7309916  0.0072407  -100.956  < 2e-16 ***\nORIGIN_SZBMSZ08 -1.0019514  0.0073169  -136.936  < 2e-16 ***\nORIGIN_SZBMSZ09 -1.3667460  0.0105325  -129.764  < 2e-16 ***\nORIGIN_SZBMSZ10 -1.6907268  0.0106687  -158.476  < 2e-16 ***\nORIGIN_SZBMSZ11 -1.2288802  0.0082919  -148.202  < 2e-16 ***\nORIGIN_SZBMSZ12 -1.6517767  0.0115101  -143.507  < 2e-16 ***\nORIGIN_SZBMSZ13 -0.7251351  0.0075289   -96.314  < 2e-16 ***\nORIGIN_SZBMSZ14 -1.1534912  0.0082629  -139.599  < 2e-16 ***\nORIGIN_SZBMSZ15 -0.5476774  0.0075710   -72.339  < 2e-16 ***\nORIGIN_SZBMSZ16 -1.5195034  0.0111459  -136.329  < 2e-16 ***\nORIGIN_SZBMSZ17 -1.6026767  0.0184419   -86.904  < 2e-16 ***\nORIGIN_SZBPSZ01  0.5571291  0.0071866    77.523  < 2e-16 ***\nORIGIN_SZBPSZ02  0.0523197  0.0082259     6.360 2.01e-10 ***\nORIGIN_SZBPSZ03  0.2942047  0.0080482    36.555  < 2e-16 ***\nORIGIN_SZBPSZ04  0.6246296  0.0065878    94.816  < 2e-16 ***\nORIGIN_SZBPSZ05  0.8663708  0.0060852   142.372  < 2e-16 ***\nORIGIN_SZBPSZ06 -0.9896182  0.0109551   -90.334  < 2e-16 ***\nORIGIN_SZBPSZ07 -0.5219250  0.0101830   -51.255  < 2e-16 ***\nORIGIN_SZBSSZ01  0.3299588  0.0066440    49.663  < 2e-16 ***\nORIGIN_SZBSSZ02  0.2851357  0.0057077    49.956  < 2e-16 ***\nORIGIN_SZBSSZ03 -0.2084740  0.0063364   -32.901  < 2e-16 ***\nORIGIN_SZBTSZ01  0.1425664  0.0071103    20.051  < 2e-16 ***\nORIGIN_SZBTSZ02 -0.5591999  0.0093616   -59.733  < 2e-16 ***\nORIGIN_SZBTSZ03 -0.3648190  0.0081677   -44.666  < 2e-16 ***\nORIGIN_SZBTSZ04 -1.4555078  0.0120138  -121.152  < 2e-16 ***\nORIGIN_SZBTSZ05 -0.8635510  0.0133848   -64.517  < 2e-16 ***\nORIGIN_SZBTSZ06 -1.1383111  0.0106421  -106.963  < 2e-16 ***\nORIGIN_SZBTSZ07 -2.3477669  0.0160858  -145.953  < 2e-16 ***\nORIGIN_SZBTSZ08 -1.2918779  0.0124862  -103.464  < 2e-16 ***\nORIGIN_SZCBSZ01 -3.3713588  0.0578683   -58.259  < 2e-16 ***\nORIGIN_SZCCSZ01 -0.6029242  0.0153385   -39.308  < 2e-16 ***\nORIGIN_SZCHSZ01 -0.7641380  0.0135100   -56.561  < 2e-16 ***\nORIGIN_SZCHSZ02 -0.8400736  0.0101951   -82.400  < 2e-16 ***\nORIGIN_SZCHSZ03  1.2753127  0.0072576   175.720  < 2e-16 ***\nORIGIN_SZCKSZ01  0.2470943  0.0067135    36.806  < 2e-16 ***\nORIGIN_SZCKSZ02  0.5793581  0.0070498    82.181  < 2e-16 ***\nORIGIN_SZCKSZ03  1.0795767  0.0060642   178.025  < 2e-16 ***\nORIGIN_SZCKSZ04  1.4947920  0.0063122   236.808  < 2e-16 ***\nORIGIN_SZCKSZ05  0.7457580  0.0074071   100.681  < 2e-16 ***\nORIGIN_SZCKSZ06  0.5760952  0.0094861    60.730  < 2e-16 ***\nORIGIN_SZCLSZ01 -0.9061335  0.0098617   -91.884  < 2e-16 ***\nORIGIN_SZCLSZ02 -1.7609479  0.0156124  -112.791  < 2e-16 ***\nORIGIN_SZCLSZ03 -1.0081325  0.0095171  -105.929  < 2e-16 ***\nORIGIN_SZCLSZ04  0.6181200  0.0057953   106.659  < 2e-16 ***\nORIGIN_SZCLSZ05 -2.0462335  0.0168934  -121.127  < 2e-16 ***\nORIGIN_SZCLSZ06  0.7902389  0.0055680   141.924  < 2e-16 ***\nORIGIN_SZCLSZ07 -0.5472929  0.0071001   -77.082  < 2e-16 ***\nORIGIN_SZCLSZ08 -0.2197650  0.0077460   -28.372  < 2e-16 ***\nORIGIN_SZCLSZ09 -1.8175782  0.0195989   -92.739  < 2e-16 ***\nORIGIN_SZDTSZ02 -3.7618796  0.0872098   -43.136  < 2e-16 ***\nORIGIN_SZDTSZ03 -3.4514766  0.0840812   -41.049  < 2e-16 ***\nORIGIN_SZDTSZ13 -3.0627578  0.0352485   -86.891  < 2e-16 ***\nORIGIN_SZGLSZ01 -1.8055929  0.0111938  -161.303  < 2e-16 ***\nORIGIN_SZGLSZ02 -0.1588829  0.0061413   -25.871  < 2e-16 ***\nORIGIN_SZGLSZ03 -0.2508524  0.0064276   -39.027  < 2e-16 ***\nORIGIN_SZGLSZ04  0.8819358  0.0051993   169.627  < 2e-16 ***\nORIGIN_SZGLSZ05  0.6062778  0.0053735   112.828  < 2e-16 ***\nORIGIN_SZHGSZ01  0.3841503  0.0056776    67.660  < 2e-16 ***\nORIGIN_SZHGSZ02  0.3962330  0.0057579    68.815  < 2e-16 ***\nORIGIN_SZHGSZ03  0.2159531  0.0061671    35.017  < 2e-16 ***\nORIGIN_SZHGSZ04  0.7831941  0.0052216   149.992  < 2e-16 ***\nORIGIN_SZHGSZ05  1.1741558  0.0051799   226.677  < 2e-16 ***\nORIGIN_SZHGSZ06 -0.1891403  0.0065556   -28.852  < 2e-16 ***\nORIGIN_SZHGSZ07  0.3105421  0.0057186    54.304  < 2e-16 ***\nORIGIN_SZHGSZ08 -0.0766364  0.0063474   -12.074  < 2e-16 ***\nORIGIN_SZHGSZ09 -1.2211107  0.0101434  -120.384  < 2e-16 ***\nORIGIN_SZHGSZ10 -3.4844709  0.0504793   -69.028  < 2e-16 ***\nORIGIN_SZJESZ01  0.4916496  0.0063444    77.493  < 2e-16 ***\nORIGIN_SZJESZ02  0.1343893  0.0063762    21.077  < 2e-16 ***\nORIGIN_SZJESZ03 -0.2761723  0.0068085   -40.563  < 2e-16 ***\nORIGIN_SZJESZ04 -1.5932744  0.0121402  -131.240  < 2e-16 ***\nORIGIN_SZJESZ05 -2.3041311  0.0160245  -143.788  < 2e-16 ***\nORIGIN_SZJESZ06  0.2811076  0.0062495    44.981  < 2e-16 ***\nORIGIN_SZJESZ07 -1.9413956  0.0136276  -142.461  < 2e-16 ***\nORIGIN_SZJESZ08 -1.3315645  0.0143168   -93.007  < 2e-16 ***\nORIGIN_SZJESZ09  0.4418314  0.0069208    63.841  < 2e-16 ***\nORIGIN_SZJESZ10 -1.5551555  0.0236523   -65.751  < 2e-16 ***\nORIGIN_SZJESZ11 -1.8888230  0.0224630   -84.086  < 2e-16 ***\nORIGIN_SZJWSZ01  0.2564586  0.0084699    30.279  < 2e-16 ***\nORIGIN_SZJWSZ02  0.6899398  0.0061751   111.729  < 2e-16 ***\nORIGIN_SZJWSZ03  1.4761229  0.0057392   257.198  < 2e-16 ***\nORIGIN_SZJWSZ04  0.5701272  0.0065749    86.713  < 2e-16 ***\nORIGIN_SZJWSZ05 -2.1253657  0.0150769  -140.968  < 2e-16 ***\nORIGIN_SZJWSZ06 -1.5307265  0.0131906  -116.047  < 2e-16 ***\nORIGIN_SZJWSZ07 -2.8801618  0.0360772   -79.833  < 2e-16 ***\nORIGIN_SZJWSZ08  1.4428820  0.0059638   241.938  < 2e-16 ***\nORIGIN_SZJWSZ09  1.8968475  0.0055649   340.860  < 2e-16 ***\nORIGIN_SZKLSZ01  0.1116580  0.0059844    18.658  < 2e-16 ***\nORIGIN_SZKLSZ02 -0.9618787  0.0077344  -124.364  < 2e-16 ***\nORIGIN_SZKLSZ03 -0.7070626  0.0070275  -100.613  < 2e-16 ***\nORIGIN_SZKLSZ04 -2.2742765  0.0139991  -162.459  < 2e-16 ***\nORIGIN_SZKLSZ05 -1.1907262  0.0123719   -96.244  < 2e-16 ***\nORIGIN_SZKLSZ06 -5.9774897  0.1857994   -32.172  < 2e-16 ***\nORIGIN_SZKLSZ07 -1.4258369  0.0103083  -138.320  < 2e-16 ***\nORIGIN_SZKLSZ08 -1.7625888  0.0116107  -151.808  < 2e-16 ***\nORIGIN_SZLKSZ01 -2.0541388  0.0448216   -45.829  < 2e-16 ***\nORIGIN_SZMDSZ01 -0.8571117  0.0321054   -26.697  < 2e-16 ***\nORIGIN_SZMDSZ02 -0.6034597  0.0120724   -49.987  < 2e-16 ***\nORIGIN_SZMDSZ03 -2.1681163  0.0201078  -107.825  < 2e-16 ***\nORIGIN_SZMPSZ01 -0.9331562  0.0096218   -96.984  < 2e-16 ***\nORIGIN_SZMPSZ02 -1.0268229  0.0081379  -126.178  < 2e-16 ***\nORIGIN_SZMPSZ03  0.0054001  0.0066875     0.807 0.419385    \nORIGIN_SZMUSZ02 -3.6269863  0.1105492   -32.809  < 2e-16 ***\nORIGIN_SZNTSZ01 -3.0593717  0.0399843   -76.514  < 2e-16 ***\nORIGIN_SZNTSZ02 -3.3331415  0.0251754  -132.397  < 2e-16 ***\nORIGIN_SZNTSZ03 -0.8351522  0.0090372   -92.413  < 2e-16 ***\nORIGIN_SZNTSZ05 -4.2082472  0.0583343   -72.140  < 2e-16 ***\nORIGIN_SZNTSZ06 -3.8549296  0.0593793   -64.920  < 2e-16 ***\nORIGIN_SZNVSZ01  0.2789069  0.0056024    49.784  < 2e-16 ***\nORIGIN_SZNVSZ02 -0.6036857  0.0077126   -78.273  < 2e-16 ***\nORIGIN_SZNVSZ03 -1.0072683  0.0092678  -108.685  < 2e-16 ***\nORIGIN_SZNVSZ04 -0.8723996  0.0101399   -86.037  < 2e-16 ***\nORIGIN_SZNVSZ05 -2.1552928  0.0183064  -117.734  < 2e-16 ***\nORIGIN_SZPGSZ01  0.0520607  0.0157846     3.298 0.000973 ***\nORIGIN_SZPGSZ02 -0.3481687  0.0089328   -38.976  < 2e-16 ***\nORIGIN_SZPGSZ03  0.9095292  0.0058835   154.590  < 2e-16 ***\nORIGIN_SZPGSZ04  1.3653717  0.0054727   249.489  < 2e-16 ***\nORIGIN_SZPGSZ05  0.3762720  0.0073841    50.957  < 2e-16 ***\nORIGIN_SZPLSZ01 -0.9142754  0.0136552   -66.954  < 2e-16 ***\nORIGIN_SZPLSZ02 -1.0987582  0.0175891   -62.468  < 2e-16 ***\nORIGIN_SZPLSZ03 -2.3427113  0.0474176   -49.406  < 2e-16 ***\nORIGIN_SZPLSZ04 -2.9140779  0.0374458   -77.821  < 2e-16 ***\nORIGIN_SZPLSZ05 -2.2381965  0.0261572   -85.567  < 2e-16 ***\nORIGIN_SZPNSZ01  0.9659006  0.0075177   128.484  < 2e-16 ***\nORIGIN_SZPNSZ02 -0.0158348  0.0143869    -1.101 0.271053    \nORIGIN_SZPNSZ03 -2.1837321  0.0224396   -97.316  < 2e-16 ***\nORIGIN_SZPNSZ04 -3.2481509  0.0370762   -87.608  < 2e-16 ***\nORIGIN_SZPNSZ05 -2.0450679  0.0328165   -62.318  < 2e-16 ***\nORIGIN_SZPRSZ01 -0.6701245  0.0141567   -47.336  < 2e-16 ***\nORIGIN_SZPRSZ02  0.7931907  0.0058079   136.570  < 2e-16 ***\nORIGIN_SZPRSZ03  0.4249094  0.0058610    72.498  < 2e-16 ***\nORIGIN_SZPRSZ04 -0.8529967  0.0090997   -93.739  < 2e-16 ***\nORIGIN_SZPRSZ05  0.7865479  0.0055282   142.278  < 2e-16 ***\nORIGIN_SZPRSZ06 -1.3303664  0.0134512   -98.903  < 2e-16 ***\nORIGIN_SZPRSZ07 -3.0458370  0.0181514  -167.802  < 2e-16 ***\nORIGIN_SZPRSZ08 -0.5342399  0.0075966   -70.327  < 2e-16 ***\nORIGIN_SZQTSZ01 -0.2548930  0.0086485   -29.473  < 2e-16 ***\nORIGIN_SZQTSZ02 -0.8662439  0.0076549  -113.162  < 2e-16 ***\nORIGIN_SZQTSZ03 -0.0890168  0.0072455   -12.286  < 2e-16 ***\nORIGIN_SZQTSZ04 -1.4634370  0.0089384  -163.724  < 2e-16 ***\nORIGIN_SZQTSZ05 -0.6535669  0.0077612   -84.210  < 2e-16 ***\nORIGIN_SZQTSZ06 -0.8275765  0.0081835  -101.128  < 2e-16 ***\nORIGIN_SZQTSZ07 -1.5369800  0.0112808  -136.248  < 2e-16 ***\nORIGIN_SZQTSZ08 -0.4437979  0.0075302   -58.936  < 2e-16 ***\nORIGIN_SZQTSZ09 -0.8184934  0.0083589   -97.918  < 2e-16 ***\nORIGIN_SZQTSZ10 -0.6906597  0.0080980   -85.288  < 2e-16 ***\nORIGIN_SZQTSZ11 -2.3251162  0.0154191  -150.795  < 2e-16 ***\nORIGIN_SZQTSZ12 -3.0442790  0.0208985  -145.670  < 2e-16 ***\nORIGIN_SZQTSZ13 -0.7241013  0.0093441   -77.493  < 2e-16 ***\nORIGIN_SZQTSZ14 -1.8225351  0.0138207  -131.870  < 2e-16 ***\nORIGIN_SZQTSZ15 -0.8720806  0.0138589   -62.926  < 2e-16 ***\nORIGIN_SZRCSZ01 -1.8063415  0.0144295  -125.184  < 2e-16 ***\nORIGIN_SZRCSZ06 -0.5370905  0.0101573   -52.877  < 2e-16 ***\nORIGIN_SZRVSZ01 -2.7426167  0.0341386   -80.338  < 2e-16 ***\nORIGIN_SZRVSZ02 -3.0827269  0.0302299  -101.976  < 2e-16 ***\nORIGIN_SZRVSZ03 -2.9133853  0.0262543  -110.968  < 2e-16 ***\nORIGIN_SZRVSZ04 -3.4220022  0.0582209   -58.776  < 2e-16 ***\nORIGIN_SZRVSZ05 -2.6206257  0.0197470  -132.710  < 2e-16 ***\nORIGIN_SZSBSZ01  0.1010337  0.0085117    11.870  < 2e-16 ***\nORIGIN_SZSBSZ02 -0.8810456  0.0098244   -89.680  < 2e-16 ***\nORIGIN_SZSBSZ03  0.8303668  0.0063009   131.785  < 2e-16 ***\nORIGIN_SZSBSZ04  0.3489128  0.0071456    48.829  < 2e-16 ***\nORIGIN_SZSBSZ05 -0.3182914  0.0085560   -37.201  < 2e-16 ***\nORIGIN_SZSBSZ06 -0.9074308  0.0200035   -45.364  < 2e-16 ***\nORIGIN_SZSBSZ07 -0.2217124  0.0167188   -13.261  < 2e-16 ***\nORIGIN_SZSBSZ08 -1.3007367  0.0178771   -72.760  < 2e-16 ***\nORIGIN_SZSBSZ09 -0.9813703  0.0107885   -90.965  < 2e-16 ***\nORIGIN_SZSESZ02  1.1283424  0.0054209   208.146  < 2e-16 ***\nORIGIN_SZSESZ03  1.2389996  0.0051926   238.610  < 2e-16 ***\nORIGIN_SZSESZ04  0.7535119  0.0060371   124.814  < 2e-16 ***\nORIGIN_SZSESZ05 -0.2347978  0.0071482   -32.847  < 2e-16 ***\nORIGIN_SZSESZ06  0.9520620  0.0057572   165.368  < 2e-16 ***\nORIGIN_SZSESZ07 -2.4296685  0.0231677  -104.873  < 2e-16 ***\nORIGIN_SZSGSZ01 -0.6995899  0.0099969   -69.980  < 2e-16 ***\nORIGIN_SZSGSZ02 -1.2602157  0.0111471  -113.053  < 2e-16 ***\nORIGIN_SZSGSZ03  0.0725860  0.0061970    11.713  < 2e-16 ***\nORIGIN_SZSGSZ04  0.2738315  0.0057524    47.603  < 2e-16 ***\nORIGIN_SZSGSZ05 -2.0207710  0.0119838  -168.625  < 2e-16 ***\nORIGIN_SZSGSZ06  0.4885608  0.0054646    89.404  < 2e-16 ***\nORIGIN_SZSGSZ07 -0.8892155  0.0075074  -118.445  < 2e-16 ***\nORIGIN_SZSKSZ01 -0.3682754  0.0108025   -34.092  < 2e-16 ***\nORIGIN_SZSKSZ02  1.1826086  0.0071388   165.659  < 2e-16 ***\nORIGIN_SZSKSZ03 -0.3230177  0.0101683   -31.767  < 2e-16 ***\nORIGIN_SZSKSZ04 -1.8504236  0.0362400   -51.060  < 2e-16 ***\nORIGIN_SZSKSZ05 -0.2759035  0.0185157   -14.901  < 2e-16 ***\nORIGIN_SZSLSZ01 -2.2757902  0.0348766   -65.253  < 2e-16 ***\nORIGIN_SZSLSZ04 -0.0899820  0.0090356    -9.959  < 2e-16 ***\nORIGIN_SZSRSZ01 -2.1460151  0.0187871  -114.228  < 2e-16 ***\nORIGIN_SZTHSZ01 -2.6851549  0.0571841   -46.956  < 2e-16 ***\nORIGIN_SZTHSZ03 -1.0121495  0.0275551   -36.732  < 2e-16 ***\nORIGIN_SZTHSZ04 -2.6129645  0.0345167   -75.701  < 2e-16 ***\nORIGIN_SZTHSZ06 -1.7229100  0.0208134   -82.779  < 2e-16 ***\nORIGIN_SZTMSZ01 -0.2254986  0.0070312   -32.071  < 2e-16 ***\nORIGIN_SZTMSZ02  1.7271575  0.0049219   350.914  < 2e-16 ***\nORIGIN_SZTMSZ03  0.9891319  0.0052266   189.250  < 2e-16 ***\nORIGIN_SZTMSZ04  0.2018090  0.0062114    32.490  < 2e-16 ***\nORIGIN_SZTMSZ05 -1.1882870  0.0125842   -94.427  < 2e-16 ***\nORIGIN_SZTNSZ01 -1.6122620  0.0141911  -113.611  < 2e-16 ***\nORIGIN_SZTNSZ02 -1.5630967  0.0112227  -139.280  < 2e-16 ***\nORIGIN_SZTNSZ03 -2.0739538  0.0149298  -138.914  < 2e-16 ***\nORIGIN_SZTNSZ04 -0.2816960  0.0085295   -33.026  < 2e-16 ***\nORIGIN_SZTPSZ01 -0.7822239  0.0077901  -100.412  < 2e-16 ***\nORIGIN_SZTPSZ02  0.5735478  0.0053042   108.131  < 2e-16 ***\nORIGIN_SZTPSZ03 -0.8748650  0.0074202  -117.903  < 2e-16 ***\nORIGIN_SZTPSZ04 -0.8537831  0.0069792  -122.332  < 2e-16 ***\nORIGIN_SZTPSZ05 -0.5581114  0.0077012   -72.471  < 2e-16 ***\nORIGIN_SZTPSZ06  0.0262001  0.0075241     3.482 0.000497 ***\nORIGIN_SZTPSZ07 -0.5969952  0.0074272   -80.380  < 2e-16 ***\nORIGIN_SZTPSZ08 -1.0537959  0.0111297   -94.683  < 2e-16 ***\nORIGIN_SZTPSZ09 -0.9588508  0.0081314  -117.920  < 2e-16 ***\nORIGIN_SZTPSZ10 -1.1177249  0.0089403  -125.021  < 2e-16 ***\nORIGIN_SZTPSZ11 -0.2799677  0.0067135   -41.702  < 2e-16 ***\nORIGIN_SZTPSZ12 -0.8898871  0.0080215  -110.938  < 2e-16 ***\nORIGIN_SZTSSZ01 -2.6146463  0.0521606   -50.127  < 2e-16 ***\nORIGIN_SZTSSZ02  0.1682588  0.0119965    14.026  < 2e-16 ***\nORIGIN_SZTSSZ03  0.2587653  0.0123809    20.900  < 2e-16 ***\nORIGIN_SZTSSZ04 -0.5473825  0.0135215   -40.482  < 2e-16 ***\nORIGIN_SZTSSZ05 -0.9967379  0.0206068   -48.369  < 2e-16 ***\nORIGIN_SZTSSZ06  0.4933147  0.0229597    21.486  < 2e-16 ***\nORIGIN_SZWCSZ01  1.2524706  0.0111133   112.700  < 2e-16 ***\nORIGIN_SZWCSZ02 -2.8544820  0.0347805   -82.071  < 2e-16 ***\nORIGIN_SZWCSZ03 -5.1277334  0.1475585   -34.751  < 2e-16 ***\nORIGIN_SZWDSZ01  1.4725308  0.0056496   260.645  < 2e-16 ***\nORIGIN_SZWDSZ02  0.1571680  0.0064909    24.214  < 2e-16 ***\nORIGIN_SZWDSZ03  1.2584097  0.0061471   204.717  < 2e-16 ***\nORIGIN_SZWDSZ04  0.8578765  0.0069277   123.833  < 2e-16 ***\nORIGIN_SZWDSZ05  0.1702728  0.0069687    24.434  < 2e-16 ***\nORIGIN_SZWDSZ06  0.1736910  0.0069507    24.989  < 2e-16 ***\nORIGIN_SZWDSZ07 -1.5610176  0.0100803  -154.859  < 2e-16 ***\nORIGIN_SZWDSZ08 -0.9490906  0.0102047   -93.005  < 2e-16 ***\nORIGIN_SZWDSZ09  1.2107011  0.0062294   194.354  < 2e-16 ***\nORIGIN_SZYSSZ01 -0.3324158  0.0074537   -44.598  < 2e-16 ***\nORIGIN_SZYSSZ02  0.8177113  0.0066108   123.693  < 2e-16 ***\nORIGIN_SZYSSZ03  1.6751777  0.0058470   286.503  < 2e-16 ***\nORIGIN_SZYSSZ04  0.8130044  0.0059025   137.738  < 2e-16 ***\nORIGIN_SZYSSZ05  0.3678420  0.0072431    50.785  < 2e-16 ***\nORIGIN_SZYSSZ06 -0.6024384  0.0126722   -47.540  < 2e-16 ***\nORIGIN_SZYSSZ07 -0.7631918  0.0158478   -48.157  < 2e-16 ***\nORIGIN_SZYSSZ08  0.2141930  0.0076154    28.126  < 2e-16 ***\nORIGIN_SZYSSZ09  1.0809368  0.0057973   186.457  < 2e-16 ***\nDESTIN_SZAMSZ02  0.0761304  0.0051207    14.867  < 2e-16 ***\nDESTIN_SZAMSZ03  0.0143394  0.0050755     2.825 0.004724 ** \nDESTIN_SZAMSZ04 -1.2516780  0.0074947  -167.008  < 2e-16 ***\nDESTIN_SZAMSZ05 -1.2312375  0.0076598  -160.741  < 2e-16 ***\nDESTIN_SZAMSZ06 -1.0333412  0.0075283  -137.261  < 2e-16 ***\nDESTIN_SZAMSZ07 -1.5338249  0.0110036  -139.392  < 2e-16 ***\nDESTIN_SZAMSZ08 -0.3751665  0.0075358   -49.784  < 2e-16 ***\nDESTIN_SZAMSZ09 -1.1633493  0.0077556  -150.001  < 2e-16 ***\nDESTIN_SZAMSZ10  0.1017717  0.0053151    19.148  < 2e-16 ***\nDESTIN_SZAMSZ11 -0.8840362  0.0097007   -91.131  < 2e-16 ***\nDESTIN_SZAMSZ12  0.1628123  0.0055220    29.484  < 2e-16 ***\nDESTIN_SZBDSZ01  1.0040794  0.0047922   209.523  < 2e-16 ***\nDESTIN_SZBDSZ02 -0.2478149  0.0063085   -39.283  < 2e-16 ***\nDESTIN_SZBDSZ03  0.1016088  0.0057420    17.696  < 2e-16 ***\nDESTIN_SZBDSZ04  1.1082928  0.0047747   232.116  < 2e-16 ***\nDESTIN_SZBDSZ05  0.8737933  0.0050593   172.712  < 2e-16 ***\nDESTIN_SZBDSZ06  0.2897032  0.0058244    49.740  < 2e-16 ***\nDESTIN_SZBDSZ07 -0.9026193  0.0113656   -79.416  < 2e-16 ***\nDESTIN_SZBDSZ08 -1.7063577  0.0131234  -130.024  < 2e-16 ***\nDESTIN_SZBKSZ01 -1.3892839  0.0083307  -166.767  < 2e-16 ***\nDESTIN_SZBKSZ02 -0.6661120  0.0073464   -90.672  < 2e-16 ***\nDESTIN_SZBKSZ03 -0.9536826  0.0073196  -130.292  < 2e-16 ***\nDESTIN_SZBKSZ04 -0.6655610  0.0065868  -101.044  < 2e-16 ***\nDESTIN_SZBKSZ05 -0.9053119  0.0079264  -114.215  < 2e-16 ***\nDESTIN_SZBKSZ06 -1.2622159  0.0075079  -168.119  < 2e-16 ***\nDESTIN_SZBKSZ07 -0.0423370  0.0056686    -7.469 8.10e-14 ***\nDESTIN_SZBKSZ08 -1.3811240  0.0084985  -162.515  < 2e-16 ***\nDESTIN_SZBKSZ09 -0.0797012  0.0061428   -12.975  < 2e-16 ***\nDESTIN_SZBLSZ01 -0.8859670  0.0088108  -100.555  < 2e-16 ***\nDESTIN_SZBLSZ02  0.1362723  0.0082167    16.585  < 2e-16 ***\nDESTIN_SZBLSZ03  1.2037396  0.0093508   128.732  < 2e-16 ***\nDESTIN_SZBLSZ04 -0.9316219  0.0178080   -52.315  < 2e-16 ***\nDESTIN_SZBMSZ01  0.7188470  0.0061160   117.536  < 2e-16 ***\nDESTIN_SZBMSZ02 -0.0597895  0.0061206    -9.769  < 2e-16 ***\nDESTIN_SZBMSZ03 -0.2427075  0.0069937   -34.704  < 2e-16 ***\nDESTIN_SZBMSZ04 -0.0622494  0.0065569    -9.494  < 2e-16 ***\nDESTIN_SZBMSZ05 -0.2857019  0.0086450   -33.048  < 2e-16 ***\nDESTIN_SZBMSZ06 -1.3486558  0.0158904   -84.872  < 2e-16 ***\nDESTIN_SZBMSZ07  0.4549687  0.0058315    78.020  < 2e-16 ***\nDESTIN_SZBMSZ08 -0.8730268  0.0077814  -112.195  < 2e-16 ***\nDESTIN_SZBMSZ09 -2.0319890  0.0163038  -124.633  < 2e-16 ***\nDESTIN_SZBMSZ10 -1.4319101  0.0102616  -139.541  < 2e-16 ***\nDESTIN_SZBMSZ11 -1.2429176  0.0092250  -134.733  < 2e-16 ***\nDESTIN_SZBMSZ12 -0.8526549  0.0096009   -88.810  < 2e-16 ***\nDESTIN_SZBMSZ13  0.1399907  0.0066885    20.930  < 2e-16 ***\nDESTIN_SZBMSZ14 -1.0103155  0.0091377  -110.566  < 2e-16 ***\nDESTIN_SZBMSZ15 -0.6819769  0.0086179   -79.135  < 2e-16 ***\nDESTIN_SZBMSZ16 -1.4468308  0.0134051  -107.931  < 2e-16 ***\nDESTIN_SZBMSZ17 -1.5312175  0.0186843   -81.952  < 2e-16 ***\nDESTIN_SZBPSZ01 -1.1726725  0.0073257  -160.077  < 2e-16 ***\nDESTIN_SZBPSZ02 -2.1072012  0.0103320  -203.949  < 2e-16 ***\nDESTIN_SZBPSZ03 -1.6944911  0.0098520  -171.995  < 2e-16 ***\nDESTIN_SZBPSZ04 -0.7664610  0.0074458  -102.939  < 2e-16 ***\nDESTIN_SZBPSZ05  0.1358370  0.0056258    24.145  < 2e-16 ***\nDESTIN_SZBPSZ06 -1.2425471  0.0096942  -128.175  < 2e-16 ***\nDESTIN_SZBPSZ07 -0.1666192  0.0094969   -17.545  < 2e-16 ***\nDESTIN_SZBSSZ01  0.3857894  0.0057261    67.374  < 2e-16 ***\nDESTIN_SZBSSZ02 -0.5293265  0.0064886   -81.578  < 2e-16 ***\nDESTIN_SZBSSZ03  0.3909966  0.0048540    80.551  < 2e-16 ***\nDESTIN_SZBTSZ01  0.7114965  0.0054528   130.482  < 2e-16 ***\nDESTIN_SZBTSZ02 -0.0487084  0.0082474    -5.906 3.51e-09 ***\nDESTIN_SZBTSZ03  0.5539032  0.0064423    85.979  < 2e-16 ***\nDESTIN_SZBTSZ04 -0.7120734  0.0128676   -55.339  < 2e-16 ***\nDESTIN_SZBTSZ05  0.2176097  0.0086791    25.073  < 2e-16 ***\nDESTIN_SZBTSZ06 -0.2167084  0.0084925   -25.518  < 2e-16 ***\nDESTIN_SZBTSZ07 -1.4045618  0.0124363  -112.940  < 2e-16 ***\nDESTIN_SZBTSZ08 -0.8213918  0.0120793   -68.000  < 2e-16 ***\nDESTIN_SZCBSZ01 -5.7340877  0.3333916   -17.199  < 2e-16 ***\nDESTIN_SZCCSZ01 -0.0304192  0.0095920    -3.171 0.001518 ** \nDESTIN_SZCHSZ01 -0.2598507  0.0115311   -22.535  < 2e-16 ***\nDESTIN_SZCHSZ02  0.3497750  0.0068334    51.186  < 2e-16 ***\nDESTIN_SZCHSZ03  2.4550172  0.0050883   482.481  < 2e-16 ***\nDESTIN_SZCKSZ01 -0.4691744  0.0063130   -74.319  < 2e-16 ***\nDESTIN_SZCKSZ02 -0.9557084  0.0069331  -137.847  < 2e-16 ***\nDESTIN_SZCKSZ03  0.0442112  0.0057117     7.740 9.91e-15 ***\nDESTIN_SZCKSZ04 -0.8592063  0.0081238  -105.764  < 2e-16 ***\nDESTIN_SZCKSZ05 -1.1745333  0.0087305  -134.532  < 2e-16 ***\nDESTIN_SZCKSZ06 -0.4982877  0.0085514   -58.269  < 2e-16 ***\nDESTIN_SZCLSZ01  0.2665065  0.0059712    44.632  < 2e-16 ***\nDESTIN_SZCLSZ02 -1.9758876  0.0150823  -131.007  < 2e-16 ***\nDESTIN_SZCLSZ03 -0.9051310  0.0091479   -98.944  < 2e-16 ***\nDESTIN_SZCLSZ04 -0.0828732  0.0061559   -13.462  < 2e-16 ***\nDESTIN_SZCLSZ05 -1.1414780  0.0100760  -113.287  < 2e-16 ***\nDESTIN_SZCLSZ06  0.3229402  0.0056269    57.392  < 2e-16 ***\nDESTIN_SZCLSZ07 -0.4833612  0.0069777   -69.272  < 2e-16 ***\nDESTIN_SZCLSZ08 -0.3219670  0.0075615   -42.580  < 2e-16 ***\nDESTIN_SZCLSZ09  0.0564166  0.0080703     6.991 2.74e-12 ***\nDESTIN_SZDTSZ02 -1.6384236  0.0374725   -43.723  < 2e-16 ***\nDESTIN_SZDTSZ03 -0.4021571  0.0152716   -26.334  < 2e-16 ***\nDESTIN_SZDTSZ13 -1.2799441  0.0177095   -72.274  < 2e-16 ***\nDESTIN_SZGLSZ01 -0.0190303  0.0060665    -3.137 0.001707 ** \nDESTIN_SZGLSZ02 -0.0308469  0.0058724    -5.253 1.50e-07 ***\nDESTIN_SZGLSZ03  0.6927638  0.0048456   142.969  < 2e-16 ***\nDESTIN_SZGLSZ04  0.9325848  0.0049183   189.616  < 2e-16 ***\nDESTIN_SZGLSZ05  0.8480056  0.0048801   173.768  < 2e-16 ***\nDESTIN_SZHGSZ01  0.0652969  0.0047795    13.662  < 2e-16 ***\nDESTIN_SZHGSZ02 -0.9498251  0.0066577  -142.667  < 2e-16 ***\nDESTIN_SZHGSZ03 -1.4372499  0.0076387  -188.154  < 2e-16 ***\nDESTIN_SZHGSZ04 -0.5236292  0.0055353   -94.599  < 2e-16 ***\nDESTIN_SZHGSZ05 -0.5420295  0.0058099   -93.295  < 2e-16 ***\nDESTIN_SZHGSZ06 -0.9054730  0.0067581  -133.983  < 2e-16 ***\nDESTIN_SZHGSZ07  0.0215109  0.0054019     3.982 6.83e-05 ***\nDESTIN_SZHGSZ08 -0.0490979  0.0059206    -8.293  < 2e-16 ***\nDESTIN_SZHGSZ09 -0.0711560  0.0062875   -11.317  < 2e-16 ***\nDESTIN_SZHGSZ10 -3.5807154  0.0290642  -123.200  < 2e-16 ***\nDESTIN_SZJESZ01 -0.4023638  0.0065057   -61.848  < 2e-16 ***\nDESTIN_SZJESZ02 -0.7654353  0.0067096  -114.081  < 2e-16 ***\nDESTIN_SZJESZ03 -0.8778812  0.0071238  -123.232  < 2e-16 ***\nDESTIN_SZJESZ04 -1.1998075  0.0088733  -135.215  < 2e-16 ***\nDESTIN_SZJESZ05 -1.5623652  0.0116898  -133.652  < 2e-16 ***\nDESTIN_SZJESZ06  0.2311474  0.0055595    41.577  < 2e-16 ***\nDESTIN_SZJESZ07 -1.2753348  0.0094838  -134.475  < 2e-16 ***\nDESTIN_SZJESZ08 -0.7654533  0.0099306   -77.081  < 2e-16 ***\nDESTIN_SZJESZ09  0.1637628  0.0074164    22.081  < 2e-16 ***\nDESTIN_SZJESZ10  0.7394958  0.0091249    81.041  < 2e-16 ***\nDESTIN_SZJESZ11  0.5157364  0.0086546    59.591  < 2e-16 ***\nDESTIN_SZJWSZ01 -1.0165204  0.0083025  -122.435  < 2e-16 ***\nDESTIN_SZJWSZ02 -0.8530646  0.0067851  -125.727  < 2e-16 ***\nDESTIN_SZJWSZ03  0.5176135  0.0056449    91.695  < 2e-16 ***\nDESTIN_SZJWSZ04  0.3427105  0.0058499    58.584  < 2e-16 ***\nDESTIN_SZJWSZ05 -1.1695940  0.0080069  -146.073  < 2e-16 ***\nDESTIN_SZJWSZ06 -0.7466462  0.0070240  -106.299  < 2e-16 ***\nDESTIN_SZJWSZ07 -3.0124535  0.0333481   -90.334  < 2e-16 ***\nDESTIN_SZJWSZ08 -0.4253502  0.0066584   -63.881  < 2e-16 ***\nDESTIN_SZJWSZ09  0.9428005  0.0053190   177.251  < 2e-16 ***\nDESTIN_SZKLSZ01 -0.2965013  0.0066422   -44.639  < 2e-16 ***\nDESTIN_SZKLSZ02 -0.4921137  0.0067689   -72.702  < 2e-16 ***\nDESTIN_SZKLSZ03 -0.8489213  0.0078294  -108.427  < 2e-16 ***\nDESTIN_SZKLSZ04 -1.2656342  0.0099918  -126.667  < 2e-16 ***\nDESTIN_SZKLSZ05 -0.3570126  0.0096300   -37.073  < 2e-16 ***\nDESTIN_SZKLSZ06 -2.4764906  0.0390868   -63.359  < 2e-16 ***\nDESTIN_SZKLSZ07 -0.7316189  0.0080994   -90.330  < 2e-16 ***\nDESTIN_SZKLSZ08 -0.1115398  0.0061168   -18.235  < 2e-16 ***\nDESTIN_SZLKSZ01 -1.4940710  0.0271518   -55.027  < 2e-16 ***\nDESTIN_SZMDSZ01 -1.6101440  0.0231238   -69.631  < 2e-16 ***\nDESTIN_SZMDSZ02 -0.9339318  0.0126277   -73.959  < 2e-16 ***\nDESTIN_SZMDSZ03 -3.4868547  0.0303657  -114.829  < 2e-16 ***\nDESTIN_SZMPSZ01 -0.4518483  0.0089869   -50.279  < 2e-16 ***\nDESTIN_SZMPSZ02 -0.5868264  0.0073193   -80.176  < 2e-16 ***\nDESTIN_SZMPSZ03  0.4805365  0.0059041    81.391  < 2e-16 ***\nDESTIN_SZMUSZ02 -1.3837581  0.0218713   -63.268  < 2e-16 ***\nDESTIN_SZNTSZ01 -3.0694691  0.0533346   -57.551  < 2e-16 ***\nDESTIN_SZNTSZ02 -1.4992973  0.0130358  -115.014  < 2e-16 ***\nDESTIN_SZNTSZ03 -0.5221236  0.0089923   -58.064  < 2e-16 ***\nDESTIN_SZNTSZ05 -1.9751162  0.0282369   -69.948  < 2e-16 ***\nDESTIN_SZNTSZ06 -3.9959411  0.0511214   -78.166  < 2e-16 ***\nDESTIN_SZNVSZ01 -0.1126966  0.0057077   -19.745  < 2e-16 ***\nDESTIN_SZNVSZ02 -0.0259250  0.0064427    -4.024 5.72e-05 ***\nDESTIN_SZNVSZ03 -0.0123214  0.0067692    -1.820 0.068725 .  \nDESTIN_SZNVSZ04 -1.3371298  0.0130261  -102.650  < 2e-16 ***\nDESTIN_SZNVSZ05 -0.9686333  0.0101539   -95.395  < 2e-16 ***\nDESTIN_SZPGSZ01 -1.1798309  0.0180543   -65.349  < 2e-16 ***\nDESTIN_SZPGSZ02 -1.3289737  0.0085335  -155.736  < 2e-16 ***\nDESTIN_SZPGSZ03 -0.1661373  0.0055166   -30.116  < 2e-16 ***\nDESTIN_SZPGSZ04 -0.3046408  0.0058469   -52.103  < 2e-16 ***\nDESTIN_SZPGSZ05 -1.5412612  0.0093261  -165.264  < 2e-16 ***\nDESTIN_SZPLSZ01 -0.3439667  0.0083504   -41.192  < 2e-16 ***\nDESTIN_SZPLSZ02 -1.7574919  0.0154244  -113.942  < 2e-16 ***\nDESTIN_SZPLSZ03 -0.3455776  0.0112089   -30.831  < 2e-16 ***\nDESTIN_SZPLSZ04 -2.0749385  0.0141153  -146.999  < 2e-16 ***\nDESTIN_SZPLSZ05 -0.4855216  0.0134069   -36.214  < 2e-16 ***\nDESTIN_SZPNSZ01  0.0117816  0.0083558     1.410 0.158543    \nDESTIN_SZPNSZ02  0.7389858  0.0089823    82.272  < 2e-16 ***\nDESTIN_SZPNSZ03 -0.4708719  0.0098588   -47.761  < 2e-16 ***\nDESTIN_SZPNSZ04  1.3156771  0.0111200   118.316  < 2e-16 ***\nDESTIN_SZPNSZ05  0.9881886  0.0153169    64.516  < 2e-16 ***\nDESTIN_SZPRSZ01 -1.0678999  0.0098295  -108.642  < 2e-16 ***\nDESTIN_SZPRSZ02  0.0650279  0.0063927    10.172  < 2e-16 ***\nDESTIN_SZPRSZ03  0.6348138  0.0050147   126.592  < 2e-16 ***\nDESTIN_SZPRSZ04 -0.3640286  0.0097572   -37.309  < 2e-16 ***\nDESTIN_SZPRSZ05  0.0380410  0.0062577     6.079 1.21e-09 ***\nDESTIN_SZPRSZ06  0.3153712  0.0068742    45.877  < 2e-16 ***\nDESTIN_SZPRSZ07 -1.6669973  0.0145573  -114.513  < 2e-16 ***\nDESTIN_SZPRSZ08 -0.6170648  0.0078424   -78.683  < 2e-16 ***\nDESTIN_SZQTSZ01 -0.5496582  0.0098285   -55.925  < 2e-16 ***\nDESTIN_SZQTSZ02 -0.7318114  0.0086807   -84.303  < 2e-16 ***\nDESTIN_SZQTSZ03 -0.5893064  0.0084789   -69.503  < 2e-16 ***\nDESTIN_SZQTSZ04 -0.7103906  0.0085341   -83.242  < 2e-16 ***\nDESTIN_SZQTSZ05 -0.4721472  0.0078164   -60.405  < 2e-16 ***\nDESTIN_SZQTSZ06 -0.6591466  0.0080069   -82.322  < 2e-16 ***\nDESTIN_SZQTSZ07 -0.9540454  0.0126807   -75.236  < 2e-16 ***\nDESTIN_SZQTSZ08  0.4508867  0.0064870    69.507  < 2e-16 ***\nDESTIN_SZQTSZ09 -0.4061810  0.0075485   -53.810  < 2e-16 ***\nDESTIN_SZQTSZ10  0.1351889  0.0068202    19.822  < 2e-16 ***\nDESTIN_SZQTSZ11  0.3181553  0.0067958    46.816  < 2e-16 ***\nDESTIN_SZQTSZ12 -0.1055766  0.0095576   -11.046  < 2e-16 ***\nDESTIN_SZQTSZ13  0.5199663  0.0071928    72.290  < 2e-16 ***\nDESTIN_SZQTSZ14  0.6086332  0.0078537    77.496  < 2e-16 ***\nDESTIN_SZQTSZ15  1.3906866  0.0092250   150.753  < 2e-16 ***\nDESTIN_SZRCSZ01 -0.0862091  0.0085363   -10.099  < 2e-16 ***\nDESTIN_SZRCSZ06 -1.0186282  0.0211113   -48.250  < 2e-16 ***\nDESTIN_SZRVSZ01 -1.5294454  0.0179337   -85.283  < 2e-16 ***\nDESTIN_SZRVSZ02 -2.3607754  0.0355628   -66.383  < 2e-16 ***\nDESTIN_SZRVSZ03 -1.5266254  0.0156276   -97.688  < 2e-16 ***\nDESTIN_SZRVSZ04 -1.0986565  0.0168695   -65.127  < 2e-16 ***\nDESTIN_SZRVSZ05 -2.4004418  0.0320917   -74.799  < 2e-16 ***\nDESTIN_SZSBSZ01 -1.4023966  0.0109496  -128.078  < 2e-16 ***\nDESTIN_SZSBSZ02 -1.3899893  0.0090891  -152.929  < 2e-16 ***\nDESTIN_SZSBSZ03  0.4509008  0.0059864    75.321  < 2e-16 ***\nDESTIN_SZSBSZ04  0.1796309  0.0070142    25.610  < 2e-16 ***\nDESTIN_SZSBSZ05 -1.3159699  0.0096485  -136.391  < 2e-16 ***\nDESTIN_SZSBSZ06 -1.7705263  0.0253064   -69.964  < 2e-16 ***\nDESTIN_SZSBSZ07 -0.7471529  0.0238628   -31.310  < 2e-16 ***\nDESTIN_SZSBSZ08  0.7884520  0.0069638   113.221  < 2e-16 ***\nDESTIN_SZSBSZ09  0.0131702  0.0066350     1.985 0.047150 *  \nDESTIN_SZSESZ02 -0.7247347  0.0060626  -119.541  < 2e-16 ***\nDESTIN_SZSESZ03  0.1032728  0.0048330    21.368  < 2e-16 ***\nDESTIN_SZSESZ04 -1.0992420  0.0068328  -160.878  < 2e-16 ***\nDESTIN_SZSESZ05 -0.8374712  0.0058155  -144.006  < 2e-16 ***\nDESTIN_SZSESZ06 -0.5531619  0.0074766   -73.985  < 2e-16 ***\nDESTIN_SZSESZ07 -3.0328672  0.0246371  -123.101  < 2e-16 ***\nDESTIN_SZSGSZ01 -0.1933777  0.0068235   -28.340  < 2e-16 ***\nDESTIN_SZSGSZ02 -0.3000845  0.0060284   -49.779  < 2e-16 ***\nDESTIN_SZSGSZ03 -0.4322879  0.0057308   -75.433  < 2e-16 ***\nDESTIN_SZSGSZ04 -0.1214792  0.0056548   -21.482  < 2e-16 ***\nDESTIN_SZSGSZ05 -2.0309074  0.0114993  -176.611  < 2e-16 ***\nDESTIN_SZSGSZ06  0.6592095  0.0046364   142.182  < 2e-16 ***\nDESTIN_SZSGSZ07 -0.4618538  0.0062027   -74.460  < 2e-16 ***\nDESTIN_SZSISZ01 -0.5227257  0.0293399   -17.816  < 2e-16 ***\nDESTIN_SZSKSZ01 -0.4797341  0.0091087   -52.668  < 2e-16 ***\nDESTIN_SZSKSZ02  0.8477357  0.0067821   124.996  < 2e-16 ***\nDESTIN_SZSKSZ03 -0.2477566  0.0074817   -33.115  < 2e-16 ***\nDESTIN_SZSKSZ04 -1.3315992  0.0167055   -79.710  < 2e-16 ***\nDESTIN_SZSKSZ05 -0.3519096  0.0131326   -26.797  < 2e-16 ***\nDESTIN_SZSLSZ01 -0.8570431  0.0102100   -83.941  < 2e-16 ***\nDESTIN_SZSLSZ04 -0.9949105  0.0088280  -112.699  < 2e-16 ***\nDESTIN_SZSRSZ01 -1.0260696  0.0154393   -66.458  < 2e-16 ***\nDESTIN_SZTHSZ01 -4.2040410  0.0404795  -103.856  < 2e-16 ***\nDESTIN_SZTHSZ03 -2.4907000  0.0264056   -94.325  < 2e-16 ***\nDESTIN_SZTHSZ04 -3.0701470  0.0244975  -125.325  < 2e-16 ***\nDESTIN_SZTHSZ06 -2.5308161  0.0169699  -149.135  < 2e-16 ***\nDESTIN_SZTMSZ01 -0.2354889  0.0067201   -35.042  < 2e-16 ***\nDESTIN_SZTMSZ02  1.7379292  0.0044573   389.906  < 2e-16 ***\nDESTIN_SZTMSZ03  0.9112458  0.0048718   187.043  < 2e-16 ***\nDESTIN_SZTMSZ04  1.0731075  0.0048626   220.685  < 2e-16 ***\nDESTIN_SZTMSZ05  0.6398583  0.0067321    95.046  < 2e-16 ***\nDESTIN_SZTNSZ01 -0.3500456  0.0083835   -41.754  < 2e-16 ***\nDESTIN_SZTNSZ02 -1.0573515  0.0112412   -94.060  < 2e-16 ***\nDESTIN_SZTNSZ03 -1.4069979  0.0132733  -106.002  < 2e-16 ***\nDESTIN_SZTNSZ04 -0.3616604  0.0085207   -42.445  < 2e-16 ***\nDESTIN_SZTPSZ01 -0.5919243  0.0071153   -83.190  < 2e-16 ***\nDESTIN_SZTPSZ02  0.7083350  0.0046540   152.198  < 2e-16 ***\nDESTIN_SZTPSZ03 -0.5746433  0.0069625   -82.534  < 2e-16 ***\nDESTIN_SZTPSZ04 -1.5821259  0.0084517  -187.196  < 2e-16 ***\nDESTIN_SZTPSZ05 -1.1796256  0.0073039  -161.505  < 2e-16 ***\nDESTIN_SZTPSZ06 -0.3968272  0.0077295   -51.339  < 2e-16 ***\nDESTIN_SZTPSZ07 -2.1796617  0.0135199  -161.219  < 2e-16 ***\nDESTIN_SZTPSZ08 -1.2568483  0.0107267  -117.170  < 2e-16 ***\nDESTIN_SZTPSZ09 -0.2446623  0.0080840   -30.265  < 2e-16 ***\nDESTIN_SZTPSZ10 -1.2542191  0.0102049  -122.904  < 2e-16 ***\nDESTIN_SZTPSZ11 -0.0886883  0.0062888   -14.102  < 2e-16 ***\nDESTIN_SZTPSZ12 -0.7211823  0.0075086   -96.048  < 2e-16 ***\nDESTIN_SZTSSZ01 -1.6271921  0.0238498   -68.227  < 2e-16 ***\nDESTIN_SZTSSZ02 -0.3340439  0.0169137   -19.750  < 2e-16 ***\nDESTIN_SZTSSZ03  0.3924580  0.0111060    35.338  < 2e-16 ***\nDESTIN_SZTSSZ04  0.4169932  0.0114926    36.283  < 2e-16 ***\nDESTIN_SZTSSZ05  1.3206287  0.0120381   109.704  < 2e-16 ***\nDESTIN_SZTSSZ06  2.4023725  0.0192840   124.579  < 2e-16 ***\nDESTIN_SZWCSZ01  2.0697378  0.0061379   337.206  < 2e-16 ***\nDESTIN_SZWCSZ02 -2.0934025  0.0134782  -155.318  < 2e-16 ***\nDESTIN_SZWCSZ03 -3.0670149  0.0349748   -87.692  < 2e-16 ***\nDESTIN_SZWDSZ01  1.0113215  0.0051461   196.522  < 2e-16 ***\nDESTIN_SZWDSZ02 -1.3383793  0.0076482  -174.993  < 2e-16 ***\nDESTIN_SZWDSZ03  0.3394361  0.0060396    56.202  < 2e-16 ***\nDESTIN_SZWDSZ04 -0.8324928  0.0086019   -96.780  < 2e-16 ***\nDESTIN_SZWDSZ05 -0.8279090  0.0083251   -99.447  < 2e-16 ***\nDESTIN_SZWDSZ06 -0.2252899  0.0061074   -36.888  < 2e-16 ***\nDESTIN_SZWDSZ07 -1.3638599  0.0077990  -174.877  < 2e-16 ***\nDESTIN_SZWDSZ08 -0.4350176  0.0077566   -56.083  < 2e-16 ***\nDESTIN_SZWDSZ09  0.5461048  0.0060745    89.901  < 2e-16 ***\nDESTIN_SZYSSZ01  0.0243093  0.0053476     4.546 5.47e-06 ***\nDESTIN_SZYSSZ02 -0.3398962  0.0065947   -51.540  < 2e-16 ***\nDESTIN_SZYSSZ03 -0.3694187  0.0074032   -49.900  < 2e-16 ***\nDESTIN_SZYSSZ04 -0.5222848  0.0067396   -77.495  < 2e-16 ***\nDESTIN_SZYSSZ05 -1.5460539  0.0124899  -123.784  < 2e-16 ***\nDESTIN_SZYSSZ06 -1.5556892  0.0127640  -121.881  < 2e-16 ***\nDESTIN_SZYSSZ07 -0.8673403  0.0167723   -51.713  < 2e-16 ***\nDESTIN_SZYSSZ08  0.5389364  0.0052540   102.577  < 2e-16 ***\nDESTIN_SZYSSZ09  0.1199483  0.0055235    21.716  < 2e-16 ***\nlog(dist)       -1.8906989  0.0005319 -3554.786  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance:  8091747  on 13715  degrees of freedom\nAIC: 8177420\n\nNumber of Fisher Scoring iterations: 7\n\n\n\nCalcRSquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)\n\n[1] 0.6883675"
  },
  {
    "objectID": "In-Class-Exercises/chapter-15/ICE12.html#visualisation",
    "href": "In-Class-Exercises/chapter-15/ICE12.html#visualisation",
    "title": "In-Class Exercise 12: Spatial Interaction Models",
    "section": "Visualisation",
    "text": "Visualisation\nAppend fitted values of unconstrained\n\ndf <- as.data.frame(uncSIM$fitted.values) %>%\n  round(digits = 0)\n\nSIM_data <- SIM_data %>%\n  cbind(df) %>%\n  rename(uncTRIPS = \"uncSIM$fitted.values\")\n\nAppend fitted values of origin constrained\n\ndf <- as.data.frame(orcSIM$fitted.values) %>%\n  round(digits = 0)\n\nSIM_data <- SIM_data %>%\n  cbind(df) %>%\n  rename(orcTRIPS = \"orcSIM$fitted.values\")\n\nAppend destination constrained\n\ndf <- as.data.frame(decSIM$fitted.values) %>%\n  round(digits = 0)\n\nSIM_data <- SIM_data %>%\n  cbind(df) %>%\n  rename(decTRIPS = \"decSIM$fitted.values\")\n\nAppend doubly constrained\n\ndf <- as.data.frame(dbcSIM$fitted.values) %>%\n  round(digits = 0)\n\nSIM_data <- SIM_data %>%\n  cbind(df) %>%\n  rename(dbcTRIPS = \"dbcSIM$fitted.values\")\n\nNow we can visualise it!\n\nunc_p <- ggplot(data = SIM_data,\n                aes(x = uncTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\norc_p <- ggplot(data = SIM_data,\n                aes(x = orcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndec_p <- ggplot(data = SIM_data,\n                aes(x = decTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndbc_p <- ggplot(data = SIM_data,\n                aes(x = dbcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\nggarrange(unc_p, orc_p, dec_p, dbc_p,\n          ncol = 2,\n          nrow = 2)"
  }
]